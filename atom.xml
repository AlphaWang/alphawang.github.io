<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Alpha's Programming Notes]]></title>
  <link href="http://alphawang.github.io/atom.xml" rel="self"/>
  <link href="http://alphawang.github.io/"/>
  <updated>2019-05-01T23:09:40+08:00</updated>
  <id>http://alphawang.github.io/</id>
  <author>
    <name><![CDATA[Alpha Wang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Redis Mind Map]]></title>
    <link href="http://alphawang.github.io/blog/redis-mind-map/"/>
    <updated>2019-05-01T22:57:45+08:00</updated>
    <id>http://alphawang.github.io/blog/redis-mind-map</id>
    <content type="html"><![CDATA[<p>最近梳理了下 Redis 知识图谱，画了个脑图，涵盖了 Redis 数据类型、持久化机制、主从、哨兵、集群、应用及运维；具体见下图：</p>

<!--more-->


<p><img src="http://alphawang.github.io/images/post/2019/redis-mind-map.svg" alt="redis" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dapper, a Large-Scale Distributed Systems Tracing Infrastructure]]></title>
    <link href="http://alphawang.github.io/blog/google-dapper-translation/"/>
    <updated>2019-03-24T12:04:46+08:00</updated>
    <id>http://alphawang.github.io/blog/google-dapper-translation</id>
    <content type="html"><![CDATA[<blockquote><p>最近在研究分布式链路跟踪系统，Google Dapper 当然是必读的论文了，目前网上能搜到一些中文翻译版，然而读下来个人感觉略生硬；这里试着在前人的肩膀上重新翻译一遍这个论文，权当是个人的学习笔记，如果同时能给其他人带来好处那就更好了。</p>

<p>同时把译文放到了 github，如您发现翻译错误或者不通顺之处，恳请提交 github PR: <a href="https://github.com/AlphaWang/alpha-dapper-translation">https://github.com/AlphaWang/alpha-dapper-translation</a></p>

<ul>
<li>原文：<a href="https://ai.google/research/pubs/pub36356">https://ai.google/research/pubs/pub36356</a></li>
<li>译文：<a href="http://alphawang.com/blog/google-dapper-translation">http://alphawang.com/blog/google-dapper-translation</a></li>
</ul>
</blockquote>

<h2>摘要</h2>

<p>现代互联网服务通常都是复杂的大规模分布式系统。这些系统由多个软件模块构成，这些软件模块可能由不同的团队开发、可能使用不同的编程语言实现、可能布在横跨多个数据中心的几千台服务器上。这种环境下就急需能帮助理解系统行为、能用于分析性能问题的工具。</p>

<p>本文将介绍 Dapper 这个在 Google 生产环境下的分布式系统跟踪服务的设计，并阐述它是如何满足在一个超大规模系统上达到<strong>低损耗</strong>（low overhead）、<strong>应用级透明</strong>（application-level transparency）、<strong>大范围部署</strong>（ubiquitous deployment）这三个需求的。Dapper 与其他一些跟踪系统的概念类似，尤其是 Magpie<sup>[3]</sup> 和X-Trace<sup>[12]</sup>，但是我们进行了一些特定的设计，使得 Dapper 能成功应用在我们的环境上，例如我们使用了采样并将性能测量（instrumentation）限制在很小一部分公用库里。</p>

<!--more-->


<p>本文的主要目的是汇报两年多以来我们构建、部署并应用 Dapper 的经历，这两年多里 Dapper 对开发和运维团队非常有用，取得了显著的成功。最初 Dapper 只是一个自包含（self-contained）的跟踪工具，后来演化成了一个监控平台并促生出许多不同的工具，有些工具甚至 Dapper 的设计者都未曾预期到。我们将介绍一些基于 Dapper 构造的分析工具，分享这些工具在 Google 内部使用的统计数据，展示一些使用场景的例子，并讨论我们学习到的经验教训。</p>

<h2>1 介绍</h2>

<p>Dapper 的目的是为了将复杂分布式系统的更多行为信息提供给 Google 开发者。这种分布式系统利用大规模的小服务器，通常对于互联网服务是一个非常经济的平台，所以很受关注。要理解在这种上下文中要的系统行为的话，就需要观察横跨不同程序和不同机器的关联行为。</p>

<p>下面基于一个 web 搜索的例子来说明这种系统需要应对哪些挑战。前端服务器将一个 web 查询分发给上百台搜索服务器，每个搜索服务器在自己的 index 中完成搜索。同时这个 web 查询可能还会被发送给多个其他子系统，进行广告处理、拼写检查、查找相关的图片/视频/新闻等。所有这些服务的结果会被有选择地合并成结果页面；我们把这种模型称之为<code>全局搜索 (universal search)</code>。处理一次全局搜索查询，总计需要上千台机器，涉及多种服务。而且 web 搜索的用户对延时很敏感，而任何一个子系统的性能差了都可能导致延时。工程师如果只看总体耗时的话，他能知道出问题了，但是他猜不到是哪个系统出问题、为什么出问题。<strong>首先，工程师可能无法准确知道到底调用了哪些服务</strong>；每周我们都会添加新的服务，用于实现用户需求、提升性能或安全性。<strong>其次，工程师不可能对每个服务的内部都了如指掌</strong>；每个服务都是由不同的团队开发维护的。<strong>第三，服务和服务器可能被许多不同的客户端调用</strong>，所以性能问题有可能是其他应用造成的。举例来说，前端服务器可能要处理多个不同的请求类型，或者类似 Bigtable 这种存储系统在被多个应用共享时效率最高。</p>

<p>上面描述的场景就对 Dapper 提出了两条最基本的要求：大范围部署 (uniquitous deployment)、持续监控 (continuous monitoring)。即便只有很小一部分系统没有被监控到，跟踪系统的作用也会大打折扣，所以大范围部署非常重要。另外，应该始终开启监控，因为通常来说异常系统行为很难重现，甚至根本无法重现。这两条基本要求提出了三个具体的设计目标：</p>

<ul>
<li><strong>低消耗 (Low overhead)</strong>：跟踪系统对在线服务的性能影响应该做到可忽略不计。对于一些高度优化过的服务，监控系统的一点小消耗都会很显眼，都可能迫使部署团队不得不关停跟踪系统。</li>
<li><strong>应用级透明 (Application-level transparency)</strong>：程序员应该不需要感知到跟踪系统。如果跟踪系统要求应用开发者的配合才能生效，那么这个跟踪系统就太脆弱了，经常会由于应用侵入代码的 bug 或者疏忽导致无法正常工作，这就违反了"大范围部署"的要求。这在我们这种快速开发的环境下尤为重要。</li>
<li><strong>可扩展性 (Scalability)</strong>：需要能处理 Google 在未来几年的服务和集群规模。</li>
</ul>


<p>另外一个设计目标是生成跟踪数据后要很快可用于分析：最好是在一分钟内。尽管一个能处理几小时前数据的跟踪分析系统已经很有用了，但是能分析最新数据的话会让我们能对生产环境的异常情况作出快速反应。</p>

<p>我们通过把 Dapper 跟踪植入的核心代码限制在线程调用、控制流以及 RPC 等库代码中，实现了真正的应用透明这个最具挑战性的目标。使用自适应的采样（见4.4节），我们做到了可扩展性、降低性能损耗。最终的系统还包括收集跟踪数据的代码、可视化数据的工具、用于分析大规模跟踪数据的库和 API。尽管开发人员有时通过 Dapper 就足以找出性能问题的根源，但 Dapper 并不会替代所有其他的工具。我们发现 Dapper 的数据往往侧重于性能排查，所以其他工具也有自己的用处。</p>

<h3>1.1 贡献总结</h3>

<p>之前已有一些优秀的文章探讨了分布式系统跟踪工具的设计空间，其中 Pinpoint<sup>[9]</sup>、Magpie<sup>[3]</sup> 和 X-Trace<sup>[12]</sup>  与 Dapper 最为相关。这些系统倾向于在开发过程中的早期就写成研究报告，而此时还没有机会明确地评估重要的设计选型。Dapper 已经在生产环境中被大型系统应用好几年了，我们认为本文最适合的侧重点是讨论我们在 Dapper 开发过程中有哪些收获、我们的设计决策是如何制定的、它在哪些方面最有用。Dapper 作为一个开发性能分析工具的平台以及作为一个监控工具，其价值是我们可以在回顾评估中找到一些意想不到的产出。</p>

<p>虽然 Dapper 的许多高层理念和 Pinpoint、Magpie 等其他系统是共通的，但是我们的实现包含了一系列新的贡献。举个例子，我们发现要想降低消耗的话采样就必不可少，尤其是在高度优化后的对延迟非常敏感的 web 服务中。或许最令人惊讶的是，我们发现即便只使用 1/1000 的采样率，已经能为跟踪数据的通用用例提供足够多的信息了。</p>

<p>Dapper 的另一个重要特征是我们实现的应用透明程度非常高。我们将性能测量限制在足够底层，所以即便是像 Google web 搜索这样的大型分布式系统也能进行跟踪，而无需额外的注解。虽然由于我们的部署环境具有一定的同质性，所以更容易实现应用透明这个目标，但是我们的结果也论证了实现透明性的充分条件。</p>

<h2>2 Dapper 的分布式跟踪</h2>

<p>分布式服务的跟踪系统需要记录在一次请求后系统完成的所有工作的信息。举个例子，图-1展示了拥有 5 台服务器的服务：一个前端服务器 A，两个中间层 B 和 C，两个后端服务器 D 和 E。当用户发起请求到前端服务器 A 之后，会发送两个 RPC 调用到 B 和 C。B 马上会返回结果，但是 C 还需要继续调用后端服务器 D 和 E，然后返回结果给 A，A 再响应最初的请求。对这个请求来说，一个简单的分布式跟踪系统需要记录每台机器上的每次信息发送和接收的信息标识符和时间戳。</p>

<p><img src="http://alphawang.github.io/images/post/2019/dapper/dapper-1_tree.png" alt="dapper-1_tree" /></p>

<p><em>(图-1. 由用户请求X 发起的穿过一个简单服务系统的请求路径。字母标识的节点表示分布式系统中的处理过程)</em></p>

<p>为了能将信息聚合到一起以便人们能将所有记录信息关联到一个初始请求（如图1中的请求 X），我们提出了两种解决方案：<code>黑盒监控模式</code> 和 <code>基于标注的监控模式</code>。<strong>黑盒模式</strong><sup>[1, 15, 2] </sup>假定除了上面描述的信息记录之外无需任何额外的信息，而使用统计回归技术来推断关联关系。<strong>基于标注的模式</strong><sup>[3, 12, 9, 16]</sup> 则要求应用程序或中间件显式地将每个记录关联到一个全局 ID，从而将这些信息记录关联回初始请求。黑盒模式比基于标注的模式更加轻便，但是它依赖统计推断，所以需要更多的数据以便获取足够的准确性。很明显，基于标注的模式关键缺点是需要有代码侵入。在我们的环境中，由于所有应用系统都使用相同的线程模型、控制流和 RPC 系统，所以我们可以将性能测量限制在小规模的公用库中，以此实现对开发人员有效透明的监控系统。</p>

<p>我们倾向于认为 Dapper 的跟踪是一个嵌入式的 RPC 树。然而，我们的核心数据模型并不局限于特定的RPC 框架；我们也能跟踪例如 Gmail SMTP 会话、来自外界的 HTTP 请求、对 SQL 服务器的查询等行为。正式一点说，Dapper 跟踪模型使用了<code>树</code>、<code>span</code>和 <code>标注</code>。</p>

<h3>2.1 跟踪树与span</h3>

<p>在 Dapper 跟踪树中，树节点是基本单元，我们称之为 <code>span</code>。节点之间的连线表示 span 与其<code>父span</code> 之间的关系。虽然节点在整个跟踪树中的位置是独立的，但 span 也是一个简单的时间戳日志，其中编码了这个 span 的开始时间、结束时间、RPC 时间数据、以及0或多个应用程序相关的标注，我们将在 2.3 节讨论这些内容。</p>

<p><img src="http://alphawang.github.io/images/post/2019/dapper/dapper-2_span.png" alt="dapper-2_span" /></p>

<p><em>(图-2. Dapper 跟踪树中5个 span 的因果和实时关系)</em></p>

<p>图2 阐释了 span 是如何构造成更大的跟踪结构的。Dapper 为每个 span 记录了一个可读的<code>span name</code>、<code>span id</code>和 <code>parent id</code>，这样就能重建出一次分布式跟踪过程中不同 span 之间的关系。没有parent id 的 span被称为 <code>根span</code>。一次特定跟踪的所有相关 span 会共享同一个通用的<code>trace id</code> （trace id在图中没有绘出）。所有这些 ID 可能是唯一的 64 位整数。在一个典型的 Dapper 跟踪中，我们希望每个 RPC 对应一个 span，每一个组件层对应跟踪树上的一个层级。</p>

<p><img src="http://alphawang.github.io/images/post/2019/dapper/dapper-3_span_detail.png" alt="dapper-3_span_detail" /></p>

<p><em>(图-3. span 的详细视图)</em></p>

<p>图3 给出了 Dapper 跟踪 span 中记录的事件的更详细视图。这个 span 标示图 2 中更长的那次 <code>Helper.Call</code> RPC 调用。Dapper 的 RPC 库记录下了 span 的开始时间和结束时间、RPC 的计时信息。如果应用程序负责人选择用他们自己的标注来注释这次跟踪（例如图中的<code>foo</code>），那么这些信息也会跟随 span 的其他信息一起记录下来。</p>

<p>要着重强调的是，一个 span 中的信息可能来自多个不同的主机；实际上，每个 RPC span 都包含 client和 server 端的标注，这使得<code>二主机span (two host span)</code>是最常见的情况。由于 client 和 server 的时间戳来自不同的主机，所以我们需要注意时钟偏差。在我们的分析工具中，我们利用了如下事实：RPC client 发送请求总是会先于 server 接受到请求，对于 server 响应也是如此。这样一来，RPC server 端的 span 时间戳就有了下限和上限。</p>

<h3>2.2 性能测量点 Instrumention points</h3>

<p>通过对部分通用库进行性能测量，Dapper 能够做到在对应用程序开发者零干扰的情况下进行分布式路径跟踪：</p>

<ul>
<li>当一个线程处理被跟踪的控制路径时，Dapper 会把一个<code>跟踪上下文（trace context）</code>存储到ThreadLocal 中。跟踪上下文是一个小而容易复制的容器，里面包含了 trace id 和 span id 等 span属性。</li>
<li>当计算过程是延迟调用或异步执行时，多数 Google 开发者会使用一个通用的控制流程库来构造回调函数，并用线程池或其他 executor 来执行回调。Dapper 确保所有的回调都会存储其创建者的跟踪上下文，而当执行回调时这个跟踪上下文会关联到合适的线程上。通过这种方式，Dapper 用于重建跟踪的 ID 也能透明地用于异步控制流程。</li>
<li>Google 进程间的通讯几乎都是建立在一个用 C++ 和 Java 开发的 RPC 框架上。我们在这个框架上进行性能测量，定义了所有 RPC 调用相关的 span。被跟踪的 RPC 调用的 span id 和 trace id 会从客户端传送到服务端。对于这种在Google内广泛使用的基于RPC的系统来说，这是一个非常必要的性能测量点。我们计划当非 RPC 通讯框架发展成熟并找到其用户群后，再对非 RPC 通信框架进行性能测量。</li>
</ul>


<p>Dapper 的跟踪数据是语言无关的，生产环境中的许多跟踪结合了 C++ 和 Java 进程中的数据。在 3.2 节我们将讨论我们在实践中达到了何种程度的应用程序透明。</p>

<h3>2.3 标注 Annotation</h3>

<p>上述性能测量点足够推导出复杂分布式系统的跟踪细节，这使得 Dapper 的核心功能也适用于那些不可修改的 Google 应用程序。然而，Dapper 也允许应用程序开发者添加额外的信息，以丰富 Dapper 的跟踪数据，从而帮助监控更高级别的系统行为，或者帮助调试问题。我们允许用户通过一个简单的 API 来定义带时间戳的标注，其核心代码如图4 所示。这些标注支持任意内容。为了保护 Dapper 用户不至于意外加入太多日志，每个跟踪 span 都可配置一个标注量的上限。应用程序级别的标注是不能替代结构化的 span 信息以及 RPC 信息的。</p>

<p><img src="http://alphawang.github.io/images/post/2019/dapper/dapper-4_annotation.png" alt="dapper-4_annotation" /></p>

<p><em>(图-4. Dapper 标注 API 在 C++ 和 Java 中的通用使用模式)</em></p>

<p>除了简单的文本标注，Dapper 也支持 key-value map 的标注，给开发者提供更强的跟踪能力，例如维护计数器、记录二进制消息、传输任意用户自定义的数据。这些 key-value 标注可用于在分布式跟踪上下文中定义应用程序相关的对等类（equivalence classes）。</p>

<h3>2.4 采样 Sampling</h3>

<p>Dapper 的一个关键设计目标是低损耗，因为如果一个新工具的价值还未证实，而对性能有影响的话，服务运维人员是不会愿意去部署这个工具的。而且，我们还想要允许开发人员使用标注 API，而无需担心额外的损耗。我们同时也发现 web 服务确实对性能测量的损耗很敏感。所以，除了把 Dapper 的基本性能测量损耗限制得尽可能小，我们还通过仅记录一部分跟踪信息，来进一步降低损耗。我们将在 4.4 节详细讨论这种跟踪采样模式。</p>

<h3>2.5 跟踪收集</h3>

<p><img src="http://alphawang.github.io/images/post/2019/dapper/dapper-5_collection.png" alt="dapper-5_collection" /></p>

<p><em>(图-5. Dapper 收集管道概览)</em></p>

<p>Dapper 的跟踪记录和收集管道分为三个阶段（如图5）。首先，把 span 数据写入(1) 到本地日志文件。然后 Dapper 守护进程从所有生产主机中将他们拉取出来(2)，最终写入(3) 到 Dapper 的 Bigtable 仓库中。Bigtable 中的行表示一次跟踪，列表示一个 span。Bigtable 对稀疏表格布局的支持正适合这种情况，因为每个跟踪都可能有任意多个 span。跟踪数据收集即将应用程序二进制数据传输到中央仓库，其延迟中位数小于 15 秒。98 分位延迟呈现双峰形；大约 75% 时间里，98 分位延迟小于 2 分钟，但是在另外 25% 时间里可能会涨到几小时。</p>

<p>Dapper 还提供了一个 API 来简化对仓库中跟踪数据的访问。Google 开发者利用这个API来构造通用的或者特定应用程序的分析工具。5.1 节将介绍这个 API 的使用。</p>

<h4>2.5.1 带外（out-of-band）跟踪收集</h4>

<p>Dapper 系统在请求树 <code>带外(out-of-band)</code> 进行日志跟踪与收集。这样做有两个原因：首先，带内收集模式（in-band collection scheme）通过 RPC 响应头回传跟踪数据，这会影响应用的网络动态。Google 的许多大型系统里，一次跟踪有几千个 span 的情况并不少见。而即便是在大型分布式跟踪的根节点附近，RPC 响应仍然是相当小的：通常小于 10K。在这种情况下，带内跟踪数据会影响应用数据，并且使后续的分析结果产生偏差。其次，带内收集模式假定所有 RPC 调用时完美嵌套的。而我们发现许多中间件系统会在其后端服务返回最终结果前，返回一个结果给其调用者。带内收集系统不能适用于这种非嵌套的分布式执行模式。</p>

<h3>2.6 安全和隐私考虑</h3>

<p>记录 RPC payload 信息会丰富 Dapper 的跟踪能力，因为分析工具可能能从 payload 数据中找到导致性能异常的模式。然而在某些情况下，payload 数据可能会包含一些信息，这些信息不应该暴露给非授权内部用户，包括正在调试性能的工程师。</p>

<p>由于安全和隐私是不可忽略的问题，所以 Dapper 存储了 RPC 方法名，但不会存储任何 payload 数据。相反，应用级别的标注则提供了一个方便的可选机制：应用开发人员可以选择将那些对以后分析有用的任何数据关联到一个 span 上。</p>

<p>Dapper 还提供了一些设计者没料到的安全性好处。例如 Dapper 通过跟踪公开的安全协议参数，用来监控应用是否满足认证或加密的安全策略。Dapper 还可以提供信息以确保系统是否执行了预期的基于策略的隔离，例如承载敏感数据的应用不与未授权的系统组件交互。这种方法可比代码审核强多了。</p>

<h2>3 Dapper 的部署状况</h2>

<p>我们把 Dapper 作为生产环境跟踪系统超过两年了。本节我们将汇报 Dapper 系统的状态，着重讲解Dapper 如何很好地满足大范围部署、应用级透明等目标的。</p>

<h3>3.1 Dapper 运行时库</h3>

<p>Dapper 代码中最关键的部分也许就是对基础 RPC、线程、控制流库的性能测量了，包含创建 span、采样以及记录到本地磁盘。我们的代码不仅需要轻量，还需要稳定、健壮，因为它与海量应用连接，维护和 bug 修复是很困难的。我们的C++ 性能测量的核心代码少于 1000 行，而 Java 代码则少于 800 行。key-value 标注的代码实现额外有 500 行代码。</p>

<h3>3.2 生产环境覆盖率</h3>

<p>Dapper 的渗透率可以通过两方面来衡量：其一是可以<strong>产生</strong> Dapper 跟踪的生产环境进程比率（即与 Dapper 性能测量运行时库连接的那些），其二是运行 Dapper 跟踪<strong>收集</strong>守护进程的生产环境机器比率。Dapper 守护进程是我们基本机器镜像的一部分，所以实际上它在 Google 的每台服务器上都有。很难确定 Dapper-ready 进程精确比率，因为那些不产生跟踪信息的进程是对 Dapper 不可见的。尽管如此，因为 Dapper 性能测量库几乎无处不在，我们估么着几乎每一个 Google 生产环境进程都支持跟踪。</p>

<p>在有些情况下 Dapper 不能正确地跟踪控制流程。这通常是由于使用了非标准的控制流程，或是由于Dapper 错误地将因果关系归到无关的事件上。Dapper 提供了一个简单的库作为一种变通方法，可以帮助开发者手动控制跟踪的传播。目前有 40 个 C++ 应用和 33 个 Java 应用需要手工的跟踪传播，这对总计几千个应用来说只是很小的一部分。还有很小一部分程序使用的是没有性能测量的通讯库（例如通过原生 TCP Socket 或者 SOAP RPC），所以是不支持 Dapper 跟踪的。但如果真的需要的话，这些应用也可以做到支持 Dapper。</p>

<p>为了生产环境的安全性，Dapper 跟踪是可以被关闭的。实际上在早期它默认是关闭的，直到我们对Dapper 的稳定性和低损耗有信心之后，我们才把它开启了。Dapper 团队偶尔会进行审计检查配置文件的变化，找到那些关闭了跟踪配置的服务。这种变化很少见，并且通常是因为担心监控的消耗。经过对实际消耗的进一步调查和衡量，发现其消耗已经很小了，所以现在这些改动都已经被回退回去了。</p>

<h3>3.3 跟踪标注的使用</h3>

<p>程序员们喜欢用应用程序特定的标注来作为一种分布式调试日志文件，或者通过应用程序的特定功能来对跟踪进行分类。例如所有 Bigtable 的请求都标注了访问的表名。目前 Dapper 中 70% 的 span 和 90% 的 trace 都至少有一个应用指定的标注。</p>

<p>我们有 41 个 Java 应用和 68 个 C++ 应用添加了自定义的标注以便更好地理解 span 内的行为。值得注意的是 Java 开发者在每个 span 上加的标注比 C++ 开发者更多，这也许是因为 Java 的负载更接近最终用户；这类应用经常处理更广的请求，所以控制路径也相对更复杂。</p>

<h2>4 管理跟踪损耗</h2>

<p>跟踪系统的成本是由于生成追踪和收集数据造成的系统性能下降，以及用来存储和分析跟踪数据的资源量。尽管你可以说一个有价值的跟踪系统即便造成一点性能损耗也是值得的，但是我们相信如果基线损耗达到可以忽略的程度，那么一定会对跟踪系统的最初推广大有裨益。</p>

<p>本节我们将展示 Dapper 性能测量操作的消耗、跟踪收集的消耗、以及 Dapper 对生产环境负载的影响。同时还会介绍 Dapper 的适应性采样机制是如何帮助我们平衡低损耗的需求与代表性跟踪的需求。</p>

<h3>4.1 跟踪生成的损耗</h3>

<p>跟踪生成的损耗是 Dapper 性能影响中最重要的部分，因为收集和分析可以在紧急情况下关闭掉。Dapper 运行库生成跟踪的消耗最重要的原因是创建销毁 span 和标注、以及记录到本地磁盘以便后续的收集。非根 span 的创建和销毁平均需要 176 纳秒，而根 span 则需要 204 纳秒。这个差别是因为要对根 span 分配全局唯一 trace id 的时间。</p>

<p>如果一个 span 没有被采样的话，那么额外标注的成本则几乎可以忽略不计，只需 Dapper 运行时在ThreadLocal 中查找，平均花费 9 纳秒。而如果这个 span 被采样的话，对 span 进行字符串标注（见图4）则平均需要花费 40 纳秒。这些数据都是基于 2.2GHz x86 服务器测量得出的。</p>

<p>Dapper 运行时库最昂贵的操作就是写入本地磁盘了，不过这个损耗可以大大减少，因为每个磁盘都会合并对多个日志文件写入操作，并且相对于被跟踪的应用系统来说是异步执行的。尽管如此，日志写入对高吞吐量系统仍然可能有可见的性能影响，尤其是当所有请求都都被跟踪时。在 4.3 节我们对一次Web 搜索过程中生成跟踪的损耗进行了量化。</p>

<h3>4.2 跟踪收集的损耗</h3>

<p>读出本地的跟踪数据也会对正在监控的系统产生影响。表1 展示了在高于实际负载的测试情况下，Dapper 守护进程 CPU 使用率的最坏情况。</p>

<table>
<thead>
<tr>
<th style="text-align:right;"> Process Count (per host) </th>
<th style="text-align:right;"> Data Rate (per process) </th>
<th style="text-align:right;"> Daemon CPU Usage (single CPU core) </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right;">                       25 </td>
<td style="text-align:right;">                 10K/sec </td>
<td style="text-align:right;">                             0.125% </td>
</tr>
<tr>
<td style="text-align:right;">                       10 </td>
<td style="text-align:right;">                200K/sec </td>
<td style="text-align:right;">                             0.267% </td>
</tr>
<tr>
<td style="text-align:right;">                       50 </td>
<td style="text-align:right;">                  2K/sec </td>
<td style="text-align:right;">                             0.130% </td>
</tr>
</tbody>
</table>


<p><em>(表-1. Dapper 守护进程在负载测试中 CPU 资源使用率)</em></p>

<p>Dapper 守护进程在跟踪收集过程中，对生产环境单核 CPU 的占用率从未超过 0.3%，并且内存占用也很小。同时我们把 Dapper 守护进程在内核 scheduler 中的优先级限制到尽可能最低，以防在高负载机器上出现 CPU 竞争。</p>

<p>Dapper 对网络资源的消耗也轻量，我们仓库中每个 span 平均只有 426 byte。Dapper 跟踪数据在Google 生产环境中占用的网络流量小于 0.01%。</p>

<h3>4.3 对生产环境负载的影响</h3>

<p>高吞吐量的在线服务处理每个请求都会用到大量的机器，这种在线服务最有需求进行高效的跟踪；他们会生成大量的跟踪数据，同时也对性能影响是最敏感的。在表2 中我们用 web 搜索集群作为例子，通过调整采样率，来测量 Dapper 对平均延迟和吞吐量的性能影响。</p>

<table>
<thead>
<tr>
<th style="text-align:right;"> Sampling frequency </th>
<th style="text-align:right;"> Avg. Latency (% change) </th>
<th style="text-align:right;"> Avg. Throughput (% change) </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right;">                1/1 </td>
<td style="text-align:right;">                   16.3% </td>
<td style="text-align:right;">                     -1.48% </td>
</tr>
<tr>
<td style="text-align:right;">                &frac12; </td>
<td style="text-align:right;">                   9.40% </td>
<td style="text-align:right;">                     -0.73% </td>
</tr>
<tr>
<td style="text-align:right;">                &frac14; </td>
<td style="text-align:right;">                   6.38% </td>
<td style="text-align:right;">                     -0.30% </td>
</tr>
<tr>
<td style="text-align:right;">                1/8 </td>
<td style="text-align:right;">                   4.12% </td>
<td style="text-align:right;">                     -0.23% </td>
</tr>
<tr>
<td style="text-align:right;">               1/16 </td>
<td style="text-align:right;">                   2.12% </td>
<td style="text-align:right;">                     -0.08% </td>
</tr>
<tr>
<td style="text-align:right;">             1/1024 </td>
<td style="text-align:right;">                  -0.20% </td>
<td style="text-align:right;">                     -0.06% </td>
</tr>
</tbody>
</table>


<p><em>(表-2. Dapper 采样频率对 Web 搜索集群延迟及吞吐量的影响。延迟及吞吐量的实验误差分别为 2.5% 和 0.15%)</em></p>

<p>可以看到，虽然对吞吐量的影响不是很明显，但为了避免明显的延迟，跟踪采样还是非常有必要的。然而，当采样率小于 1/16 时的延迟和吞吐量损失是在实验误差范围内的。实践中，我们发现对于高容量服务来说，即便把采样率设为 1/1024 这样低，仍然能够得到足够多的跟踪数据。保持 Dapper 的性能损耗基线极其低是很重要的，因为这就能为应用程度提供一个宽松的环境来使用完整的标注 API，而无需担心性能损失。使用低采样率还有一个额外的好处，可以让主机磁盘中的数据在被垃圾回收之前能持久化更长的时间，这就让收集组件有了更多的灵活性。</p>

<h3>4.4 适应性采样</h3>

<p>Dapper 对于任何给定进程的损耗是与单位时间内进程跟踪的数目成正比的。Dapper 的第一个生产版本在 Google 的几乎所有进程上使用同一个采样率，每 1024 个候选中平均采样一个。这个简单的方案对高吞吐量在线服务是有效的，因为大多数我们感兴趣的事件仍然会经常出现并被捕捉到。</p>

<p>然而，低流量的服务在这种低采样率下就可能会错失重要的事件，而更高采样率带来的性能损耗是可接受的。针对这种系统的解决方案是覆盖默认采样率，而这就需要手工干预，我们不想在 Dapper 中出现这种手工干预。</p>

<p>我们正在部署一种适应性的采样机制，不使用统一的采样率，而使用单位时间内的期望采样率。这样，低流量负载会自动提高采样率，而高流量负载则会自动降低采样率，从而掌控损耗。实际采样率会和跟踪数据一起记录下来；这有利于在基于 Dapper 数据的分析工具中精准使用采样率。</p>

<h3>4.5 应对激进采样</h3>

<p>Dapper 新用户往往觉得低采样率（高流量服务中通常会低于 0.01%）会干扰他们的分析。我们在Google 中应用的经验让我们相信，对于高吞吐量服务来说，激进采样并不会妨碍最重要的那些分析。如果一个重要的执行模式在这种系统中出现过一次，那么就会出现上千次。每秒请求几十次而不是上万次的那些低流量服务则可以承受跟踪每一个请求；这驱动着我们往适应性采样方向前进。</p>

<h3>4.6 收集过程中的额外采样</h3>

<p>上述采样机制用来尽量减少与 Dapper 运行时库协作的应用程序中的性能损耗。Dapper 团队还需要控制写入中央仓库的数据量，为此我们引入了第二轮采样。</p>

<p>目前我们生产集群每天产生超过 1 TB 的采样跟踪数据。Dapper 用户希望跟踪数据从生产进程中记录下来后最少保留两周时间。逐渐增长的跟踪数据带来了好处，同时 Dapper 仓库的机器和磁盘存储成本也在增加，我们需要作出权衡。对请求的高采样率还会使得 Dapper 收集器接近 Dapper Bigtable 仓库的写入吞吐量极限。</p>

<p>为了维持物资资源的需求和 Bigtable 的累积写入吞吐量之间的灵活性，我们在收集系统自身上增加了额外的采样。一个特定 trace 中的所有 span 都共享同一个trace id，即便这些span可能横跨数千个不同的主机。<strong>对于在收集系统中的每个 span，我们将其 trace id 哈希成一个标量 z （0&lt;=z&lt;=1）。如果 z 小于我们的收集采样系数，我们就保留这个 span 并将它写入 Bigtable；否则就丢弃</strong>。在采样决策中通过依靠 trace id，我们要么采样整个 trace，要么抛弃整个 trace，而不会对 trace 中的某些span进行处理。我们发现这种额外配置参数让我们对收集管道的管理变得简单得多，因为可以很容易地调整全局写入率，仅仅修改配置文件中的一个参数即可。</p>

<p>如果整个跟踪和收集系统都是用同一个采样参数则会更简单，但是那样就无法灵活地快速调整所有部署环境中的运行时采样配置。我们选择的运行时采样率产生的数据会稍微高于我们能写入仓库的数据，而我们可以通过调整收集系统中的二级采样参数对写入速度进行限流。因为我们可以通过对二级采样配置一下就能增加或减少全局覆盖率和写入速率，所以 Dapper 管道的维护工作变得更简单了。</p>

<h2>5 通用 Dapper 工具</h2>

<p>几年前当 Dapper 还是一个原型时，在开发者的耐心支持下才能把 Dapper 用起来。从那时起，我们逐渐建立了收集组件、编程接口、以及基于 web 的用户交互界面，帮助 Dapper 用户独立地解决自己的问题。本节将总结哪些方法有用，哪些没用，并提供这些通用的分析工具的基本使用信息。</p>

<h3>5.1 Dapper Depot API</h3>

<p>Dapper Deport API 又称 DAPI，通过它可以直接访问 Dapper 区域仓库中的分布式跟踪数据。DAPI 和 Dapper 跟踪仓库是串行设计的，DAPI 意在为 Dapper 仓库中的原始数据提供一个干净而直观的接口。我们的用例推荐如下三种方式来访问跟踪数据：</p>

<p><strong>通过trace id访问（Access by trace id）：</strong>DAPI 可以根据全局唯一的 trace id 来加载任何一次跟踪。</p>

<p><strong>批量访问（Bulk access）：</strong>DAPI 可通过 MapReduce 来并行访问数亿条 Dapper 跟踪数据。用户重写一个虚拟函数，它的唯一参数接受一个 Dapper 跟踪信息，然后框架将会对用户指定时间窗口内的每一条跟踪信息调用一次该函数。</p>

<p><strong>索引访问（Indexed access）：</strong>Dapper 仓库支持一个唯一索引，可用于匹配我们通用的访问模式。该索引将通用请求的跟踪特性映射到特定的 Dapper 跟踪。因为 trace id 是伪随机创建的，所以这是快速访问某个特定服务或特定主机追踪信息的最佳方式。</p>

<p>所有这三种访问方式都将用户引导到特定的 Dapper 追踪记录。正如 2.1 节所述，Dapper 的跟踪信息是由 trace span 组成的树，所以 <code>Trace</code> 数据结构就是一个由不同 <code>Span</code> 结构组成的遍历树。Span 通常对应 RPC 调用，在这种情况下，RPC 的耗时信息是有的。通过 span 结构还可访问基于时间戳的引用标注信息。</p>

<p>选择合适的用户索引是DAPI 设计中最具挑战性的部分。索引要求的压缩存储只比实际数据本身小 26%，所以成本是巨大的。最初我们部署了两个索引：<strong>一个是主机索引，另一个是服务名索引</strong>。然而我们发现相对于存储成本来说，用户对主机索引的兴趣尚不足够。当用户对某台机器的跟踪感兴趣的时候，他们也会对特定的服务感兴趣，所以我们最终将这两个索引合并成一个组合索引，允许按服务名、主机、时间戳高效地进行查找。</p>

<h4>5.1.1 DAPI 在 Google 内部的使用</h4>

<p>Dapper 在 Google 的使用有三类：使用 DAPI 的持久在线 web 应用，可在命令行启动的维护良好的基于 DAPI 的工具，以及编写、运行、然后即被遗忘的一次性分析工具。我们知道的有3 个基于DAPI的持久性应用、8个基于DAPI的分析工具、约15~20个一次性分析工具。在这之后就很难统计这些工具了，因为开发者可以构建、运行、然后丢弃，而不需要让 Dapper 团队知道。</p>

<h3>5.2 Dapper 用户接口</h3>

<p>绝大多数情况下，人们通过基于 web 的用户交互接口来使用 Dapper。篇幅所限我们不能展示每一个特性，不过图6 列出了一个典型的用户工作流。</p>

<p><img src="http://alphawang.github.io/images/post/2019/dapper/dapper-6_workflow.png" alt="dapper-6_workflow" /></p>

<p><em>(图-6. 通用 Dapper 用户接口中的一个典型用户工作流)</em></p>

<ol>
<li>用户输入他们关心的服务名以及时间窗口，再加上任何需要来区分跟踪模式的信息（例如span名称）。同时指定与他们的搜索最相关的成本度量（例如服务响应时间）。</li>
<li>然后就会出现一个性能概要的大表格，总结了与给定服务相关的所有分布式执行模式。用户可以根据他们的需要对执行模式进行排序，并选择其中一个查看更多细节。</li>
<li>一旦选中一个分布式执行模式，用户则会看到关于这个执行模式的图形化描述。被选中的服务在图表中央被高亮显示。</li>
<li>在创建与第 1 步选中的成本度量相关的统计信息后，Dapper 用户界面会展示一个简单的频率直方图。所以在这个例子中，我们能看到选中的执行模式相关的响应时间大概是对数正态分布的。用户还会看到一个特定跟踪样例的列表，这些样例分布在直方图的不同区间。本例中，用户点击第二个跟踪样例，在 Dapper 用户界面打开跟踪详细视图。</li>
<li>绝大多数 Dapper 用户最终会检查特定的跟踪，希望收集系统行为根本原因的信息。我们没有足够的空间去做跟踪视图的审查，但我们有个全局时间线，并能交互地展开或折叠子树，这是我们的特点。分布式跟踪树的连续层用内嵌的不同颜色的矩形表示。每个 RPC span 分为服务进程处理时间（绿色）和网络消耗时间（蓝色）。用户标注没有显示在这个截图中，不过可以以 span 为基础将他们选择性地包含在全局时间线上。</li>
</ol>


<p>对于想查询实时数据的用户，Dapper 用户界面支持直接与每台生产环境服务器上的守护进程通信。在这个模式下，不能像上图那样查看系统级别的图表，不过仍然很容易地基于耗时和网络特性选择一个跟踪。在这个模式下，可在几秒内实时地查到数据。</p>

<p>根据我们的日志，每个工作日大概有 200 个 Google 工程师使用 Dapper UI；每周大约有 750 到 1000个独立用户访问。忽略掉发布新功能的因素，这个数据每个月都是一致的。用户通常会发送出特定跟踪的链接，这会不可避免地在跟踪查询中产生很多一次性的、短期的流量。</p>

<h2>6 经验</h2>

<p>Dapper 在 Google中被广泛使用，通过 Dapper 用户界面直接访问，或者通过编程 API 以及基于这些API 构建的程序访问。本节我们不打算罗列出每一种已知的 Dapper 的使用方式，而会尝试讲解 Dapper 使用的"基本向量"，阐述何种应用是最成功的。</p>

<h3>6.1 开发过程中使用 Dapper</h3>

<p>Google AdWords 系统建立在关键词定位准则和相关文字广告的大型数据库之上。当新的关键词被插入或修改时，必须对他们进行校验，以遵循服务策略条款（例如检查不恰当的语言）；这个过程使用自动审查系统来做的话会更有效率。</p>

<p>当从头开始重新设计一个广告审查服务时，团队从第一个系统原型开始，直到最终的系统维护，都使用了 Dapper。他们的服务通过 Dapper 有了以下方面的提高：</p>

<p><strong>性能（Performance）：</strong>开发人员跟踪请求延迟目标的进度，精确找到可优化的机会。Dapper 还被用来找出关键路径中的不必要请求序列（这种不必要请求通常源于不是开发者自己开发的子系统），然后促使相关团队修复这些问题。</p>

<p><strong>正确性（Correctness）：</strong>广告审查服务是围绕大型数据库系统的。系统同时具有只读副本服务器（廉价访问），以及可读写的主服务器（昂贵访问）。他们通过 Dapper 找到了好些不必要地访问主服务器而不是访问副本服务器的查询。Dapper 现在可用于解释主服务器被直接访问的原因，确保重要系统的不变式。</p>

<p><strong>理解性（Understanding）：</strong>广告审查查询跨越多种类型的系统，包括 Bigtable（即前文提到的数据库）、多维索引服务、以及许多其他 C++ 和 Java 后端服务。Dapper 跟踪用来评估总查询成本，促进对业务重新设计，使得系统依赖的负载最小。</p>

<p><strong>测试（Testing）：</strong>新代码的发布会经过一个 Dapper 跟踪的 QA 过程，验证正确的系统行为和性能。这个过程中发现了很多问题，包括广告审查代码自身的问题，及其依赖包的问题。</p>

<p>广告审查团队广泛使用了 Dapper 标注 API。Guice<sup>[13]</sup> 开源的 AOP 框架用来在重要的软件组件上标注 <code>@Traced</code>。跟踪信息进一步标注的信息有重要子程序的输入输出大小、状态消息、以及其他调试信息；否则这些信息会被发到日志文件中。</p>

<p>Dapper 在广告审查团队的应用有一些不足的地方。例如，他们想在交互时间内搜索所有的跟踪标注，然而必须运行自定义的 MapReduce 或者手工检查每个跟踪。另外，Google 内还有其他的系统对通用目的的调试日志进行收集并进行集中化，把这些系统中的海量数据和 Dapper 仓库进行整合是有价值的。</p>

<p>即便如此，总的来说广告审查团队估计通过 Dapper 跟踪平台的数据分析，他们的延迟数据已经优化了两个数量级。</p>

<h4>6.1.1 与异常监控的集成</h4>

<p>Google 维护了一个从运行进程中不断收集并集中异常报告的服务。如果这些异常发生在被采样的Dapper 跟踪中，则异常报告中会包含相关的 trace id 和 span id。然后异常监控服务前端就会在特定异常报告里提供一个链接，指向相应分布式跟踪。广告审查团队利用这个特性，来了解异常监控服务发现的那些 bug 的更大范围的上下文。Dapper 平台通过导出基于简单唯一 ID 构建的接口，相对容易地集成到其他事件监控系统中。</p>

<h3>6.2 解决长尾延迟</h3>

<p>由于移动部件的数量、代码库及部署的规模，调试一个像全文搜索（universal search）那样的服务是非常有挑战性的。这里我们描述在减轻全文搜索延迟分布的长尾效应上做的努力。Dapper 能够验证端到端延迟的假设，更具体地说，它能够<strong>验证全文搜索请求的关键路径</strong>。当系统不仅涉及多个子系统，还涉及多个开发团队时，即便我们最好最有经验的工程师也经常猜错端到端性能差的根本原因。在这种情况下，Dapper 可以提供必需的事实，可以回答许多重要的性能问题。</p>

<p>一个工程师在调试长尾延迟的过程中建立了一个小型库，可以根据 DAPI <code>Trace</code>对象推断出层次性的关键路径。这些关键路径结构可用来诊断问题、为全文搜索可预期的性能改进调整优先级。Dapper 的这项工作引出了下列发现：</p>

<ul>
<li>关键路径上短暂的网络性能退化不会影响系统吞吐量，但能对延迟异常值产生巨大影响。在图7 中，大多数全文搜索的慢跟踪都在关键路径上有网络退化。
<img src="http://alphawang.github.io/images/post/2019/dapper/dapper-7_network-lag.png" alt="dapper-7_network-lag" />
<em>(图-7. 关键路径上遇到非正常网络延迟的全文搜索跟踪，与端到端请求延迟的关系)</em></li>
<li>许多有问题的昂贵查询模式都源自服务间不经意的交互。一旦发现，他们往往很容易纠正；但是在没有 Dapper 时如何发现他们是很困难的。</li>
<li>通用查询是从 Dapper 之外的安全日志仓库中获取，并且使用 Dapper 的唯一 trace id，与Dapper 仓库做关联。这种映射随后被用于构建全文搜索每个独立子系统中的慢查询列表。</li>
</ul>


<h3>6.3 推断服务依赖</h3>

<p>在任意指定时刻，Google 的典型计算集群是成千上万个逻辑"任务"组成；一系列进程执行通用函数。Google 维护着许多这种集群，当然我们发现一个计算集群中的任务往往依赖其他集群中的任务。由于任务间的依赖是动态改变的，所以不可能仅仅从配置信息中推断出所有的服务间依赖。尽管如此，公司内部的许多进程要求知道准确的服务依赖信息，以便找出瓶颈，计划服务的迁移。Google 的"服务依赖"项目通过使用跟踪标注以及 DAPI MapReduce 接口，自动探测服务间的依赖。</p>

<p>使用 Dapper 核心性能检测以及 Dapper 的跟踪标注，服务依赖项目能够推断出任务之间的依赖关系，还能推断出这些任务所依赖的程序组件。例如，所有 Bigtable 的操作被标记上受影响的表名。通过 Dapper 平台，服务依赖团队就可以自动推断出多种服务粒度的依赖关系。</p>

<h3>6.4 不同服务的网络使用率</h3>

<p>Google 在网络结构上投入了大量的人力物力。毫无疑问，网络运维人员要关注单个硬件的监控信息、自定义工具和 dashboard，来查看全局网络使用情况的鸟瞰图。网络运维人员可以一览整个网络的健康状况，但是当出现问题时，他们却缺少工具找到网络负载问题在应用级别的罪魁祸首。</p>

<p>虽然 Dapper 并不是设计用来做链路级的监控，但我们发现它非常适合集群之间网络活动应用级别分析的任务。Google 利用 Dapper 平台得以建立不断更新的终端，来显示集群间网络流量中最活跃的那些应用级别端点。此外，通过 Dapper 我们可以找出引起昂贵网络请求的跟踪，而不是面对孤立的机器。在 Dapper API 之上建立 dashboard 花费的时间没超过两周。</p>

<h3>6.5 分层及共享的存储系统</h3>

<p>Google 的许多存储系统都由多个独立的复杂层次的分布式基础设施组成。例如，Google App Engine<sup>[5]</sup> 就是建立在一个可扩展实体存储系统之上。这个实体存储系统基于底层的 BigTable 暴露出一些 RDBMS 功能。Bigtable 则同时使用 Chubby<sup>[7]</sup>（一个分布式锁系统）及 GFS。此外，像 BigTable这类系统会作为共享服务来管理，以简化部署并更好地利用计算资源。</p>

<p>在这种分层系统中，并不总是很容易发现终端用户的资源消费模式。例如，给定 BigTable 单元对 GFS 的大量请求可能来自一个用户或者许多用户，而在 GFS 层面这两种不同的使用模式的区别是模糊的。而且，如果缺乏像 Dapper 这种工具的话，对这种共享服务的竞争同样是难以调试的。</p>

<p>5.2节展示的 Dapper 用户界面可以分组聚合共享服务横跨多个客户端的跟踪性能信息。这就使得共享服务的负责人可以容易地根据多个指标对其用户进行排名（例如根据inbound网络负载、outbound网络负载、或者服务请求的总时间）。</p>

<h3>6.6 用 Dapper 来救火</h3>

<p>Dapper 对于某些救火任务是有用的。这里的"救火"指的是对处于危险中的分布式系统进行的操作。典型情况下，Dapper 用户在进行救火时需要访问新鲜数据，并且没有时间写新的 DAPI 代码，也没时间等待周期性的报告运行。</p>

<p>对于那些正在经历高延迟的服务，或者更糟的在正常负载下都会超时的服务，Dapper 用户界面通常能把这些延迟的瓶颈隔离出来。通过与 Dapper 守护进程直接通信，可以容易地收集特定高延迟跟踪的新鲜数据。在灾难性故障时，通常没必要分析统计数据来确定根本原因，而查看示例跟踪就足够了。</p>

<p>然而，6.5 节描述的那种共享存储服务则要求当用户活动突然激增时能快速聚合信息。对于事后检验，共享服务仍然可以利用 Dapper 的聚合数据，但是除非可以在十分钟之内完成对 Dapper 数据的批量分析，否则 Dapper 对共享存储服务的救火就不会那么有用了。</p>

<h2>7 其他经验教训</h2>

<p>虽然我们在 Dapper 上的经验已经基本满足我们的预期，但是也有一些积极的方面是我们没有充分预料到的。我们对非计划中的用例数目感到高兴。除了在第6节描述的一些经验外，还包括资源核算系统，用来检查敏感服务是否遵从指定的通讯模式的工具，RPC 压缩策略的分析工具，等等。这些非计划中的用例一定程度上归功于我们通过一个简单的编程接口开放了跟踪数据存储，这就允许我们利用上这个大得多的社区的创造力。Dapper 对旧系统的支持也比预期更简单，只需要基于新版本的库重新编译即可，这个库提供通用线程、控制流和 RPC 框架。</p>

<p>Dapper 在 Google 内部的广泛使用还为我们提供了关于其局限性的宝贵反馈。下面我们将介绍一些我们已知的最重要的一些不足之处。</p>

<p><strong>合并的影响（Coalescing effects）：</strong>Dapper 模型隐式地设想不同子系统一次只会处理一个跟踪请求。在某些情况下，在对一组请求执行操作之前缓冲一些请求会更有效率（例如对磁盘写入进行合并）。在这些情况下，一个跟踪请求可以看做是一个大型工作单元(a traced request can be blamed for a deceptively large unit of work)。此外，如果多个跟踪请求被批量执行，那么只会有一个请求被 span使用，这是因为我们我们对每个跟踪只会有一个唯一 trace id（if multiple traced requests are batched together, only one of them will appear responsible for the span due to our reliance on a single unique trace id for each trace）。我们正在考虑解决方案以识别这种情况，并记录最少的信息来区别这些请求。</p>

<p><strong>跟踪批处理系统（Tracing batch workloads）：</strong>Dapper 的设计是针对在线服务系统，最初的目标是了解 Google 的用户请求引起的系统行为。然而，离线的数据密集型系统也可以从对性能的洞悉中获益，例如适合 MapReduce 模型的系统。在这种情况下，我们需要把 trace id 关联到一些其他的有意义的工作单元，例如输入数据的 key（或key范围），或是一个 MapReduce shard。</p>

<p><strong>寻找根本原因（Finding a root cause）：</strong>Dapper 可以有效地确定系统中的哪个部分正在经历速度变慢，但并不总是足够找出问题的根本原因。举个例子，一个请求变慢可能并不是因为他自己的行为，而是因为其他请求还排在他前面。程序可以利用应用级别的标注把队列大小和过载情况转播到跟踪系统。同时，如果这种情况很常见，那么在ProfileMe<sup>[11]</sup> 中提出的成对采样技术就很有用了。它对两个时间重叠的请求进行采样、并观察它们在系统中的相对延迟。</p>

<p><strong>记录内核级别的信息（Logging kernel-level information）：</strong>内核可见事件的详细信息有时对确定问题根本原因很有用。我们有一些工具能够跟踪或者描述内核的执行，但是要想将这些信息绑定到用户级别的跟踪上下文上，用通用或是不那么突兀的方式是很难的。我们正在研究一种可能的妥协方案，对用户层面上的一些内核级别活动参数做快照，将其关联到一个活动 span 上。</p>

<h2>8 相关工作</h2>

<p>在分布式系统跟踪领域，有一套完整的体系，一些系统主要关注定位到故障位置，另一些系统关注性能优化。Dapper 曾被用于故障发现，但它在发现性能问题、提升对大型复杂系统行为的理解方面更有用。</p>

<p>Dapper 与黑盒监控系统有关，就像 Project5<sup>[1]</sup>、WAP5<sup>[15] </sup>和 Sherlock<sup>[2]</sup>，黑盒监控系统不依赖于运行时库的性能测量，能够实现更高度的应用级透明。黑盒的缺点是有些不精确，并在统计推断因果路径过程中可能损耗更大。</p>

<p>对分布式系统的监控来说，显式的基于标注的中间件或应用本身的性能测量或许是更受欢迎的方式。Pip<sup>[14] </sup>和 Webmon<sup>[16] </sup>更依赖于应用级的标注，而 X-Trace<sup>[12]</sup>、Pinpoint<sup>[9] </sup>和 Magpie<sup>[3]</sup> 则侧重对库和中间件的修改。Dapper 更接近后者。Dapper 与 Pinpoint、X-Trace 以及最新版本的 Magpie 类似，使用全局 ID 将分布式系统不同部分的相关事件关联起来。同样和这些系统类似，Dapper 把性能测量隐藏在通用软件模块中，尝试避免标注应用程序。Magpie 放弃使用全局 ID，就不用处理正确传播全局 ID 带来的挑战，而是为每个应用写入<code>事件模式（event schema）</code>并显式地描述事件之间的关系。我们不清楚 schema 在实践中实现透明性到底有多有效。X-Trace 的核心标注需求比 Dapper 更有雄心，不仅在节点边界收集跟踪，还在节点内部不同软件层级间收集跟踪。而我们对于性能测量低损耗的要求迫使我们不能采用这种模式，而是朝着把一个请求连接起来完整跟踪所能做到的最小代价而努力。Dapper 跟踪仍然能通过可选的应用标注来扩展。</p>

<h2>9 总结</h2>

<p>本文介绍了 Google 生产环境下的分布式系统跟踪平台 Dapper，并汇报了我们开发和使用 Dapper 的经验。Dapper 部署在 Google 的几乎所有系统上，使得大型系统得以被跟踪而无需修改应用程序，同时没有明显的性能影响。通过 Dapper 主跟踪用户界面的受欢迎程度可以看出 Dapper 对开发团队和运维团队的实用性，本文通过一些使用场景的例子也阐明了 Dapper 的实用性，甚至有些使用场景 Dapper 的设计者都未曾预料到。</p>

<p>据我们所知，本文是第一篇汇报一个大型的生产环境下的分布式系统跟踪框架的论文。实际上我们主要的贡献源于这样一个事实：我们汇报回顾的系统已经被使用超过两年了。我们发现，决定结合最小化应用透明的跟踪功能以及对程序员提供简单的 API 来增强跟踪是非常值得的。</p>

<p>我们相信，Dapper 比之前基于标注的分布式跟踪系统达到了更高的应用级透明性，只需要很少的人工干预。虽然这也归功于我们计算部署的一定程度上的同质性，但仍然是一个重大的挑战。最重要的是，我们的设计提出了一些实现应用级透明的充分条件，我们希望能够对更异质的环境下的解决方案有所帮助。</p>

<p>最后，通过把 Dapper 跟踪仓库开放给内部开发者，促使了更多分析工具的产生，而仅仅由 Dapper 团队封闭地独自开发肯定产生不了这么多工具，这大大提高了设计和实现的成就。</p>

<h2>Acknowledgments</h2>

<p>We thank Mahesh Palekar, Cliff Biffle, Thomas Kotzmann, Kevin Gibbs, Yonatan Zunger, Michael Kleber, and Toby Smith for their experimental data and feedback about Dapper experiences. We also thank Silvius Rus for his assistance with load testing. Most importantly, though, we thank the outstanding team of engineers who have continued to develop and improve Dapper over the years; in order of appearance, Sharon Perl, Dick Sites, Rob von Behren, Tony DeWitt, Don Pazel, Ofer Zajicek, Anthony Zana, Hyang-Ah Kim, Joshua MacDonald, Dan Sturman, Glenn Willen, Alex Kehlenbeck, Brian McBarron, Michael Kleber, Chris Povirk, Bradley White, Toby Smith, Todd Derr, Michael De Rosa, and Athicha Muthitacharoen. They have all done a tremendous amount of work to make Dapper a day-to-day reality at Google.</p>

<h2>References</h2>

<p>[1]  M. K. Aguilera, J. C. Mogul, J. L. Wiener, P. Reynolds, and A. Muthitacharoen. Performance Debugging for Dis- tributed Systems of Black Boxes. In <em>Proceedings of the 19th ACM Symposium on Operating Systems Principles</em>, December 2003.</p>

<p>[2]  P. Bahl, R. Chandra, A. Greenberg, S. Kandula, D. A. Maltz, and M. Zhang. Towards Highly Reliable Enter- prise Network Services Via Inference of Multi-level De- pendencies. In <em>Proceedings of SIGCOMM</em>, 2007.</p>

<p>[3]  P.Barham,R.Isaacs,R.Mortier,andD.Narayanan.Mag- pie: online modelling and performance-aware systems. In <em>Proceedings of USENIX HotOS IX</em>, 2003.</p>

<p>[4]  L. A. Barroso, J. Dean, and U. Ho ̈lzle. Web Search for a Planet: The Google Cluster Architecture. <em>IEEE Micro</em>, 23(2):22–28, March/April 2003.</p>

<p>[5]  T. O. G. Blog. Developers, start your engines. <a href="http://googleblog.blogspot.com/2008/04/developers-">http://googleblog.blogspot.com/2008/04/developers-</a> start-your-engines.html, 2007.</p>

<p>[6]  T. O. G. Blog. Universal search: The best answer is still the best answer. <a href="http://googleblog.blogspot.com/2007/05/universal-">http://googleblog.blogspot.com/2007/05/universal-</a> search-best-answer-is-still.html, 2007.</p>

<p>[7]  M. Burrows. The Chubby lock service for loosely- coupled distributed systems. In <em>Proceedings of the 7th USENIX Symposium on Operating Systems Design and Implementation</em>, pages 335 – 350, 2006.</p>

<p>[8]  F. Chang, J. Dean, S. Ghemawat, W. C. Hsieh, D. A. Wal- lach, M. Burrows, T. Chandra, A. Fikes, and R. E. Gru- ber. Bigtable: A Distributed Storage System for Struc- tured Data. In <em>Proceedings of the 7th USENIX Sympo- sium on Operating Systems Design and Implementation (OSDI’06)</em>, November 2006.</p>

<p>[9]  M. Y. Chen, E. Kiciman, E. Fratkin, A. fox, and E. Brewer. Pinpoint: Problem Determination in Large, Dynamic Internet Services. In <em>Proceedings of ACM In- ternational Conference on Dependable Systems and Net- works</em>, 2002.</p>

<p>[10]  J. Dean and S. Ghemawat. MapReduce: Simplified Data Processing on Large Clusters. In <em>Proceedings of the 6th USENIX Symposium on Operating Systems Design and Implementation (OSDI’04)</em>, pages 137 – 150, December 2004.</p>

<p>[11]  J. Dean, J. E. Hicks, C. A. Waldspurger, W. E. Weihl, and G. Chrysos. ProfileMe: Hardware Support for Instruction-Level Profiling on Out-of-Order Processors. In <em>Proceedings of the IEEE/ACM International Sympo- sium on Microarchitecture</em>, 1997.</p>

<p>[12]  R. Fonseca, G. Porter, R. H. Katz, S. Shenker, and I. Sto- ica. X-Trace: A Pervasive Network Tracing Framework. In <em>Proceedings of USENIX NSDI</em>, 2007.</p>

<p>[13]  B. Lee and K. Bourrillion. The Guice Project Home Page. <a href="http://code.google.com/p/google-guice/,">http://code.google.com/p/google-guice/,</a> 2007.</p>

<p>[14]  P. Reynolds, C. Killian, J. L. Wiener, J. C. Mogul, M. A. Shah, and A. Vahdat. Pip: Detecting the Unexpected in Distributed Systems. In <em>Proceedings of USENIX NSDI</em>, 2006.</p>

<p>[15]  P. Reynolds, J. L. Wiener, J. C. Mogul, M. K. Aguilera, and A. Vahdat. WAP5: Black Box Performance Debug- ging for Wide-Area Systems. In <em>Proceedings of the 15th International World Wide Web Conference</em>, 2006.</p>

<p>[16]  P. K. G. T. Gschwind, K. Eshghi and K. Wurster. Web- Mon: A Performance Profiler for Web Transactions. In <em>E-Commerce Workshop</em>, 2002.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JMM: Java Runtime Data Area]]></title>
    <link href="http://alphawang.github.io/blog/jmm-runtime-data-area/"/>
    <updated>2018-06-03T14:00:40+08:00</updated>
    <id>http://alphawang.github.io/blog/jmm-runtime-data-area</id>
    <content type="html"><![CDATA[<p>下图展示了JVM的主要结构：
<img src="http://alphawang.github.io/images/post/2018/jmm/runtime-data-area.png" alt="user icon" /></p>

<p>可以看出，JVM主要由以下几部分组成：
- 类加载器子系统
- 运行时数据区（内存空间）
- 执行引擎
- 本地方法接口</p>

<p>运行时数据区又分为：
1. 程序计数器
2. Java栈
3. 本地方法栈
4. 方法区
5. 堆</p>

<!--more-->


<p>其中 方法区 和 堆 是所有Java线程共享的，而Java栈、本地方法栈、PC寄存器则由每个线程私有。</p>

<h2>1. 程序计数器（Program Counter Register）</h2>

<p>程序计数器可以看做是当前线程所执行的字节码的行号指示器。
字节码解释器工作时，通过改变这个计数器的值来选取下一条需要执行的字节码指令。</p>

<p>线程私有：
- 为了线程切换后能够恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器。</p>

<p>OOM：
- 不会出现OOM。</p>

<h2>2. Java栈（Java Stack）</h2>

<p>Java栈描述的是Java方法执行的内存模型。
Java栈由栈帧组成，一个帧对应一个方法调用。调用方法时压入栈帧，方法返回时弹出栈帧并抛弃。
Java栈的主要任务是存储方法参数、局部变量、中间运算结果，并且提供部分其它模块工作需要的数据。</p>

<p>线程私有：
- 前面已经提到Java栈是线程私有的，这就保证了线程安全性，使得程序员无需考虑栈同步访问的问题，只有线程本身可以访问它自己的局部变量区。</p>

<p>OOM:
- 如果线程请求的栈深度大于JVM所允许的深度，则抛出StackOverflowError。
- 如果VM可以动态扩展，但是扩展是无法申请到足够的内存，则抛出OutOfMemoryError。
- 可以通过减少-Xss，同时递归调用某个方法，模拟StackOverflowError</p>

<p>它分为三部分：局部变量区、操作数栈、帧数据区。</p>

<h4>1、局部变量区</h4>

<p>局部变量区是以字长为单位的数组，在这里，byte、short、char类型会被转换成int类型存储，除了long和 double类型占两个字长以外，其余类型都只占用一个字长。特别地，boolean类型在编译时会被转换成int或byte类型，boolean数组会被当做byte类型数组来处理。局部变量区也会包含对象的引用，包括类引用、接口引用以及数组引用。
局部变量区包含了 方法参数 和 局部变量，此外，实例方法隐含第一个局部变量this，它指向调用该方法的对象引用。对于对象，局部变量区中永远只有指向堆的引用。</p>

<h4>2、操作数栈</h4>

<p>操作数栈也是以字长为单位的数组，但是正如其名，它只能进行入栈出栈的基本操作。在进行计算时，操作数被弹出栈，计算完毕后再入栈。</p>

<h4>3、帧数据区</h4>

<p>帧数据区的任务主要有：
记录指向类的常量池的指针，以便于解析。
帮助方法的正常返回，包括恢复调用该方法的栈帧，设置PC寄存器指向调用方法对应的下一条指令，把返回值压入调用栈帧的操作数栈中。
记录异常表，发生异常时将控制权交由对应异常的catch子句，如果没有找到对应的catch子句，会恢复调用方法的栈帧并重新抛出异常。</p>

<p>局部变量区和操作数栈的大小依照具体方法在编译时就已经确定。调用方法时会从方法区中找到对应类的类型信息，从中得到具体方法的局部变量区和操作数栈的大小，依此分配栈帧内存，压入Java栈。</p>

<h2>3. 本地方法栈（Native Method Stack）</h2>

<p>本地方法栈类似于Java栈，主要存储了本地方法调用的状态。
在Sun JDK中，本地方法栈和Java栈是同一个。</p>

<p>线程私有：
- 同上</p>

<p>OOM：
- 同上</p>

<h2>4. 方法区（Method Area）</h2>

<p>存储 <strong>类型信息</strong> 和 <strong>类的静态变量</strong>。
在Sun JDK中，方法区对应了永久代（Permanent Generation），默认最小值为16MB，最大值为64MB。</p>

<p>方法区中对于每个类存储了以下数据：
- 类及其父类的全限定名（java.lang.Object没有父类）
- 类的类型（Class or Interface）
- 访问修饰符（public, abstract, final）
- 实现的接口的全限定名的列表
- 常量池
- 字段信息
- 方法信息
- 静态变量
- ClassLoader引用
- Class引用</p>

<p>可见类的所有信息都存储在方法区中。</p>

<p>线程共享：
- 由于方法区是所有线程共享的，所以必须保证线程安全，举例来说，如果两个类同时要加载一个尚未被加载的类，那么一个类会请求它的ClassLoader去加载需要的类，另一个类只能等待而不会重复加载。</p>

<p>OOM：
- 当方法区无法满足内存分配需求时，将抛出OutOfMemoryError。
——OSGi这种频繁自定义ClassLoader的场景，需要虚拟机剧本类卸载功能，以保证永久代不会溢出。
- 通过限制永久代大小-XX:PermSize, -XX:MaxPermSize；同时大量添加常量池；或借助CGLib生成大量动态类，可以模拟OutOfMemoryError。
——注：运行时添加常量池可用list.add(String.valueOf(i++).intern()) //Jdk7以下</p>

<h2>5. 堆（Heap）</h2>

<p>堆用于存储 <strong>对象实例</strong> 以及 <strong>数组</strong>。
堆中有指向类数据的指针，该指针指向了方法区中对应的类型信息。堆中还可能存放了指向方法表的指针。</p>

<p>线程共享：
- 堆是所有线程共享的，所以在进行实例化对象等操作时，需要解决同步问题。
- 此外，堆中的实例数据中还包含了对象锁，并且针对不同的垃圾收集策略，可能存放了引用计数或清扫标记等数据。</p>

<p>OOM：
- Java堆是垃圾收集器管理的主要区域。
- 如果堆中没有内存完成实例分配，并且堆也无法再扩展时，则抛出OutOfMemoryError。
- 可以通过减少-Xms, -Xmx；同时创建无数对象来模拟OutOfMemoryError。
- 同时-XX:+HeapDumpOnOutOfMemoryError，可以dump出当前的内存堆转储快照，以便分析。</p>

<p>在堆的管理上，Sun JDK从1.2版本开始引入了分代管理的方式。主要分为新生代、旧生代。分代方式大大改善了垃圾收集的效率。</p>

<h4>1、新生代（New Generation）</h4>

<p>大多数情况下新对象都被分配在新生代中，新生代由Eden Space和两块相同大小的Survivor Space组成，后两者主要用于Minor GC时的对象复制（Minor GC的过程在此不详细讨论）。
JVM在Eden Space中会开辟一小块独立的TLAB（Thread Local Allocation Buffer）区域用于更高效的内存分配，我们知道在堆上分配内存需要锁定整个堆，而在TLAB上则不需要，JVM在分配对象时会尽量在TLAB上分配，以提高效率。</p>

<h4>2、旧生代（Old Generation/Tenuring Generation）</h4>

<p>在新生代中存活时间较久的对象将会被转入旧生代，旧生代进行垃圾收集的频率没有新生代高。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Guava: 2. Collections]]></title>
    <link href="http://alphawang.github.io/blog/google-guava-collections/"/>
    <updated>2015-03-24T14:00:40+08:00</updated>
    <id>http://alphawang.github.io/blog/google-guava-collections</id>
    <content type="html"><![CDATA[<blockquote><p>Please ref to the demo code: <code>git clone https://github.com/AlphaWang/guava-demo.git</code></p></blockquote>

<p>The Guava library has its history rooted in working with collections, starting out as <code>google-collections</code>. The Google Collections Library has long since been abandoned, and all the functionality from the original library has been merged into Guava.</p>

<!--more-->


<h2>Create</h2>

<blockquote><p>com.alphawang.guava.ch2.collection.Test1_Create</p></blockquote>

<h3>Create List/Set</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="c1">// Before</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;(</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'>    <span class="n">list1</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;A&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">list1</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;B&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// After</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list2</span> <span class="o">=</span> <span class="n">Lists</span><span class="o">.</span><span class="na">newArrayList</span><span class="o">();</span> <span class="c1">//Lists.newArrayListWithCapacity(2)</span>
</span><span class='line'>    <span class="n">list2</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;A&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">list2</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;B&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Lists.newArrayList()</li>
<li>Lists.newArrayList(E&hellip;)</li>
<li>Lists.newArrayList(java.lang.Iterable&lt;? extends E>)</li>
<li>Lists.newArrayListWithCapacity</li>
<li>Lists.newArrayListWithExpectedSize()</li>
<li>Lists.newLinkedList()</li>
<li>Sets.newHashSet()</li>
<li>Sets.newTreeSet()</li>
</ul>


<h3>Create Map</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="c1">// Before</span>
</span><span class='line'>    <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">map1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// After</span>
</span><span class='line'>    <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">map2</span> <span class="o">=</span> <span class="n">Maps</span><span class="o">.</span><span class="na">newHashMapWithExpectedSize</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>  <span class="c1">// Maps.newHashMap();</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Maps.newHashMap()</li>
<li>Maps.newHashMapWithExpectedSize()</li>
<li>Maps.newLinkedHashMap()</li>
<li>Maps.newTreeMap()</li>
</ul>


<h3>Immutable Collections</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="c1">// Before</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'>    <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;A&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;B&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list1</span> <span class="o">=</span> <span class="n">Collections</span><span class="o">.</span><span class="na">unmodifiableList</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// After</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list2</span> <span class="o">=</span> <span class="n">ImmutableList</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&quot;A&quot;</span><span class="o">,</span> <span class="s">&quot;B&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="c1">// Before</span>
</span><span class='line'>    <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'>    <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;A&quot;</span><span class="o">,</span> <span class="s">&quot;1&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;B&quot;</span><span class="o">,</span> <span class="s">&quot;2&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">map1</span> <span class="o">=</span> <span class="n">Collections</span><span class="o">.</span><span class="na">unmodifiableMap</span><span class="o">(</span><span class="n">map</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// After</span>
</span><span class='line'>    <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">map2</span> <span class="o">=</span> <span class="n">ImmutableMap</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&quot;A&quot;</span><span class="o">,</span> <span class="s">&quot;1&quot;</span><span class="o">,</span> <span class="s">&quot;B&quot;</span><span class="o">,</span> <span class="s">&quot;2&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>ImmutableList.of()</li>
<li>ImmutableList.copyOf(java.lang.Iterable&lt;? extends E>)</li>
<li>ImmutableMap.of()</li>
<li>ImmutableMap.copyOf(Map&lt;? extends K, ? extends V> map)</li>
</ul>


<p>Immutable objects have many advantages, including:</p>

<ol>
<li>Safe for use by untrusted libraries.</li>
<li>Thread-safe: can be used by many threads with no risk of race conditions.</li>
<li>Doesn&rsquo;t need to support mutation, and can make time and space savings with that assumption. All immutable collection implementations are more memory-efficient than their mutable siblings.</li>
<li>Can be used as a constant, with the expectation that it will remain fixed.</li>
</ol>


<h2>Transform and Filter</h2>

<blockquote><p>com.alphawang.guava.ch2.collection.Test2_Transform
com.alphawang.guava.ch2.collection.Test3_Filter</p></blockquote>

<p>Transform List:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Lists.transform</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">transformList</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// before:</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">cityNamesBefore</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">City</span> <span class="n">city</span> <span class="o">:</span> <span class="n">cities</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;-- normal transform: &quot;</span> <span class="o">+</span> <span class="n">city</span><span class="o">);</span>
</span><span class='line'>        <span class="n">cityNamesBefore</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">city</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// or Iterables.transform()</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">cityNames</span> <span class="o">=</span> <span class="n">Lists</span><span class="o">.</span><span class="na">transform</span><span class="o">(</span><span class="n">cities</span><span class="o">,</span> <span class="k">new</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">City</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">String</span> <span class="nf">apply</span><span class="o">(</span><span class="n">City</span> <span class="n">input</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;-- guava transform: &quot;</span> <span class="o">+</span> <span class="n">input</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">input</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Assert</span><span class="o">.</span><span class="na">assertTrue</span><span class="o">(</span><span class="n">cityNames</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">4</span><span class="o">);</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">cityNames</span><span class="o">);</span>   <span class="c1">// lazy</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * FluentIterable.transform</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">transformFluent</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">cityNameLength</span> <span class="o">=</span> <span class="n">FluentIterable</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">cities</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">transform</span><span class="o">(</span><span class="n">cityNameFunction</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">transform</span><span class="o">(</span><span class="n">stringLengthFunction</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">toList</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">cityNameLength</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Assert</span><span class="o">.</span><span class="na">assertTrue</span><span class="o">(</span><span class="n">cityNameLength</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">4</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Functions.compose</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">functions</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">cityNameLength</span> <span class="o">=</span> <span class="n">Lists</span><span class="o">.</span><span class="na">transform</span><span class="o">(</span><span class="n">cities</span><span class="o">,</span> <span class="n">Functions</span><span class="o">.</span><span class="na">compose</span><span class="o">(</span><span class="n">stringLengthFunction</span><span class="o">,</span> <span class="n">cityNameFunction</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">cityNameLength</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Assert</span><span class="o">.</span><span class="na">assertTrue</span><span class="o">(</span><span class="n">cityNameLength</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">4</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Transform Map:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">transformMapEntry</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Map</span><span class="o">&lt;</span><span class="n">City</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="n">Maps</span><span class="o">.</span><span class="na">transformEntries</span><span class="o">(</span><span class="n">cityLocaleMap</span><span class="o">,</span> <span class="k">new</span> <span class="n">Maps</span><span class="o">.</span><span class="na">EntryTransformer</span><span class="o">&lt;</span><span class="n">City</span><span class="o">,</span> <span class="n">VitaminLocale</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">String</span> <span class="nf">transformEntry</span><span class="o">(</span><span class="n">City</span> <span class="n">key</span><span class="o">,</span> <span class="n">VitaminLocale</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">key</span><span class="o">.</span><span class="na">getPopulation</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;|&quot;</span> <span class="o">+</span> <span class="n">value</span><span class="o">.</span><span class="na">getKoreaTitle</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">map</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Assert</span><span class="o">.</span><span class="na">assertTrue</span><span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="n">cityLocaleMap</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">transformMapValue</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Map</span><span class="o">&lt;</span><span class="n">City</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="n">Maps</span><span class="o">.</span><span class="na">transformValues</span><span class="o">(</span><span class="n">cityLocaleMap</span><span class="o">,</span> <span class="k">new</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">VitaminLocale</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">String</span> <span class="nf">apply</span><span class="o">(</span><span class="n">VitaminLocale</span> <span class="n">input</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">input</span><span class="o">.</span><span class="na">getEnglishTitle</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">map</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Assert</span><span class="o">.</span><span class="na">assertTrue</span><span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="n">cityLocaleMap</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Filter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> *  Iterables.filter()</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">iterablesFilter</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">City</span><span class="o">&gt;</span> <span class="n">largeCities</span> <span class="o">=</span> <span class="n">Iterables</span><span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">cities</span><span class="o">,</span> <span class="k">new</span> <span class="n">Predicate</span><span class="o">&lt;</span><span class="n">City</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">apply</span><span class="o">(</span><span class="n">City</span> <span class="n">input</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">input</span><span class="o">.</span><span class="na">getPopulation</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">1000L</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">largeCities</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Assert</span><span class="o">.</span><span class="na">assertTrue</span><span class="o">(</span><span class="n">Iterables</span><span class="o">.</span><span class="na">size</span><span class="o">(</span><span class="n">largeCities</span><span class="o">)</span> <span class="o">==</span> <span class="mi">2</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * FluentIterable.filter()</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">fluentIterableFilter</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">City</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">FluentIterable</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">cities</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">populationPredicate</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">namePredicate</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">toList</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Assert</span><span class="o">.</span><span class="na">assertTrue</span><span class="o">(</span><span class="n">result</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Predicates.and()</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">predicates</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">City</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">Iterables</span><span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">cities</span><span class="o">,</span> <span class="n">Predicates</span><span class="o">.</span><span class="na">and</span><span class="o">(</span><span class="n">populationPredicate</span><span class="o">,</span> <span class="n">namePredicate</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Assert</span><span class="o">.</span><span class="na">assertTrue</span><span class="o">(!</span><span class="n">Iterables</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">result</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">filterMap</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">City</span><span class="o">&gt;</span> <span class="n">nameCityMap</span> <span class="o">=</span> <span class="n">Maps</span><span class="o">.</span><span class="na">uniqueIndex</span><span class="o">(</span><span class="n">cities</span><span class="o">,</span> <span class="k">new</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">City</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">String</span> <span class="nf">apply</span><span class="o">(</span><span class="n">City</span> <span class="n">input</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">input</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">nameCityMap</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">City</span><span class="o">&gt;</span> <span class="n">filteredMap</span> <span class="o">=</span> <span class="n">Maps</span><span class="o">.</span><span class="na">filterEntries</span><span class="o">(</span><span class="n">nameCityMap</span><span class="o">,</span> <span class="k">new</span> <span class="n">Predicate</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">City</span><span class="o">&gt;&gt;()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">City</span><span class="o">&gt;</span> <span class="n">input</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">input</span><span class="o">.</span><span class="na">getKey</span><span class="o">().</span><span class="na">startsWith</span><span class="o">(</span><span class="s">&quot;S&quot;</span><span class="o">)</span>
</span><span class='line'>                <span class="o">&amp;&amp;</span> <span class="n">input</span><span class="o">.</span><span class="na">getValue</span><span class="o">().</span><span class="na">getPopulation</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">1000L</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Assert</span><span class="o">.</span><span class="na">assertTrue</span><span class="o">(</span><span class="n">filteredMap</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Convert between List and Map</h2>

<blockquote><p>com.alphawang.guava.ch2.collection.Test4_Convert</p></blockquote>

<h3>List to Map</h3>

<ol>
<li><code>Maps.uniqueIndex</code> method uses Function to generate keys from the given values.</li>
<li><code>Maps.asMap</code> method takes a set of objects to be used as keys, and Function is applied to each key object to generate the value for entry into a map instance.</li>
<li><code>Maps.toMap</code> returns ImmutableMap.</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Function</span><span class="o">&lt;</span><span class="n">City</span><span class="o">,</span> <span class="n">Long</span><span class="o">&gt;</span> <span class="n">cityToIdFunction</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">City</span><span class="o">,</span> <span class="n">Long</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">Long</span> <span class="nf">apply</span><span class="o">(</span><span class="n">City</span> <span class="n">input</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">input</span><span class="o">.</span><span class="na">getId</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">listToMapAsValue</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Map</span><span class="o">&lt;</span><span class="n">Long</span><span class="o">,</span> <span class="n">City</span><span class="o">&gt;</span> <span class="n">idCityMap</span> <span class="o">=</span> <span class="n">Maps</span><span class="o">.</span><span class="na">uniqueIndex</span><span class="o">(</span><span class="n">cities</span><span class="o">,</span> <span class="n">cityToIdFunction</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">listToMapAsKey</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Map</span><span class="o">&lt;</span><span class="n">City</span><span class="o">,</span> <span class="n">Long</span><span class="o">&gt;</span> <span class="n">cityIdMap</span> <span class="o">=</span> <span class="n">Maps</span><span class="o">.</span><span class="na">toMap</span><span class="o">(</span><span class="n">cities</span><span class="o">,</span> <span class="n">cityToIdFunction</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">// or</span>
</span><span class='line'>    <span class="n">cityIdMap</span> <span class="o">=</span> <span class="n">FluentIterable</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">cities</span><span class="o">).</span><span class="na">toMap</span><span class="o">(</span><span class="n">cityToIdFunction</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Map to List</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">mapToList</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Map</span><span class="o">&lt;</span><span class="n">City</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">cityCommentMap</span> <span class="o">=</span> <span class="n">ImmutableMap</span><span class="o">.</span><span class="na">of</span><span class="o">(</span>
</span><span class='line'>        <span class="k">new</span> <span class="nf">City</span><span class="o">(</span><span class="mi">1L</span><span class="o">,</span> <span class="s">&quot;Shanghai&quot;</span><span class="o">,</span> <span class="mi">1360L</span><span class="o">),</span> <span class="s">&quot;big&quot;</span><span class="o">,</span>
</span><span class='line'>        <span class="k">new</span> <span class="nf">City</span><span class="o">(</span><span class="mi">2L</span><span class="o">,</span> <span class="s">&quot;Beijing&quot;</span><span class="o">,</span> <span class="mi">1020L</span><span class="o">),</span> <span class="s">&quot;dirty&quot;</span>
</span><span class='line'>    <span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">cityComments</span> <span class="o">=</span> <span class="n">FluentIterable</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">cityCommentMap</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span>
</span><span class='line'>        <span class="o">.</span><span class="na">transform</span><span class="o">(</span><span class="k">new</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">City</span><span class="o">,</span><span class="n">String</span><span class="o">&gt;,</span> <span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="n">String</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">City</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">input</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">input</span><span class="o">.</span><span class="na">getKey</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; IS &quot;</span> <span class="o">+</span> <span class="n">input</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}).</span><span class="na">toList</span><span class="o">();</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;\nmapToList:\n&quot;</span> <span class="o">+</span> <span class="n">cityComments</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Utils</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Iterables</span><span class="o">.</span><span class="na">getOnlyElement</span><span class="o">()</span>
</span><span class='line'><span class="n">Iterables</span><span class="o">.</span><span class="na">concat</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">Sets</span><span class="o">.</span><span class="na">unin</span><span class="o">()</span>
</span><span class='line'><span class="n">Sets</span><span class="o">.</span><span class="na">difference</span><span class="o">()</span>
</span><span class='line'><span class="n">Sets</span><span class="o">.</span><span class="na">intersection</span><span class="o">()</span>
</span><span class='line'><span class="n">Lists</span><span class="o">.</span><span class="na">partition</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Reference</h2>

<ul>
<li>Guava User Guide : <a href="https://code.google.com/p/guava-libraries/wiki/GuavaExplained">https://code.google.com/p/guava-libraries/wiki/GuavaExplained</a></li>
<li>Getting Started with Google Guava : <a href="http://pan.baidu.com/s/1o6LZJf0">http://pan.baidu.com/s/1o6LZJf0</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Guava: 1. Dealing With Null]]></title>
    <link href="http://alphawang.github.io/blog/google-guava-dealing-with-null/"/>
    <updated>2015-03-23T14:00:40+08:00</updated>
    <id>http://alphawang.github.io/blog/google-guava-dealing-with-null</id>
    <content type="html"><![CDATA[<blockquote><p>Please ref to the demo code: <code>git clone https://github.com/AlphaWang/guava-demo.git</code></p></blockquote>

<p>Many of Guava&rsquo;s utilities are designed to fail fast in the presence of null rather than allow nulls to be used.</p>

<blockquote><p>com.alphawang.guava.ch1.optional.Test1_FailFast</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="c1">// Lists.newArrayList()</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="nf">newArrayList</span><span class="o">(</span><span class="n">E</span><span class="o">...</span> <span class="n">elements</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">checkNotNull</span><span class="o">(</span><span class="n">elements</span><span class="o">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">capacity</span> <span class="o">=</span> <span class="n">computeArrayListCapacity</span><span class="o">(</span><span class="n">elements</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'>    <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;(</span><span class="n">capacity</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Collections</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">list</span><span class="o">,</span> <span class="n">elements</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">list</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Additionally, Guava provides a number of facilities both to make using <code>null</code> easier, when you must, and to help you avoid using <code>null</code>.</p>

<!--more-->


<h2>Null object pattern</h2>

<p>see <a href="http://www.tutorialspoint.com/design_pattern/null_object_pattern.htm">http://www.tutorialspoint.com/design_pattern/null_object_pattern.htm</a></p>

<ul>
<li>Consider if there is a natural &ldquo;null object&rdquo; that can be used.</li>
</ul>


<p>If it&rsquo;s an enum, add a constant to mean whatever you&rsquo;re expecting null to mean here.</p>

<p>example 1, <code>java.math.RoundingMode</code> has an <code>UNNECESSARY</code> value to indicate &ldquo;do no rounding, and throw an exception if rounding would be necessary.&rdquo;</p>

<p>example 2: use Unit.NONE instead of <code>null</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">enum</span> <span class="n">Unit</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">NONE</span><span class="o">(</span><span class="s">&quot;없음&quot;</span><span class="o">,</span> <span class="s">&quot;1&quot;</span><span class="o">),</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// 길이(cm)</span>
</span><span class='line'>   <span class="n">MM</span><span class="o">(</span><span class="s">&quot;mm&quot;</span><span class="o">,</span> <span class="s">&quot;0.1&quot;</span><span class="o">),</span>
</span><span class='line'>   <span class="n">CM</span><span class="o">(</span><span class="s">&quot;cm&quot;</span><span class="o">,</span> <span class="s">&quot;1&quot;</span><span class="o">),</span>
</span><span class='line'>   <span class="n">M</span><span class="o">(</span><span class="s">&quot;m&quot;</span><span class="o">,</span> <span class="s">&quot;100&quot;</span><span class="o">),</span>
</span><span class='line'>   <span class="n">KM</span><span class="o">(</span><span class="s">&quot;km&quot;</span><span class="o">,</span> <span class="s">&quot;100000&quot;</span><span class="o">),</span> <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Never return null.</li>
</ul>


<p>For example, return a empty list instead of null.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//BEFORE</span>
</span><span class='line'><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">getNames</span><span class="o">(</span><span class="n">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">id</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">service</span><span class="o">.</span><span class="na">getNames</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//AFTER</span>
</span><span class='line'><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">getNames</span><span class="o">(</span><span class="n">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">id</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">service</span><span class="o">.</span><span class="na">getNames</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">Collections</span><span class="o">.</span><span class="na">EMPTY_LIST</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Optional</h2>

<blockquote><p>com.alphawang.guava.ch1.optional.Test2_Optional</p></blockquote>

<p><code>Optional&lt;T&gt;</code> is a way of replacing a nullable T reference with a non-null value.</p>

<p>Besides the increase in readability that comes from giving <code>null</code> a <em>name</em>, the biggest advantage of Optional is its idiot-proof-ness. <strong>It forces you to actively think about the absent case if you want your program to compile at all, since you have to actively unwrap the Optional and address that case</strong>.</p>

<p>there are two main use cases of <code>Optional</code>.</p>

<ul>
<li>remind your client that the returned value can be null, can force he to check null case:
api:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="nf">api</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Optional</span><span class="o">.</span><span class="na">fromNullable</span><span class="o">(</span><span class="n">nullableObj</span><span class="o">);</span> <span class="c1">// return Optional instead of nullableObj</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>client:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Optional</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">optional</span> <span class="o">=</span> <span class="n">api</span><span class="o">();</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">optional</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span> <span class="o">{</span> <span class="c1">// force null-check</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>return a default value if the object is null:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Object</span> <span class="n">obj</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">fromNullable</span><span class="o">(</span><span class="n">nullableObj</span><span class="o">).</span><span class="na">or</span><span class="o">(</span><span class="n">defaultObj</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Enums</h2>

<p><code>Enums#getIfPresent</code> can help to get an Optional<Enum> from a enum value.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="c1">// BEFORE</span>
</span><span class='line'>    <span class="n">VitaminLocale</span> <span class="n">vitaminLocale</span> <span class="o">=</span> <span class="n">VitaminLocale</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="s">&quot;ko_KR&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">vitaminLocale</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// AFTER</span>
</span><span class='line'>    <span class="n">Optional</span><span class="o">&lt;</span><span class="n">VitaminLocale</span><span class="o">&gt;</span> <span class="n">locale</span> <span class="o">=</span> <span class="n">Enums</span><span class="o">.</span><span class="na">getIfPresent</span><span class="o">(</span><span class="n">VitaminLocale</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="s">&quot;ko_KR&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">locale</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">locale</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Objects</h2>

<blockquote><p>com.alphawang.guava.ch1.optional.Test3_Objects</p></blockquote>

<p><code>MoreObjects.firstNonNull</code> is an alternative of <code>Optional.or</code>, both can return a default value if the object is null.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">MoreObjects</span><span class="o">.</span><span class="na">firstNonNull</span><span class="o">(</span><span class="n">cityService</span><span class="o">.</span><span class="na">getNullableCity</span><span class="o">(</span><span class="mi">1L</span><span class="o">),</span> <span class="n">defaultCity</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Preconditions</h2>

<blockquote><p>com.alphawang.guava.ch1.optional.Test4_Preconditions</p></blockquote>

<p>Of course we can fail fast in the presence of null, just like guava code. Guava provides <code>Preconditions.checkArgument</code> and <code>Preconditions.checkNotNull</code> to do this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">City</span> <span class="nf">save</span><span class="o">(</span><span class="n">City</span> <span class="n">city</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Preconditions</span><span class="o">.</span><span class="na">checkArgument</span><span class="o">(</span><span class="n">city</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">,</span> <span class="s">&quot;IllegalArgumentException: city is null&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">// or</span>
</span><span class='line'>    <span class="n">city</span> <span class="o">=</span> <span class="n">Preconditions</span><span class="o">.</span><span class="na">checkNotNull</span><span class="o">(</span><span class="n">city</span><span class="o">,</span> <span class="s">&quot;NullPointerException: city is null&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">cityRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">city</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Reference</h2>

<ul>
<li>Guava User Guide : <a href="https://code.google.com/p/guava-libraries/wiki/GuavaExplained">https://code.google.com/p/guava-libraries/wiki/GuavaExplained</a></li>
<li>Getting Started with Google Guava : <a href="http://pan.baidu.com/s/1o6LZJf0">http://pan.baidu.com/s/1o6LZJf0</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Key Solr Concepts]]></title>
    <link href="http://alphawang.github.io/blog/key-solr-concepts/"/>
    <updated>2015-01-20T16:00:40+08:00</updated>
    <id>http://alphawang.github.io/blog/key-solr-concepts</id>
    <content type="html"><![CDATA[<blockquote><p>本文是《Solr In Action》读书笔记，包含第3章</p></blockquote>

<!--more-->


<h1>Chpater 03. Key Solr Concepts</h1>

<h2>Basic</h2>

<ul>
<li><code>Document</code>:</li>
</ul>


<p>A document is a collection of fields that map to particular field types defined in a schema.</p>

<blockquote><p>Solr is a document storage and retrieval engine. Every piece of data submitted to Solr for processing is a document.</p></blockquote>

<ul>
<li><code>Inverted index</code>:</li>
</ul>


<p>Maps each word/term in the corpus to all of the documents in which it appears.</p>

<blockquote><p>determin textually similar words, understand synonyms, remove unimportant words, score each result&hellip; Solr accomplishes all of this by using an index that maps content to documents instead of mapping documents to content as in a traditional database model.</p></blockquote>

<p><img src="http://alphawang.github.io/images/post/2015/01/solr-inverted-index.png" alt="user icon" /></p>

<h2>Query</h2>

<p>通过Inverted Index，可以实现如下查询：</p>

<ul>
<li><p><code>Required Terms</code>: new AND house; +new +house</p></li>
<li><p><code>Optional Terms</code>: new house; new OR house.  (default)</p></li>
<li><p><code>Negated Terms</code>: new house NOT rental; new house -rental</p></li>
<li><p><code>Phrases</code>: &ldquo;new home&rdquo; OR &ldquo;new house&rdquo;</p></li>
<li><p><code>Grouped expressions</code>: New AND (house OR  home)</p></li>
</ul>


<p>为了支持Phrase查询：</p>

<ul>
<li><code>Term Position</code>: recording of the relative position of terms within a document. can tell us where in the document each term appears.

<blockquote><p>存储在inverted index中，可用于支持<code>Phrase查询</code>。</p></blockquote></li>
</ul>


<h2>Fuzzy matching</h2>

<p><code>Fuzzy matching</code> is defined as the ability to perform inexact matches on terms in the search index. For example,</p>

<ul>
<li><code>Wildcard searching</code></li>
</ul>


<p>search for any words that start with a particular prefix.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>offi*
</span><span class='line'>off*r
</span><span class='line'>off?r</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>注意：</p>

<blockquote><ol>
<li>the more characters you specify at the beginning of the term before the wildcard, the faster the query should run.</li>
<li>执行<code>leading wildcard</code>(*ing)会很耗时，可以通过<code>ReversedWildcardFilterFactory</code>来解决，不过这样会增加index时间，并减慢整体查询速度。</li>
</ol>
</blockquote>

<ul>
<li><code>Range searching</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>title:{boat TO boulder}  //exclusive
</span><span class='line'>price:[12.99 TO 14.99]  //inclusive</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>Fuzzy searching</code> / <code>Edit-distance searching</code></li>
</ul>


<p>find spelling variations within one or two characters (handle spelling errors).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>administrator~ //Matches: adminstrator, administrater, administratior, and so forth 
</span><span class='line'>administrator~2 //Matches within 2 edit distances. </span></code></pre></td></tr></table></div></figure>


<blockquote><p>Solr provides the ability to handle character variations using edit-distance measurements based upon Damerau-Levenshtein distances, which account for more than 80% of all human misspellings.</p>

<p>An <code>edit distance</code> is defined as an insertion, a deletion, a substitution, or a transposition of characters.</p></blockquote>

<ul>
<li><code>Proximity searching</code></li>
</ul>


<p>match two terms within some maximum distance of each other.
e.g. search:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"chief executive officer" OR "chief financial officer" OR "chief marketing officer" OR "chief technology officer" OR ... </span></code></pre></td></tr></table></div></figure>


<p>改进：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"chief officer"~1</span></code></pre></td></tr></table></div></figure>


<p>Solr内部用<code>tem positions</code>来计算edit distance.</p>

<h2>Relevancy</h2>

<p>Solr calculaes a <code>relevancy score</code> for each document and then sorting the search results from the high- est score to the lowest.</p>

<h3>Similarity</h3>

<p>【Q】那么relevancy score是如何计算的？受哪些因素的影响呢？</p>

<p>【A】Similarity:</p>

<ul>
<li>Solr’s relevancy scores are based upon the <code>Similarity</code> class, which can be defined on a per-field basis in Solr’s <code>schema.xml</code>.</li>
<li><code>Similarity</code> is a Java class that defines how a relevancy score is calculated based upon the results of a query.</li>
</ul>


<p>实现原理：<strong>two-pass model</strong></p>

<ol>
<li>First, it makes use of a <code>Boolean model</code> to filter out any documents that do not match the customer’s query.</li>
<li>Then it uses a <code>vector space model</code> for scoring and drawing the query as a vector, as well as an additional vector for each document.</li>
<li>The similarity score for each document is based upon the <code>cosine</code> between the query vector and that document’s vector.</li>
</ol>


<p><img src="http://alphawang.github.io/images/post/2015/01/solr-relevancy-vector.png" alt="user icon" /></p>

<p>【Q】显然，重点是如何算出合理的vector？</p>

<p>【A】算法如下：</p>

<p><img src="http://alphawang.github.io/images/post/2015/01/solr-relevancy-algorithm.png" alt="user icon" /></p>

<ul>
<li>term frequency (<code>tf</code>),</li>
<li>inverse document frequency (<code>idf</code>),</li>
<li>term boosts (<code>t.getBoost</code>),</li>
<li>field normalization (<code>norm</code>),</li>
<li>coordination factor (<code>coord</code>),</li>
<li>query normalization (<code>queryNorm</code>)</li>
</ul>


<h3>Term Frequency</h3>

<ul>
<li><code>Term frequency (tf)</code> is a measure of how often a particular term appears in a matching document.</li>
<li>The more times the search term appears within a document, the more relevant that document is considered.

<blockquote><p>并非线性关系；而用了平方根。见上图。</p></blockquote></li>
</ul>


<h3>Inverse Document Frequency</h3>

<ul>
<li><code>Inverse document frequency (idf)</code>, a measure of how “rare” a search term is, is calcu- lated by finding the document frequency (<em>how many total documents the search term appears within</em>), and calculating its inverse.</li>
<li><code>Term frequency</code> and <code>inverse document frequency</code>, when multiplied together in the relevancy calculation, provide a nice counterbalance :</li>
<li>The <code>term frequency</code> elevates terms that appear multiple times within a document,</li>
<li>whereas the <code>inverse document frequency</code> penalizes those terms that appear commonly across many documents.

<blockquote><p>作用：减少common words对评分的影响。</p></blockquote></li>
</ul>


<h3>Boosting</h3>

<p>If you have domain knowledge about your content—you know that certain fields or terms are more (or less) important than others—you can supply boosts at either indexing time or query time to ensure that the weights of those fields or terms are adjusted accordingly.</p>

<ul>
<li>Query-time boosting</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>title:(solrinaction)^2.5description:(solrinaction) 
</span><span class='line'>title:(solr^2in^.01action^1.5)^3OR"solrinaction"^2.5 </span></code></pre></td></tr></table></div></figure>


<ul>
<li>Index-time boosting</li>
</ul>


<p>it’s possible to boost documents or fields within documents at index time</p>

<h3>Filed Normalization</h3>

<blockquote><p>The default Solr relevancy formula calculates three kinds of normalization factors (norms): <code>field norms</code>, <code>query norms</code>, and the <code>coord factor</code>.</p></blockquote>

<ul>
<li>The <code>field normalization factor (field norm)</code> is a combination of factors describing the importance of a particular field on a per-document basis.</li>
</ul>


<p>This byte packs a lot of information:</p>

<ol>
<li>the boost set on the document when indexed,</li>
<li>the boost set on the field when indexed,</li>
<li>and a length normalization factor that penalizes longer documents and helps shorter documents</li>
</ol>


<h3>Query Normalization</h3>

<p><code>Query Norm</code> does not affect the overall relevancy ordering, as the same queryNorm is applied to all documents.
It merely serves as a normalization factor to attempt to make scores between queries comparable.</p>

<h3>The Coord Factor</h3>

<p>Its role is to measure how much of the query each document matches.</p>

<h2>Precision and Recall</h2>

<h3>Precision:</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Correct Matches / # Total Results Returned</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Precision is a measure of how “good” each of the results of a query is,</li>
<li>but it pays no attention to how thorough it is; *a query that returns one single correct doc- ument out of a million other correct documents is still considered perfectly precise. *</li>
<li>Precision is answering the question: “Were the documents that came back the ones I was looking for?”</li>
</ul>


<h3>Recall</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Correct Matches / (# Correct Matches + # Missed Matches)</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Recall is a measure of how thorough the search results are.</li>
<li>Recall is answering the question: “How many of the correct documents were returned?”</li>
</ul>


<p>区别：</p>

<ul>
<li>Precision is high when the results returned are correct; Recall is high when the correct results are present.</li>
<li>Recall does not care that all of the results are correct. Precision does not care that all of the results are present.</li>
</ul>


<p>平衡：</p>

<ul>
<li>measuring for <code>Recall</code> across the entire result set;</li>
<li>measuring for<code>Precision</code> only within the first page (or few pages) of search results.</li>
</ul>


<h2>Searching at Scale</h2>

<p>Solr is able to scale to handle billions of documents and an infinite number of queries by adding servers.</p>

<h3>The denormalized document</h3>

<ul>
<li>A <code>denormalized document</code> is one in which all fields are self-contained within the document, even if the values in those fields are duplicated across many documents.</li>
<li>优点：extreme scalability. Because we can make the assumption that each document is self-contained（自包含）, this means that we can also partition documents across multiple servers without having to keep related documents on the same server (because documents are independent of one another)</li>
</ul>


<blockquote><ul>
<li>不同document的字段值会有重复。</li>
<li>与传统关系数据库不一样！</li>
</ul>
</blockquote>

<h3>Distributed Searching</h3>

<ul>
<li>sometimes your search servers may become overloaded by either <em>too many queries at a time</em> or by <em>too much data needing to be searched through</em> for a single server to handle.</li>
<li>后一种情况的解决办法：aggregated search:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://box1:8983/solr/core1/select?q=*:*&shards=box1:8983/solr/core1, 
</span><span class='line'>          box2:8983/solr/core2,box2:8983/solr/core3
</span><span class='line'>// 注意core2和core3是在同一个server</span></code></pre></td></tr></table></div></figure>


<ul>
<li>distributed search across multiple Solr cores is run in parallel on each of those index partitions</li>
</ul>


<blockquote><p>即：<code>partition</code>, <code>shard</code>；将大量的数据分区到不同的core，然后通过aggregated search并行地同时在这些core上进行查询。</p></blockquote>

<h3>Clusters vs. Servers</h3>

<ul>
<li>the servers for this use case are mutually dependent. If one becomes unavailable for searching, they all become unavailable for searching and begin failing</li>
<li>上例中，如果box2服务器挂掉，返回结果就会报错。</li>
<li>Solr provides excellent built-in cluster-management capabilities through the use of Apache ZooKeeper</li>
</ul>


<h2>Limits</h2>

<ul>
<li>Solr is NOT relational in any way across documents. It’s not well suited for joining significant amounts of data across different fields on different documents, and <strong>it can’t perform join operations at all across multiple servers</strong>.</li>
<li>The denormalized nature of Solr can be particularly problematic when the data in one field that is shared across many documents changes</li>
<li><p>you can insert, delete, and update documents, but not sin- gle fields (easily).</p>

<blockquote><p>whenever a new field is added to Solr or the contents of an existing field have changed, every single document in the Solr index must be reprocessed in its entirety before the data will be populated for the new field in all documents.</p></blockquote></li>
<li><p>Solr is not optimized for processing quite long queries (thousands of terms) or returning quite large result sets to users.</p></li>
<li>elastic scalability: the ability to automatically add and remove servers and redistribute content to handle load.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Apache Solr]]></title>
    <link href="http://alphawang.github.io/blog/introduction-to-apache-solr/"/>
    <updated>2015-01-20T15:28:10+08:00</updated>
    <id>http://alphawang.github.io/blog/introduction-to-apache-solr</id>
    <content type="html"><![CDATA[<blockquote><p>本文是《Solr In Action》读书笔记，包含第1~2章</p></blockquote>

<!--more-->


<h1>Chapter 01. Introduction to Solr</h1>

<h2>What&rsquo;s Solr</h2>

<p>Apache Solr, is a specific NoSQL technology.</p>

<p>Solr is a <code>scalable</code>, <code>ready-to-deploy</code> enterprise search engine that’s <code>optimized to search</code> <code>large volumes</code> of <code>text-centric</code> data and <code>return results sorted by relevance</code>.</p>

<ul>
<li><code>Scalable</code>— Solr scales by distributing work (indexing and query processing) to multiple servers in a cluster.</li>
<li><code>Ready to deploy</code>— Solr is open source, is easy to install and configure, and provides a preconfigured example to help you get started.</li>
<li><code>Optimized for search</code>— Solr is fast and can execute complex queries in subsecond speed, often only tens of milliseconds.</li>
<li><code>Large volumes of documents</code>— Solr is designed to deal with indexes containing many millions of documents.</li>
<li><code>Text-centric</code>— Solr is optimized for searching natural-language text, like emails, web pages, resumes, PDF documents, and social messages such as tweets or blogs.</li>
<li><code>Results sorted by relevance</code>— Solr returns documents in ranked order based on how relevant each document is to the user’s query.</li>
</ul>


<p>Solr is:</p>

<ol>
<li><p><strong>Information retrieval engine</strong>
inverted index;  ranking documents by relevance</p></li>
<li><p><strong>Flexible schema management</strong>
xml-configuration</p></li>
<li><p><strong>Java web application</strong>
REST-like services</p></li>
<li><p><strong>Multiple indexes in one server</strong>
data partitioning</p></li>
<li><p><strong>Extendable (plugins)</strong>
Each subsystem (document management; query processing; text analysis) is composed of a modular “pipeline” that allows you to plug in new functionality</p></li>
<li><p><strong>Scalable</strong>
Provides flexible cache-management features. <br/>
<em>Query throughput</em>: add <code>replicas</code> of your index so that more servers can handle more requests.  <br/>
<em>The number of documents indexed</em>: split the index into smaller chunks called <code>shards</code>, then distribute the searches across the shards.</p></li>
<li><p><strong>Fault-tolerant</strong></p></li>
</ol>


<h2>Solr适合处理哪种数据</h2>

<p>Solr are optimized to handle data exhibiting four main characteristics:</p>

<ol>
<li><strong>Text-centric</strong>
Text-centric data implies that the text of a document contains information that users are interested in finding.</li>
<li><strong>Read- dominant</strong>
Think of read-dominant as meaning that documents are read far more often than they’re created or updated.</li>
<li><strong>Document-oriented</strong>
In a search engine, a document is a self-contained collection of fields, in which each field only holds data and doesn’t contain nested fields. (FLAT structure)</li>
<li><strong>Flexible schema</strong>
This means that documents in a search index don’t need to have a uniform structure.</li>
</ol>


<h2>Features</h2>

<p>User-experience features</p>

<ul>
<li><code>Pagination and sorting</code></li>
<li><code>Faceting</code>: category search results into subgroups.</li>
<li><code>Autosuggest</code></li>
<li><code>Spell checker</code></li>
<li><code>Hit highlighting</code></li>
<li><code>Geospatial search</code></li>
</ul>


<p>Data-modeling features</p>

<ul>
<li><code>Result grouping /field collapsing</code>. 不同于facet: allows you to return unique groups instead of individual documents in the results</li>
<li><code>Flexible query support</code></li>
<li><code>Joins</code>: like sql subquery</li>
<li><code>Document clustering</code>: identify groups of documents that are similar</li>
<li><code>Import rich document formats</code>: pdf, word</li>
<li><code>Import relational databases</code></li>
<li><code>Multilingual support</code></li>
</ul>


<p>New features in Solr4</p>

<ul>
<li><code>Near real-time search</code> : be searchable within seconds of being added to the index.</li>
<li><code>Atomic updates with optimistic concurrency</code>: Solr uses a special version field named <em>version</em> to enforce safe update semantics for documents.</li>
<li><code>Real-time get</code>: ?</li>
<li><code>Write durability using a transaction log</code>: can control when to commit documents to make them visible in search results without risking data loss if a server fails before you commit.</li>
<li><code>Easy sharding and replication using ZooKeeper</code>: uses Apache ZooKeeper to distribute configurations and manage shard leaders and replicas</li>
</ul>


<h2>Compare</h2>

<h3>Solr vs. Lucene</h3>

<ul>
<li>Lucene provides the library for indexing documents and executing queries.</li>
<li>With Lucene, you need to write Java code to define fields and how to analyze those fields.</li>
<li>Solr uses <code>schema.xml</code> to represent all of the possible fields and data types necessary to map documents into a Lucene index.</li>
<li>Solr also adds nice constructs on top of the core Lucene indexing functionality (<code>copy field</code> and <code>dynamic field</code>).</li>
</ul>


<p>Lucene provides a powerful library for indexing documents, executing queries, and ranking results. And, with schema.xml, you have a flexible way to define the index structure using an XML-configuration document instead of having to program to the Lucene API.</p>

<h3>Solr vs. MapReduce</h3>

<ul>
<li>The need to build a web-scale <code>inverted index</code> led to the invention of MapReduce.</li>
<li>The map phase produces a unique term and document ID where the term occurs.</li>
<li>In the reduce phase, terms are sorted so that all term/docID pairs are sent to the same reducer process for each unique term. The reducer sums up all term frequencies for each term to generate the inverted index.</li>
</ul>


<blockquote><p>Apache <code>Hadoop</code> provides an open source implementation of <code>MapReduce</code>, and it’s used by the Apache <code>Nutch</code> open source project to build a <code>Lucene</code> inverted index for web-scale search using <code>Solr</code>.</p></blockquote>

<h3>Solr vs. SolrCloud</h3>

<ul>
<li>SolrCloud is the code name for a subset of features in Solr 4 that makes it easier to configure and run a scalable, fault-tolerant cluster of Solr servers.</li>
<li>Think of SolrCloud as a way to configure a distributed installation of Solr 4.</li>
</ul>


<h1>Chapter 02. Getting to know Solr</h1>

<h2>Query 参数</h2>

<p><img src="http://alphawang.github.io/images/post/2015/01/solr-query.png" alt="user icon" /></p>

<p><img src="http://alphawang.github.io/images/post/2015/01/solr-query-param.png" alt="user icon" /></p>

<ul>
<li><code>Filter query</code>: restricts the result set to documents matching this filter but doesn’t affect scoring.</li>
<li><code>start, rows</code>: 用于分页。
the underlying Lucene index isn’t optimized for returning many documents at once.<br/>
in comparison to query execution, results construction is a slow process.</li>
</ul>


<p>When you fill out the query form, an HTTP GET request is created and sent to Solr.<br/>
对应的HTTP Get请求：
<img src="http://alphawang.github.io/images/post/2015/01/solr-query-http.png" alt="user icon" /></p>

<h2>返回参数</h2>

<p><img src="http://alphawang.github.io/images/post/2015/01/solr-response.png" alt="user icon" />
返回结果是按照score排序的：Ranked retrieval。
除非指定了sort参数。</p>

<h2>Solritas</h2>

<p>Solr prov ides a customizable example search UI, called Solritas, to help you prototype your own awesome search application.
<a href="http://localhost:8983/solr/collection1/browse">http://localhost:8983/solr/collection1/browse</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Is the Improvement of String.substring() in Java7 Really Reasonable?]]></title>
    <link href="http://alphawang.github.io/blog/the-impovement-of-string-substring-in-java7-/"/>
    <updated>2014-12-24T15:59:15+08:00</updated>
    <id>http://alphawang.github.io/blog/the-impovement-of-string-substring-in-java7-</id>
    <content type="html"><![CDATA[<p><code>String#substring()</code>在Java6和Java7中的实现是不一样的。这是因为Java6的实现可能导致内存问题，所以Java7中为了改善这个问题修改了实现方式。那么Java7中的实现就真的合理吗？</p>

<p>首先让我们来猜测一下，Java是如何实现substring功能的。由于String是不可变的，可能我们会猜测实现机制如下图：</p>

<p><img src="http://alphawang.github.io/images/post/2014/12/substring-user.png" alt="user icon" /></p>

<!--more-->   


<p>​然而，这个图并不完全正确，或者说并没有完全表示出Java堆中真正发生的事情。</p>

<h2>Java6中的substring()</h2>

<p>Java中字符串是通过字符数组来支持实现的，在JDK6中，String类包含3个实例变量：<br/>
- <code>char[] value</code> 表示真实的字符数组；<br/>
- <code>int offset</code> 表示数组的偏移量；<br/>
- <code>int count</code> 表示String所包含的字符的个数。</p>

<p>当调用<code>substring()</code>方法时，会创建一个新的字符串对象，但是这个字符串的值在java堆中仍然指向的是同一个数组，这两个字符串的不同之处只是他们的count和offset的值。</p>

<p><img src="http://alphawang.github.io/images/post/2014/12/substring-java6.png" alt="java6 icon" /></p>

<p>可以参考Java6中的源代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//Java 6</span>
</span><span class='line'><span class="n">String</span><span class="o">(</span><span class="kt">int</span> <span class="n">offset</span><span class="o">,</span> <span class="kt">int</span> <span class="n">count</span><span class="o">,</span> <span class="kt">char</span> <span class="n">value</span><span class="o">[])</span> <span class="o">{</span>
</span><span class='line'>     <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>     <span class="k">this</span><span class="o">.</span><span class="na">offset</span> <span class="o">=</span> <span class="n">offset</span><span class="o">;</span>
</span><span class='line'>     <span class="k">this</span><span class="o">.</span><span class="na">count</span> <span class="o">=</span> <span class="n">count</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">substring</span><span class="o">(</span><span class="kt">int</span> <span class="n">beginIndex</span><span class="o">,</span> <span class="kt">int</span> <span class="n">endIndex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="c1">//check boundary</span>
</span><span class='line'>     <span class="k">return</span> <span class="k">new</span> <span class="nf">String</span><span class="o">(</span><span class="n">offset</span> <span class="o">+</span> <span class="n">beginIndex</span><span class="o">,</span> <span class="n">endIndex</span> <span class="o">-</span> <span class="n">beginIndex</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Java6中substring()可能导致的问题</h3>

<p>这么实现有一个问题：如果你有一个非常长的字符串，但是你仅仅只需要这个字符串的一小部分，你需要的只是很小的部分，而这个子字符串却要包含整个字符数组。这可能导致内存溢出问题。</p>

<p>我们可以用一个办法来规避这个问题：为<code>substring()</code>得到的子字符串重新创建一个对象。例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">String</span> <span class="n">littleString</span> <span class="o">=</span> <span class="n">largeString</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">2</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>或者：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">littleString</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">String</span><span class="o">(</span><span class="n">largeString</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">2</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2>Java7中的substring()</h2>

<p>Java7中对上述问题做了修正，当调用<code>substring()</code>方法时，在堆中真正的创建了一个新的数组，当原字符数组没有被引用后就被GC回收了。</p>

<p><img src="http://alphawang.github.io/images/post/2014/12/substring-java7.png" alt="java7 icon" /></p>

<p>我们看源码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Java 7</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">substring</span><span class="o">(</span><span class="kt">int</span> <span class="n">beginIndex</span><span class="o">,</span> <span class="kt">int</span> <span class="n">endIndex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">((</span><span class="n">beginIndex</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">endIndex</span> <span class="o">==</span> <span class="n">value</span><span class="o">.</span><span class="na">length</span><span class="o">))</span> <span class="o">?</span> <span class="k">this</span>
</span><span class='line'>                <span class="o">:</span> <span class="k">new</span> <span class="nf">String</span><span class="o">(</span><span class="n">value</span><span class="o">,</span> <span class="n">beginIndex</span><span class="o">,</span> <span class="n">subLen</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">String</span><span class="o">(</span><span class="kt">char</span> <span class="n">value</span><span class="o">[],</span> <span class="kt">int</span> <span class="n">offset</span><span class="o">,</span> <span class="kt">int</span> <span class="n">count</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">copyOfRange</span><span class="o">(</span><span class="n">value</span><span class="o">,</span> <span class="n">offset</span><span class="o">,</span> <span class="n">offset</span><span class="o">+</span><span class="n">count</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>可以看到Java7通过<code>Arrays.copyOfRange</code>重新创建了一个字符数组。</p>

<h2>Java7的修改合理吗？</h2>

<p>Java7虽然规避了substring可能出现的内存问题，但是新的实现真的好吗？</p>

<p>Java6的实现，当进行substring时，使用共享内容字符数组，速度会更快，不用重新申请内存。虽然有可能出现本文中的内存性能问题，但也是有方法可以解决的。</p>

<p>而Java7的实现，对任何String，即便不是Large String，都会重新申请内存，速度也会更慢，性能会更差。如果我们程序中处理的大部分都不是Large String的话，这种对性能的影响是不是得不偿失？</p>

<p>如果保持Java6的实现，在处理非Large String时，我们直接调用substring即可；而对Large String则用上文提到的规避方法来解决。</p>

<h2>List#sublist()的实现为什么没改变？</h2>

<p>Java中有一个和<code>String#substring</code>有着类似逻辑、功能、实现机制的方法：<code>List#sublist</code>。Java6 处理Large List的sublist时，也会出现内存问题；而奇怪的时Java7并未对这个实现进行修改：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//AbstractList</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="nf">subList</span><span class="o">(</span><span class="kt">int</span> <span class="n">fromIndex</span><span class="o">,</span> <span class="kt">int</span> <span class="n">toIndex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">(</span><span class="k">this</span> <span class="k">instanceof</span> <span class="n">RandomAccess</span> <span class="o">?</span>
</span><span class='line'>                <span class="k">new</span> <span class="n">RandomAccessSubList</span><span class="o">&lt;&gt;(</span><span class="k">this</span><span class="o">,</span> <span class="n">fromIndex</span><span class="o">,</span> <span class="n">toIndex</span><span class="o">)</span> <span class="o">:</span>
</span><span class='line'>                <span class="k">new</span> <span class="n">SubList</span><span class="o">&lt;&gt;(</span><span class="k">this</span><span class="o">,</span> <span class="n">fromIndex</span><span class="o">,</span> <span class="n">toIndex</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">SubList</span><span class="o">(</span><span class="n">AbstractList</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">,</span> <span class="kt">int</span> <span class="n">fromIndex</span><span class="o">,</span> <span class="kt">int</span> <span class="n">toIndex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">l</span> <span class="o">=</span> <span class="n">list</span><span class="o">;</span>
</span><span class='line'>        <span class="n">offset</span> <span class="o">=</span> <span class="n">fromIndex</span><span class="o">;</span>
</span><span class='line'>        <span class="n">size</span> <span class="o">=</span> <span class="n">toIndex</span> <span class="o">-</span> <span class="n">fromIndex</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">modCount</span> <span class="o">=</span> <span class="n">l</span><span class="o">.</span><span class="na">modCount</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以我们在处理Large List时还是需要用规避方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="nf">sublist</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">originalList</span><span class="o">,</span> <span class="kt">int</span> <span class="n">fromIndex</span><span class="o">,</span> <span class="kt">int</span> <span class="n">toIndex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;(</span><span class="n">originalList</span><span class="o">.</span><span class="na">subList</span><span class="o">(</span><span class="n">fromIndex</span><span class="o">,</span> <span class="n">toIndex</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>为什么Java7不对<code>List#sublist</code>做修改，以让它和<code>String#substring</code>的实现机制继续保持一致呢？不得而知。</p>

<h2>Reference</h2>

<p><a href="http://www.programcreek.com/2013/09/the-substring-method-in-jdk-6-and-jdk-7/">http://www.programcreek.com/2013/09/the-substring-method-in-jdk-6-and-jdk-7/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How String in Switch Works in Java 7]]></title>
    <link href="http://alphawang.github.io/blog/how-string-in-switch-works-in-java7/"/>
    <updated>2014-12-20T10:02:33+08:00</updated>
    <id>http://alphawang.github.io/blog/how-string-in-switch-works-in-java7</id>
    <content type="html"><![CDATA[<p>支持switch字符串是Java7增加的一个新特性，那么它的底层是如何实现的呢？我们来看一个switch String的例子，然后分析编译器是如何处理的。</p>

<!--more-->


<h2>switch字符串的原理</h2>

<p>switch String的语法示例如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">* Created by Alpha on Jan/21/15.</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StringSwitch</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">String</span> <span class="n">mode</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>     <span class="k">switch</span> <span class="o">(</span><span class="n">mode</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="s">&quot;ACTIVE&quot;</span><span class="o">:</span>
</span><span class='line'>           <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Application is running on Active mode&quot;</span><span class="o">);</span>
</span><span class='line'>           <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="s">&quot;PASSIVE&quot;</span><span class="o">:</span>
</span><span class='line'>           <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Application is running on Passive mode&quot;</span><span class="o">);</span>
</span><span class='line'>           <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="s">&quot;SAFE&quot;</span><span class="o">:</span>
</span><span class='line'>           <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Application is running on Safe mode&quot;</span><span class="o">);</span>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么在底层是如何实现的呢？我们可以通过反编译看看编译器是如何处理上述代码的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StringSwitch</span> <span class="o">{</span>
</span><span class='line'>   <span class="kd">public</span> <span class="nf">StringSwitch</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">String</span> <span class="n">mode</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>       <span class="kt">byte</span> <span class="n">var3</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'>       <span class="k">switch</span><span class="o">(</span><span class="n">mode</span><span class="o">.</span><span class="na">hashCode</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">case</span> <span class="o">-</span><span class="mi">74056953</span><span class="o">:</span>
</span><span class='line'>           <span class="k">if</span><span class="o">(</span><span class="n">mode</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;PASSIVE&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>               <span class="n">var3</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>           <span class="o">}</span>
</span><span class='line'>           <span class="k">break</span><span class="o">;</span>
</span><span class='line'>       <span class="k">case</span> <span class="mi">2537357</span><span class="o">:</span>
</span><span class='line'>           <span class="k">if</span><span class="o">(</span><span class="n">mode</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;SAFE&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>               <span class="n">var3</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>           <span class="o">}</span>
</span><span class='line'>           <span class="k">break</span><span class="o">;</span>
</span><span class='line'>       <span class="k">case</span> <span class="mi">1925346054</span><span class="o">:</span>
</span><span class='line'>           <span class="k">if</span><span class="o">(</span><span class="n">mode</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;ACTIVE&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>               <span class="n">var3</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>           <span class="o">}</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>       <span class="k">switch</span><span class="o">(</span><span class="n">var3</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">case</span> <span class="mi">0</span><span class="o">:</span>
</span><span class='line'>           <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Application is running on Active mode&quot;</span><span class="o">);</span>
</span><span class='line'>           <span class="k">break</span><span class="o">;</span>
</span><span class='line'>       <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
</span><span class='line'>           <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Application is running on Passive mode&quot;</span><span class="o">);</span>
</span><span class='line'>           <span class="k">break</span><span class="o">;</span>
</span><span class='line'>       <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
</span><span class='line'>           <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Application is running on Safe mode&quot;</span><span class="o">);</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到处理流程是：</p>

<ul>
<li>编译器首先调用字符串的<code>hashCode()</code>，返回一个int；</li>
<li>然后在对这个int进行switch；</li>
<li>每个switch case中再加上<code>equals()</code>比较来进行安全检查。</li>
</ul>


<h2>分析</h2>

<p>我们看到实际上底层进行switch的是哈希值，所以Java7中所谓的支持switch字符串只是一个语法糖，底层还是一样：switch中只能使用整型，比如<code>byte</code>，<code>short</code>，<code>char</code>以及<code>int</code>。</p>

<p>另外switch case中通过<code>equals()</code>方法比较进行安全检查，这个检查是必要的，因为哈希可能会发生碰撞。</p>

<p>正式因为加上了这个检查，因此它的性能一定是不如使用枚举进行switch或者使用纯整数常量。</p>

<h2>建议</h2>

<p>因为上述性能问题，建议尽量使用纯整数常量进行swtich，或者用enum进行switch。</p>

<p>如果无法避免用字符串进行switch的话，还要注意大小写敏感的问题，建议统一用全大写字符串。
​</p>

<h2>Reference</h2>

<p><a href="http://javarevisited.blogspot.sg/2014/05/how-string-in-switch-works-in-java-7.html">http://javarevisited.blogspot.sg/2014/05/how-string-in-switch-works-in-java-7.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What's String.intern()]]></title>
    <link href="http://alphawang.github.io/blog/what-is-string-intern/"/>
    <updated>2014-12-15T15:23:45+08:00</updated>
    <id>http://alphawang.github.io/blog/what-is-string-intern</id>
    <content type="html"><![CDATA[<p>Java语言中有8种基本类型和一种比较特殊的类型<code>String</code>。为了使这些类型在运行过程中速度更快，更节省内存，都提供了一种常量池的概念。常量池就类似一个Java系统级别提供的缓存。</p>

<p>其中8种基本类型的常量池都是系统协调的，而<code>String</code>类型的常量池比较特殊。它的主要使用方法有两种：</p>

<ul>
<li>直接使用双引号声明出来的<code>String</code>对象会直接存储在常量池中。</li>
<li>如果不是用双引号声明的<code>String</code>对象，可以使用<code>String.intern()</code>方法。<strong>intern方法会从字符串常量池中查询当前字符串是否存在，若不存在就会将当前字符串放入常量池中</strong></li>
</ul>


<!--more-->


<h2>源码</h2>

<p>Jdk中源码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/** </span>
</span><span class='line'><span class="cm"> * Returns a canonical representation for the string object. </span>
</span><span class='line'><span class="cm"> * &lt;p&gt; </span>
</span><span class='line'><span class="cm"> * A pool of strings, initially empty, is maintained privately by the </span>
</span><span class='line'><span class="cm"> * class &lt;code&gt;String&lt;/code&gt;. </span>
</span><span class='line'><span class="cm"> * &lt;p&gt; </span>
</span><span class='line'><span class="cm"> * When the intern method is invoked, if the pool already contains a </span>
</span><span class='line'><span class="cm"> * string equal to this &lt;code&gt;String&lt;/code&gt; object as determined by </span>
</span><span class='line'><span class="cm"> * the {@link #equals(Object)} method, then the string from the pool is </span>
</span><span class='line'><span class="cm"> * returned. Otherwise, this &lt;code&gt;String&lt;/code&gt; object is added to the </span>
</span><span class='line'><span class="cm"> * pool and a reference to this &lt;code&gt;String&lt;/code&gt; object is returned. </span>
</span><span class='line'><span class="cm"> * &lt;p&gt; </span>
</span><span class='line'><span class="cm"> * It follows that for any two strings &lt;code&gt;s&lt;/code&gt; and &lt;code&gt;t&lt;/code&gt;, </span>
</span><span class='line'><span class="cm"> * &lt;code&gt;s.intern()&amp;nbsp;==&amp;nbsp;t.intern()&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; </span>
</span><span class='line'><span class="cm"> * if and only if &lt;code&gt;s.equals(t)&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;. </span>
</span><span class='line'><span class="cm"> * &lt;p&gt; </span>
</span><span class='line'><span class="cm"> * All literal strings and string-valued constant expressions are </span>
</span><span class='line'><span class="cm"> * interned. String literals are defined in section 3.10.5 of the </span>
</span><span class='line'><span class="cm"> * &lt;cite&gt;The Java&amp;trade; Language Specification&lt;/cite&gt;. </span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * @return  a string that has the same contents as this string, but is </span>
</span><span class='line'><span class="cm"> *          guaranteed to be from a pool of unique strings. </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">native</span> <span class="n">String</span> <span class="nf">intern</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个方法是一个 native 的方法，但注释写的非常明了：</p>

<blockquote><p>如果常量池中存在当前字符串，就会直接返回当前字符串；如果常量池中没有此字符串，会将此字符串放入常量池中后，再返回。</p></blockquote>

<p>native方法的大体实现逻辑是：
JAVA 使用 jni 调用c++实现的<code>StringTable#intern()</code>方法, <code>StringTable#intern()</code>方法跟Java中的<code>HashMap</code>的实现是差不多的, 只是不能自动扩容。默认大小是1009。</p>

<p>要注意的是，String的String Pool是一个固定大小的<code>Hashtable</code>，默认值大小长度是1009，如果放进String Pool的String非常多，就会造成Hash冲突严重，从而导致链表会很长，而链表长了后直接会造成的影响就是当调用<code>String.intern()</code>时性能会大幅下降（因为要一个一个找）。</p>

<p>在 jdk6中<code>StringTable</code>是固定的，就是1009的长度，<strong>所以如果常量池中的字符串过多就会导致效率下降很快</strong>。在jdk7中，<code>StringTable</code>的长度可以通过一个参数指定：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">-</span><span class="nl">XX:</span><span class="n">StringTableSize</span><span class="o">=</span><span class="mi">99991</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Java6 和 Java7 下 intern 的区别</h2>

<p>相信很多 JAVA 程序员都做做类似 <code>String s = new String("abc")</code>这个语句创建了几个对象的题目。 这种题目主要就是为了考察程序员对字符串对象的常量池掌握与否。</p>

<blockquote><p>上述的语句中是创建了2个对象，第一个对象是"abc"字符串存储在常量池中，第二个对象在Heap中的 String 对象。</p></blockquote>

<p>来看一段代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">String</span><span class="o">(</span><span class="s">&quot;1&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="na">intern</span><span class="o">();</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">s2</span> <span class="o">=</span> <span class="s">&quot;1&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span> <span class="o">==</span> <span class="n">s2</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">String</span> <span class="n">s3</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">String</span><span class="o">(</span><span class="s">&quot;1&quot;</span><span class="o">)</span> <span class="o">+</span> <span class="k">new</span> <span class="nf">String</span><span class="o">(</span><span class="s">&quot;1&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">s3</span><span class="o">.</span><span class="na">intern</span><span class="o">();</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">s4</span> <span class="o">=</span> <span class="s">&quot;11&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s3</span> <span class="o">==</span> <span class="n">s4</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>打印结果是</p>

<ul>
<li>jdk6 下<code>false false</code></li>
<li>jdk7 下<code>false true</code></li>
</ul>


<p>然后将<code>s3.intern();</code>语句下调一行，放到<code>String s4 = "11";</code>后面。将<code>s.intern();</code> 放到S<code>tring s2 = "1";</code>后面：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">String</span><span class="o">(</span><span class="s">&quot;1&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">s2</span> <span class="o">=</span> <span class="s">&quot;1&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="na">intern</span><span class="o">();</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span> <span class="o">==</span> <span class="n">s2</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">String</span> <span class="n">s3</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">String</span><span class="o">(</span><span class="s">&quot;1&quot;</span><span class="o">)</span> <span class="o">+</span> <span class="k">new</span> <span class="nf">String</span><span class="o">(</span><span class="s">&quot;1&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">s4</span> <span class="o">=</span> <span class="s">&quot;11&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="n">s3</span><span class="o">.</span><span class="na">intern</span><span class="o">();</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s3</span> <span class="o">==</span> <span class="n">s4</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>打印结果为：</p>

<ul>
<li>jdk6 下<code>false false</code></li>
<li>jdk7 下<code>false false</code></li>
</ul>


<h3>Java6</h3>

<p><img src="http://alphawang.github.io/images/post/2014/12/string-intern-jdk6.png" alt="user icon" /></p>

<p>注：图中绿色线条代表 string 对象的内容指向。 黑色线条代表地址指向。</p>

<p>Java6中上述的所有打印都是 false 的，因为 <strong>jdk6中的常量池是放在 Perm 区中的</strong>，Perm 区和正常的 Heap 区域是完全分开的。</p>

<p>使用引号声明的字符串都是会直接在字符串常量池中生成，而 new 出来的 String 对象是放在 JAVA Heap 区域。所以拿一个Heap 区域的对象地址和字符串常量池的对象地址进行比较肯定是不相同的，即使调用<code>String.intern()</code>方法也是没有任何关系的。</p>

<h3>Java7</h3>

<p>在 Java6 以及以前的版本中，字符串的常量池是放在堆的 Perm 区的，Perm 区是一个类静态的区域，主要存储一些加载类的信息，常量池，方法片段等内容，默认大小只有4m，一旦常量池中大量使用 intern 是会直接产生<code>java.lang.OutOfMemoryError: PermGen space</code>错误的。</p>

<p>所以<strong>在 jdk7 的版本中，字符串常量池已经从 Perm 区移到正常的 Heap 区域了</strong>。</p>

<p><img src="http://alphawang.github.io/images/post/2014/12/string-intern-jdk7.png" alt="user icon" /></p>

<p>在第一段代码中，先看 s3和s4字符串。</p>

<ul>
<li><p><code>String s3 = new String("1") + new String("1");</code>，这句代码中现在生成了2最终个对象，是字符串常量池中的“1” 和 Heap 中的 s3引用指向的对象。中间还有2个匿名的<code>new String("1")</code>我们不去讨论它们。此时s3引用对象内容是"11"，但此时常量池中是没有 “11”对象的。</p></li>
<li><p>接下来<code>s3.intern();</code>这一句代码，是将 s3中的“11”字符串放入 String 常量池中，因为此时常量池中不存在“11”字符串，因此常规做法是跟 jdk6 图中表示的那样，在常量池中生成一个 &ldquo;11&rdquo; 的对象，关键点是 jdk7 中常量池不在 Perm 区域了。所以常量池中不需要再存储一份对象了，可以直接存储堆中的引用。这份引用指向 s3 引用的对象。 也就是说引用地址是相同的。</p></li>
<li><p>最后<code>String s4 = "11";</code> 这句代码中"11"是显示声明的，因此会直接去常量池中创建，创建的时候发现已经有这个对象了，此时也就是指向 s3 引用对象的一个引用。所以 s4 引用就指向和 s3 一样了。因此最后的比较 <code>s3 == s4</code> 是 true。</p></li>
</ul>


<p>再看 s 和 s2 对象。</p>

<ul>
<li><p><code>String s = new String("1");</code> 第一句代码，生成了2个对象。常量池中的“1” 和 Heap 中的字符串对象。<code>s.intern();</code> s 对象去常量池中寻找后发现 “1” 已经在常量池里了。 &ndash; 这一点与s3/s4不一样。</p></li>
<li><p>接下来<code>String s2 = "1";</code> 这句代码是生成一个 s2的引用指向常量池中的“1”对象。 结果就是 s 和 s2 的引用地址明显不同。&ndash; ？？？？？</p></li>
</ul>


<p><img src="http://alphawang.github.io/images/post/2014/12/string-intern-jdk7.png" alt="user icon" /></p>

<p>来看第二段代码：</p>

<ul>
<li><p>第一段代码和第二段代码的改变就是 <code>s3.intern();</code> 的顺序是放在<code>String s4 = "11";</code>后了。这样，首先执行<code>String s4 = "11";</code>声明 s4 的时候常量池中是不存在“11”对象的，执行完毕后，“11“对象是 s4 声明产生的新对象。然后再执行<code>s3.intern();</code>时，常量池中“11”对象已经存在了，因此 s3 和 s4 的引用是不同的。</p></li>
<li><p>第二段代码中的 s 和 s2 代码中，<code>s.intern();</code>，这一句往后放也不会有什么影响了，因为对象池中在执行第一句代码<code>String s = new String("1");</code>的时候已经生成“1”对象了。下边的s2声明都是直接从常量池中取地址引用的。 s 和 s2 的引用地址是不会相等的。</p></li>
</ul>


<h3>小结</h3>

<p>从上述的例子代码可以看出<strong> jdk7 版本对 intern 操作和常量池都做了一定的修改</strong>。主要包括2点：</p>

<ul>
<li><p>将String常量池 从 Perm 区移动到了 Java Heap区。</p></li>
<li><p>调用<code>String#intern()</code> 方法时，如果存在堆中的对象，会直接保存对象的引用，而不会重新创建对象。</p></li>
</ul>


<h2>使用场景</h2>

<h3>正例</h3>

<p>如果用到了大量相同的String，那么可以使用<code>String#intern()</code>，例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">MAX</span> <span class="o">=</span> <span class="mi">1000</span> <span class="o">*</span> <span class="mi">10000</span><span class="o">;</span>
</span><span class='line'><span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">[</span><span class="n">MAX</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Integer</span><span class="o">[]</span> <span class="n">DB_DATA</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Integer</span><span class="o">[</span><span class="mi">10</span><span class="o">];</span>
</span><span class='line'>    <span class="n">Random</span> <span class="n">random</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Random</span><span class="o">(</span><span class="mi">10</span> <span class="o">*</span> <span class="mi">10000</span><span class="o">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">DB_DATA</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">DB_DATA</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kt">long</span> <span class="n">t</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">MAX</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//arr[i] = new String(String.valueOf(DB_DATA[i % DB_DATA.length]));</span>
</span><span class='line'>         <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">String</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">DB_DATA</span><span class="o">[</span><span class="n">i</span> <span class="o">%</span> <span class="n">DB_DATA</span><span class="o">.</span><span class="na">length</span><span class="o">])).</span><span class="na">intern</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">((</span><span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">-</span> <span class="n">t</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot;ms&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">gc</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行的参数是：<code>-Xmx2g -Xms2g -Xmn1500M</code></p>

<ul>
<li>不使用 intern 的代码生成了1000w 个字符串，占用了大约640m 空间。</li>
<li>使用了 intern 的代码生成了1345个字符串，占用总空间 133k 左右。</li>
</ul>


<p>其实通过观察程序中只是用到了10个字符串，所以准确计算后应该是正好相差100w 倍。虽然例子有些极端，但确实能准确反应出<strong> intern 使用后产生的巨大空间节省</strong>。</p>

<p>另外，使用了 intern 方法后时间上有了一些增长。这是因为程序中每次都是用了 <code>new String</code> 后，然后又进行 intern 操作的耗时时间，这一点如果在内存空间充足的情况下确实是无法避免的，但我们平时使用时，内存空间肯定不是无限大的，<strong>不使用 intern 占用空间导致 jvm 垃圾回收的时间是要远远大于这点时间的</strong>。</p>

<h3>反例</h3>

<p>上文提到：
在 jdk6中<code>StringTable</code>是固定的，就是1009的长度，<strong>所以如果常量池中的字符串过多就会导致效率下降很快</strong>。在jdk7中，<code>StringTable</code>的长度可以通过一个参数指定：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">-</span><span class="nl">XX:</span><span class="n">StringTableSize</span><span class="o">=</span><span class="mi">99991</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以不能无用intern，把太多字符串放到常量池中。</p>

<h2>Reference</h2>

<p><a href="http://tech.meituan.com/in_depth_understanding_string_intern.html">http://tech.meituan.com/in_depth_understanding_string_intern.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning JDK Source Code: Positive Examples]]></title>
    <link href="http://alphawang.github.io/blog/learning-jdk-positive-examples/"/>
    <updated>2014-12-02T16:21:09+08:00</updated>
    <id>http://alphawang.github.io/blog/learning-jdk-positive-examples</id>
    <content type="html"><![CDATA[<p>本文记录了一些Java源码中的良好编程习惯、运用的设计模式。</p>

<!--more-->


<h1>编程习惯</h1>

<h2>1. 用工厂方法替代构造函数</h2>

<h3>Boolean.valueOf()</h3>

<p>通过一个boolean简单类型，构造Boolean对象引用。</p>

<blockquote><p><strong>优点：无需每次被调用时都创建一个新对象。同时使得类可以严格控制在哪个时刻有哪些实例存在 </strong></p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Returns a &lt;code&gt;Boolean&lt;/code&gt; with a value represented by the</span>
</span><span class='line'><span class="cm"> * specified string.  The &lt;code&gt;Boolean&lt;/code&gt; returned represents a</span>
</span><span class='line'><span class="cm"> * true value if the string argument is not &lt;code&gt;null&lt;/code&gt;</span>
</span><span class='line'><span class="cm"> * and is equal, ignoring case, to the string {@code &quot;true&quot;}.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @param   s   a string.</span>
</span><span class='line'><span class="cm"> * @return  the &lt;code&gt;Boolean&lt;/code&gt; value represented by the string.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Boolean</span> <span class="nf">valueOf</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">toBoolean</span><span class="o">(</span><span class="n">s</span><span class="o">)</span> <span class="o">?</span> <span class="n">TRUE</span> <span class="o">:</span> <span class="n">FALSE</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>静态工厂方法Boolean.valueOf(String)几乎总是比构造函数Boolean(String)更可取。构造函数每次被调用时都会创建一个新对象，而静态工厂方法则从来不要求这样做，实际上也不会这么做。</p>

<h3>BigInteger.probablePrime()</h3>

<p>构造方法<code>BigInteger(int, int, Random)</code>返回一个可能为素数的BigInteger，而用一个名为<code>BigInteger.probablePrime()</code>的静态工厂方法就更好。（JDK1.4最终增加了这个方法。）</p>

<blockquote><p><strong>优点：方法名对客户端更友好</strong></p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BigInteger</span> <span class="kd">extends</span> <span class="n">Number</span> <span class="kd">implements</span> <span class="n">Comparable</span><span class="o">&lt;</span><span class="n">BigInteger</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>   <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Returns a positive BigInteger that is probably prime, with the</span>
</span><span class='line'><span class="cm">     * specified bitLength. The probability that a BigInteger returned</span>
</span><span class='line'><span class="cm">     * by this method is composite does not exceed 2&lt;sup&gt;-100&lt;/sup&gt;.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">BigInteger</span> <span class="nf">probablePrime</span><span class="o">(</span><span class="kt">int</span> <span class="n">bitLength</span><span class="o">,</span> <span class="n">Random</span> <span class="n">rnd</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">bitLength</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="o">)</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArithmeticException</span><span class="o">(</span><span class="s">&quot;bitLength &lt; 2&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="c1">// The cutoff of 95 was chosen empirically for best performance</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">(</span><span class="n">bitLength</span> <span class="o">&lt;</span> <span class="n">SMALL_PRIME_THRESHOLD</span> <span class="o">?</span>
</span><span class='line'>                <span class="n">smallPrime</span><span class="o">(</span><span class="n">bitLength</span><span class="o">,</span> <span class="n">DEFAULT_PRIME_CERTAINTY</span><span class="o">,</span> <span class="n">rnd</span><span class="o">)</span> <span class="o">:</span>
</span><span class='line'>                <span class="n">largePrime</span><span class="o">(</span><span class="n">bitLength</span><span class="o">,</span> <span class="n">DEFAULT_PRIME_CERTAINTY</span><span class="o">,</span> <span class="n">rnd</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>EnumSet</h3>

<p>JDK1.5引入的<code>java.util.EnumSet</code>类没有public构造函数，只有静态工厂方法。根据底层枚举类型的大小，这些工厂方法可以返回两种实现：</p>

<ul>
<li>如果拥有64个或更少的元素（大多数枚举类型都是这样），静态工厂方法返回一个<code>RegularEnumSet</code>实例，用单个<code>long</code>来支持；</li>
<li>如果枚举类型拥有65个或更多的元素，静态工厂方法则返回<code>JumboEnumSet</code>实例，用<code>long数组</code>来支持。</li>
</ul>


<blockquote><p><strong>优点：静态工厂方法能返回任意子类型的对象。可以根据参数的不同，而返回不同的类型。</strong></p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">EnumSet</span><span class="o">&lt;</span><span class="n">E</span> <span class="kd">extends</span> <span class="n">Enum</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;&gt;</span> <span class="kd">extends</span> <span class="n">AbstractSet</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="kd">implements</span> <span class="n">Cloneable</span><span class="o">,</span> <span class="n">java</span><span class="o">.</span><span class="na">io</span><span class="o">.</span><span class="na">Serializable</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Creates an empty enum set with the specified element type.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @param elementType the class object of the element type for this enum</span>
</span><span class='line'><span class="cm">     *     set</span>
</span><span class='line'><span class="cm">     * @throws NullPointerException if &lt;tt&gt;elementType&lt;/tt&gt; is null</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">E</span> <span class="kd">extends</span> <span class="n">Enum</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;&gt;</span> <span class="n">EnumSet</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="nf">noneOf</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">elementType</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Enum</span><span class="o">[]</span> <span class="n">universe</span> <span class="o">=</span> <span class="n">getUniverse</span><span class="o">(</span><span class="n">elementType</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">universe</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ClassCastException</span><span class="o">(</span><span class="n">elementType</span> <span class="o">+</span> <span class="s">&quot; not an enum&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">universe</span><span class="o">.</span><span class="na">length</span> <span class="o">&lt;=</span> <span class="mi">64</span><span class="o">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="n">RegularEnumSet</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;(</span><span class="n">elementType</span><span class="o">,</span> <span class="n">universe</span><span class="o">);</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="n">JumboEnumSet</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;(</span><span class="n">elementType</span><span class="o">,</span> <span class="n">universe</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">RegularEnumSet</span><span class="o">&lt;</span><span class="n">E</span> <span class="kd">extends</span> <span class="n">Enum</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;&gt;</span> <span class="kd">extends</span> <span class="n">EnumSet</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">JumboEnumSet</span><span class="o">&lt;</span><span class="n">E</span> <span class="kd">extends</span> <span class="n">Enum</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;&gt;</span> <span class="kd">extends</span> <span class="n">EnumSet</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Collections.unmodifiableMap(Map)</h3>

<p>Java集合框架中有32个集合接口的便利实现，提供不可修改的集合、同步集合等等。几乎所有的实现都通过一个不可实例化类（<code>java.util.Collections</code>）中的静态工厂方法导出，返回对象的类都是非public的。</p>

<blockquote><p><strong>优点：静态工厂方法能返回任意子类型的对象。可以返回一个对象而无需使相应的类public。用这种方式隐藏实现类能够产生一个非常紧凑的API</strong></p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Collections</span> <span class="o">{</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Returns an unmodifiable view of the specified map.  This method</span>
</span><span class='line'><span class="cm">     * allows modules to provide users with &quot;read-only&quot; access to internal</span>
</span><span class='line'><span class="cm">     * maps.  Query operations on the returned map &quot;read through&quot;</span>
</span><span class='line'><span class="cm">     * to the specified map, and attempts to modify the returned</span>
</span><span class='line'><span class="cm">     * map, whether direct or via its collection views, result in an</span>
</span><span class='line'><span class="cm">     * &lt;tt&gt;UnsupportedOperationException&lt;/tt&gt;.&lt;p&gt;</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="nf">unmodifiableMap</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">K</span><span class="o">,</span> <span class="o">?</span> <span class="kd">extends</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">m</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="n">UnmodifiableMap</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;(</span><span class="n">m</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">UnmodifiableMap</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;,</span> <span class="n">Serializable</span> <span class="o">{</span>
</span><span class='line'>      <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>2. 私有化构造函数，实现Singleton</h2>

<h3>Arrays</h3>

<p>这种工具类设计出来并不是为了实例化它。然而，如果不显式地编写构造函数，编译器则会提供一个公共的无参数的默认构造方法。
所以将构造函数私有化：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Arrays</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Suppresses default constructor, ensuring non-instantiability.</span>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">Arrays</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然，还可以在这个私有构造器内部加上 <code>throw new AssertionError()</code>，可以确保该方法不会再类内部被意外调用。</p>

<p><strong>这种习惯用法的副作用是类不能被子类化了</strong>。子类的所有构造函数必须首先隐式或显式地调用父类构造函数，而在这种用法下，子类就没有可访问的父类构造函数可调用了。</p>

<h3>TimeUnit</h3>

<p><code>java.util.concurrent.TimeUnit</code>使用枚举来实现Singleton：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">enum</span> <span class="n">TimeUnit</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">MILLISECONDS</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">long</span> <span class="nf">toNanos</span><span class="o">(</span><span class="kt">long</span> <span class="n">d</span><span class="o">)</span>   <span class="o">{</span> <span class="k">return</span> <span class="nf">x</span><span class="o">(</span><span class="n">d</span><span class="o">,</span> <span class="n">C2</span><span class="o">/</span><span class="n">C0</span><span class="o">,</span> <span class="n">MAX</span><span class="o">/(</span><span class="n">C2</span><span class="o">/</span><span class="n">C0</span><span class="o">));</span> <span class="o">}</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">long</span> <span class="nf">toMicros</span><span class="o">(</span><span class="kt">long</span> <span class="n">d</span><span class="o">)</span>  <span class="o">{</span> <span class="k">return</span> <span class="nf">x</span><span class="o">(</span><span class="n">d</span><span class="o">,</span> <span class="n">C2</span><span class="o">/</span><span class="n">C1</span><span class="o">,</span> <span class="n">MAX</span><span class="o">/(</span><span class="n">C2</span><span class="o">/</span><span class="n">C1</span><span class="o">));</span> <span class="o">}</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">long</span> <span class="nf">toMillis</span><span class="o">(</span><span class="kt">long</span> <span class="n">d</span><span class="o">)</span>  <span class="o">{</span> <span class="k">return</span> <span class="n">d</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">long</span> <span class="nf">toSeconds</span><span class="o">(</span><span class="kt">long</span> <span class="n">d</span><span class="o">)</span> <span class="o">{</span> <span class="k">return</span> <span class="n">d</span><span class="o">/(</span><span class="n">C3</span><span class="o">/</span><span class="n">C2</span><span class="o">);</span> <span class="o">}</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">long</span> <span class="nf">toMinutes</span><span class="o">(</span><span class="kt">long</span> <span class="n">d</span><span class="o">)</span> <span class="o">{</span> <span class="k">return</span> <span class="n">d</span><span class="o">/(</span><span class="n">C4</span><span class="o">/</span><span class="n">C2</span><span class="o">);</span> <span class="o">}</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">long</span> <span class="nf">toHours</span><span class="o">(</span><span class="kt">long</span> <span class="n">d</span><span class="o">)</span>   <span class="o">{</span> <span class="k">return</span> <span class="n">d</span><span class="o">/(</span><span class="n">C5</span><span class="o">/</span><span class="n">C2</span><span class="o">);</span> <span class="o">}</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">long</span> <span class="nf">toDays</span><span class="o">(</span><span class="kt">long</span> <span class="n">d</span><span class="o">)</span>    <span class="o">{</span> <span class="k">return</span> <span class="n">d</span><span class="o">/(</span><span class="n">C6</span><span class="o">/</span><span class="n">C2</span><span class="o">);</span> <span class="o">}</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">long</span> <span class="nf">convert</span><span class="o">(</span><span class="kt">long</span> <span class="n">d</span><span class="o">,</span> <span class="n">TimeUnit</span> <span class="n">u</span><span class="o">)</span> <span class="o">{</span> <span class="k">return</span> <span class="n">u</span><span class="o">.</span><span class="na">toMillis</span><span class="o">(</span><span class="n">d</span><span class="o">);</span> <span class="o">}</span>
</span><span class='line'>        <span class="kt">int</span> <span class="nf">excessNanos</span><span class="o">(</span><span class="kt">long</span> <span class="n">d</span><span class="o">,</span> <span class="kt">long</span> <span class="n">m</span><span class="o">)</span> <span class="o">{</span> <span class="k">return</span> <span class="mi">0</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">},</span>
</span><span class='line'>    <span class="n">SECONDS</span> <span class="o">{</span>
</span><span class='line'>       <span class="o">.....</span>
</span><span class='line'>    <span class="o">},</span>
</span><span class='line'>    <span class="n">MINUTES</span> <span class="o">{</span>
</span><span class='line'>       <span class="o">.....</span>
</span><span class='line'>    <span class="o">},</span>
</span><span class='line'>    <span class="n">HOURS</span> <span class="o">{</span>
</span><span class='line'>       <span class="o">......</span>
</span><span class='line'>    <span class="o">},</span>
</span><span class='line'>    <span class="n">DAYS</span> <span class="o">{</span>
</span><span class='line'>       <span class="o">.....</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// TimeUnit.sleep()用来替代Thread.sleep()</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sleep</span><span class="o">(</span><span class="kt">long</span> <span class="n">timeout</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">timeout</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">long</span> <span class="n">ms</span> <span class="o">=</span> <span class="n">toMillis</span><span class="o">(</span><span class="n">timeout</span><span class="o">);</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">ns</span> <span class="o">=</span> <span class="n">excessNanos</span><span class="o">(</span><span class="n">timeout</span><span class="o">,</span> <span class="n">ms</span><span class="o">);</span>
</span><span class='line'>            <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">ms</span><span class="o">,</span> <span class="n">ns</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>3. 避免创建不必要的对象</h2>

<h3>Map.keySet()</h3>

<p>Map接口的keySet()方法返回Map对象的一个Set视图，包含该Map的所有key。
看起来好像每次调用keySet()都需要创建一个新的Set实例。而实际上，虽然返回的Set通常是可变的，但返回的对象在功能上是等同的：<strong>如果其中一个返回对象改变，其他对象也会改变，因为他们的底层都是同一个Map实例</strong>。虽然创建多个KeySet视图对象并没有害处，但也没有必要。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">AbstractMap</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Each of these fields are initialized to contain an instance of the</span>
</span><span class='line'><span class="cm">     * appropriate view the first time this view is requested.  The views are</span>
</span><span class='line'><span class="cm">     * stateless, so there&#39;s no reason to create more than one of each.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>   <span class="kd">transient</span> <span class="kd">volatile</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">K</span><span class="o">&gt;</span> <span class="n">keySet</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>   <span class="kd">public</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">K</span><span class="o">&gt;</span> <span class="nf">keySet</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">keySet</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">keySet</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AbstractSet</span><span class="o">&lt;</span><span class="n">K</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>        <span class="o">.....</span>
</span><span class='line'>        <span class="o">};</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">keySet</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意在构造keySet之前 对齐进行了null检查；只有当它是null时才会初始化。</p>

<h2>4. 消除无用的对象引用</h2>

<h3>LinkedHashMap.removeEldestEntry()</h3>

<p>缓存实体的生命周期不容易确定，随着时间推移，实体的价值越来越低。在这种情况下，缓存应该不定期地清理无用的实体。可以通过一个后台线程来清理（可能是<code>Timer</code>或<code>ScheduledThreadPoolExecutor</code>），也可以在给缓存添加新实体时进行清理。</p>

<p>LikedHashMap可利用其removeEldestEntry，删除较老的实体：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LinkedHashMap</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="kd">extends</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="kd">implements</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>   <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * It causes newly allocated entry to get inserted at the end of the linked list and</span>
</span><span class='line'><span class="cm">     * removes the eldest entry if appropriate.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">addEntry</span><span class="o">(</span><span class="kt">int</span> <span class="n">hash</span><span class="o">,</span> <span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="n">V</span> <span class="n">value</span><span class="o">,</span> <span class="kt">int</span> <span class="n">bucketIndex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">createEntry</span><span class="o">(</span><span class="n">hash</span><span class="o">,</span> <span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">,</span> <span class="n">bucketIndex</span><span class="o">);</span>
</span><span class='line'>        <span class="c1">// Remove eldest entry if instructed, else grow capacity if appropriate</span>
</span><span class='line'>        <span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">eldest</span> <span class="o">=</span> <span class="n">header</span><span class="o">.</span><span class="na">after</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">removeEldestEntry</span><span class="o">(</span><span class="n">eldest</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">removeEntryForKey</span><span class="o">(</span><span class="n">eldest</span><span class="o">.</span><span class="na">key</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">size</span> <span class="o">&gt;=</span> <span class="n">threshold</span><span class="o">)</span>
</span><span class='line'>                <span class="n">resize</span><span class="o">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">table</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Returns &lt;tt&gt;true&lt;/tt&gt; if this map should remove its eldest entry.</span>
</span><span class='line'><span class="cm">     * This method is invoked by &lt;tt&gt;put&lt;/tt&gt; and &lt;tt&gt;putAll&lt;/tt&gt; after</span>
</span><span class='line'><span class="cm">     * inserting a new entry into the map.  </span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * Sample use: </span>
</span><span class='line'><span class="cm">     * &lt;pre&gt;</span>
</span><span class='line'><span class="cm">     *     private static final int MAX_ENTRIES = 100;</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     *     protected boolean removeEldestEntry(Map.Entry eldest) {</span>
</span><span class='line'><span class="cm">     *        return size() &gt; MAX_ENTRIES;</span>
</span><span class='line'><span class="cm">     *     }</span>
</span><span class='line'><span class="cm">     * &lt;/pre&gt;</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">boolean</span> <span class="nf">removeEldestEntry</span><span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">eldest</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>——可以继承LinkedHashMap，覆盖其removeEldestEntry方法。</p>

<blockquote><p>注：如果想要缓存中的对象只要不被引用，就自动清理；则可以用WeakHashMap</p></blockquote>

<h2>5. 如果指定了toString返回值的格式，则应该提供一个对应的静态工厂方法或构造函数</h2>

<h3>BigInteger.toString()</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Returns the String representation of this BigInteger in the</span>
</span><span class='line'><span class="cm"> * given radix.  </span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">(</span><span class="kt">int</span> <span class="n">radix</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Returns the decimal String representation of this BigInteger.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">toString</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>对应的构造函数如下。这样程序员能容易地在对象及其字符串表示之间来回转换</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Translates the decimal String representation of a BigInteger into a</span>
</span><span class='line'><span class="cm"> * BigInteger.  </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="nf">BigInteger</span><span class="o">(</span><span class="n">String</span> <span class="n">val</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">(</span><span class="n">val</span><span class="o">,</span> <span class="mi">10</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Translates the String representation of a BigInteger in the specified</span>
</span><span class='line'><span class="cm"> * radix into a BigInteger.  </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="nf">BigInteger</span><span class="o">(</span><span class="n">String</span> <span class="n">val</span><span class="o">,</span> <span class="kt">int</span> <span class="n">radix</span><span class="o">)</span> <span class="o">{</span>
</span></code></pre></td></tr></table></div></figure>


<h2>6. 不可变对象</h2>

<h3>共享不可变对象内部信息:  BigInteger.negate()：</h3>

<blockquote><p>我们可以自由地共享不可变对象，还可以共享他们的内部信息。</p></blockquote>

<p>【例】BigInteger类内部使用了一个符号数值表示法（sign-magnitude representation），符号用一个int表示，数值则用一个int数组表示。<code>negate()</code>方法会创建一个数值相同但符号相反的新<code>BigInteger</code>，该方法不需要拷贝数组，新创建的BigInteger只需要指向源对象中的数组即可。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Returns a BigInteger whose value is {@code (-this)}.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @return {@code -this}</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="n">BigInteger</span> <span class="nf">negate</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="nf">BigInteger</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">mag</span><span class="o">,</span> <span class="o">-</span><span class="k">this</span><span class="o">.</span><span class="na">signum</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>鼓励重用现有不可变实例: BigInteger.ZERO</h3>

<p><strong>不可变对象生来就是线程安全的，他们不需要同步</strong>。当多个线程并发访问不可变对象时，他们不会遭到破坏。这无疑是实现线程安全的最容易的方法。实际上，不会有线程能观察到其他线程对不可变对象的影响。所以不可变对象可以被自由地共享。</p>

<p>不可变类应当利用这种优势，鼓励客户端尽可能重用现有实例。一个简单的方法是为常用的值提供public static final的常量。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">BigInteger</span> <span class="n">ZERO</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">BigInteger</span><span class="o">(</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">0</span><span class="o">],</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">BigInteger</span> <span class="n">ONE</span> <span class="o">=</span> <span class="n">valueOf</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">BigInteger</span> <span class="n">TEN</span> <span class="o">=</span> <span class="n">valueOf</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>为不可变类提供companion class:  String vs. StringBuilder</h3>

<p>不可变类的一个缺点是，对于每个不同的值都需要一个单独的对象。那么在执行复杂的多步操作时，每一步都会创建一个新的对象。</p>

<p>通过提供<code>companion class</code>可以解决这个问题。例如当需要对<code>String</code>执行复杂操作时，建议使用<code>StringBuilder</code>。</p>

<h3>不可变类中可以有nonfinal域，用于存储缓存: String.hashCode()：</h3>

<p>不可变类所有域必须是final的。实际上这些规则比较强硬，为了提供性能可以有所放松。实际上应该是没有方法能够对类的状态产生外部可见的改变（no method may produce an externally visible change in the object’s state）。</p>

<p>然而，一些不可变类拥有一个或多个nonfinal域，用于缓存昂贵计算的结果。这个技巧可以很好地工作，因为对象是不可变的，保证了相同的计算总是返回同样的结果。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/** Cache the hash code for the string */</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">int</span> <span class="n">hash</span><span class="o">;</span> <span class="c1">// Default to 0</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">int</span> <span class="nf">hashCode</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">h</span> <span class="o">=</span> <span class="n">hash</span><span class="o">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">count</span><span class="o">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">h</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">len</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">off</span> <span class="o">=</span> <span class="n">offset</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">val</span><span class="o">[]</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">h</span> <span class="o">=</span> <span class="mi">31</span><span class="o">*</span><span class="n">h</span> <span class="o">+</span> <span class="n">val</span><span class="o">[</span><span class="n">off</span><span class="o">++];</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">hash</span> <span class="o">=</span> <span class="n">h</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">h</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>设计模式</h1>

<h2>1. Template Method</h2>

<h3>Arrays.sort()</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Arrays  </span>
</span><span class='line'>   <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">sort</span><span class="o">(</span><span class="n">Object</span><span class="o">[]</span> <span class="n">a</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="o">...</span>
</span><span class='line'>        <span class="n">ComparableTimSort</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ComparableTimSort  </span>
</span><span class='line'>   <span class="kd">static</span> <span class="kt">void</span> <span class="nf">sort</span><span class="o">(</span><span class="n">Object</span><span class="o">[]</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">lo</span><span class="o">,</span> <span class="kt">int</span> <span class="n">hi</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="o">...</span>
</span><span class='line'>        <span class="n">binarySort</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">lo</span><span class="o">,</span> <span class="n">hi</span><span class="o">,</span> <span class="n">lo</span> <span class="o">+</span> <span class="n">initRunLen</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//算法框架  </span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">binarySort</span><span class="o">(</span><span class="n">Object</span><span class="o">[]</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">lo</span><span class="o">,</span> <span class="kt">int</span> <span class="n">hi</span><span class="o">,</span> <span class="kt">int</span> <span class="n">start</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">assert</span> <span class="n">lo</span> <span class="o">&lt;=</span> <span class="n">start</span> <span class="o">&amp;&amp;</span> <span class="n">start</span> <span class="o">&lt;=</span> <span class="n">hi</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">start</span> <span class="o">==</span> <span class="n">lo</span><span class="o">)</span>
</span><span class='line'>        <span class="n">start</span><span class="o">++;</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span> <span class="o">;</span> <span class="n">start</span> <span class="o">&lt;</span> <span class="n">hi</span><span class="o">;</span> <span class="n">start</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">&quot;unchecked&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="n">Comparable</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">pivot</span> <span class="o">=</span> <span class="o">(</span><span class="n">Comparable</span><span class="o">)</span> <span class="n">a</span><span class="o">[</span><span class="n">start</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Set left (and right) to the index where a[start] (pivot) belongs  </span>
</span><span class='line'>        <span class="o">....</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="o">(</span><span class="n">left</span> <span class="o">+</span> <span class="n">right</span><span class="o">)</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">pivot</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">a</span><span class="o">[</span><span class="n">mid</span><span class="o">])</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="c1">//compareTo这个算法步骤，是由各个Comparable的子类定义的  </span>
</span><span class='line'>                <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span><span class="o">;</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="o">....</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Q：这个算法框架并不是设计在父类中，而是在一个工具类中</p>

<p>A：是的，与教科书上模板方法的定义有差异；因为sort要适用于所有数组，所以提供了一个Arrays工具类。但仍然是模板方法模式</p>

<h3>InputStream.read()</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="c1">//算法框架  </span>
</span><span class='line'> <span class="kd">public</span> <span class="kt">int</span> <span class="nf">read</span><span class="o">(</span><span class="kt">byte</span> <span class="n">b</span><span class="o">[],</span> <span class="kt">int</span> <span class="n">off</span><span class="o">,</span> <span class="kt">int</span> <span class="n">len</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">read</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//算法步骤由子类实现  </span>
</span><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">int</span> <span class="nf">read</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>JFrame.paint()</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// JFrame  </span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="n">Graphics</span> <span class="n">g</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">paint</span><span class="o">(</span><span class="n">g</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyFrame</span> <span class="kd">extends</span> <span class="n">JFrame</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">MyFrame</span><span class="o">(){</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">();</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">setDefaultCloseOperation</span><span class="o">(</span><span class="n">JFrame</span><span class="o">.</span><span class="na">EXIT_ON_CLOSE</span><span class="o">);</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">setSize</span><span class="o">(</span><span class="mi">300</span><span class="o">,</span><span class="mi">300</span><span class="o">);</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">setVisible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">paint</span><span class="o">(</span><span class="n">Graphics</span> <span class="n">g</span><span class="o">){</span> <span class="c1">//重定义算法步骤  </span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">paint</span><span class="o">(</span><span class="n">g</span><span class="o">);</span>
</span><span class='line'>        <span class="n">g</span><span class="o">.</span><span class="na">drawString</span><span class="o">(</span><span class="s">&quot;I rule !&quot;</span><span class="o">,</span> <span class="mi">100</span><span class="o">,</span> <span class="mi">100</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
</span><span class='line'>        <span class="n">MyFrame</span> <span class="n">frame</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">MyFrame</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Applet.init()/start()/stop()/destroy()/paint()</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Applet  </span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span> <span class="c1">//什么也不做的hook  </span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Beans  </span>
</span><span class='line'>   <span class="kd">public</span> <span class="kd">static</span> <span class="n">Object</span> <span class="nf">instantiate</span><span class="o">(</span><span class="n">ClassLoader</span> <span class="n">cls</span><span class="o">,</span> <span class="n">String</span> <span class="n">beanName</span><span class="o">,</span>
</span><span class='line'>                    <span class="n">BeanContext</span> <span class="n">beanContext</span><span class="o">,</span> <span class="n">AppletInitializer</span> <span class="n">initializer</span><span class="o">)</span>
</span><span class='line'>                        <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">ClassNotFoundException</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// If it was deserialized then it was already init-ed.  </span>
</span><span class='line'>                <span class="c1">// Otherwise we need to initialize it.  </span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="o">(!</span><span class="n">serialized</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="c1">// We need to set a reasonable initial size, as many  </span>
</span><span class='line'>                    <span class="c1">// applets are unhappy if they are started without  </span>
</span><span class='line'>                    <span class="c1">// having been explicitly sized.  </span>
</span><span class='line'>                    <span class="n">applet</span><span class="o">.</span><span class="na">setSize</span><span class="o">(</span><span class="mi">100</span><span class="o">,</span><span class="mi">100</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">applet</span><span class="o">.</span><span class="na">init</span><span class="o">();</span> <span class="c1">//调用hook  </span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Applet中的init()/start()/stop()/destroy()/paint()这些方法，都是hook。</p>

<h2>2. Iterator</h2>

<h3>Collection.iterator()</h3>

<h2>3. Adapter</h2>

<h3>RunnableAdapter</h3>

<p>完整类名：<code>java.util.concurrent.Executors.RunnableAdapter&lt;T&gt;</code></p>

<p>我们知道<code>FutureTask</code>接受一个<code>Callable</code>参数，那如果我们现有的是<code>Runnable</code>该怎么办呢？
<code>FutureTask</code>本身提供了适配：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Creates a &lt;tt&gt;FutureTask&lt;/tt&gt; that will upon running, execute the given &lt;tt&gt;Callable&lt;/tt&gt;.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="nf">FutureTask</span><span class="o">(</span><span class="n">Callable</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">callable</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">sync</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Sync</span><span class="o">(</span><span class="n">callable</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Creates a &lt;tt&gt;FutureTask&lt;/tt&gt; that will upon running, execute the given &lt;tt&gt;Runnable&lt;/tt&gt;</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="nf">FutureTask</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">runnable</span><span class="o">,</span> <span class="n">V</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">sync</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Sync</span><span class="o">(</span><span class="n">Executors</span><span class="o">.</span><span class="na">callable</span><span class="o">(</span><span class="n">runnable</span><span class="o">,</span> <span class="n">result</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> Executors.callable()返回Adapter对象：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">Callable</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="nf">callable</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">task</span><span class="o">,</span> <span class="n">T</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="n">RunnableAdapter</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;(</span><span class="n">task</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** --Adapter!--</span>
</span><span class='line'><span class="cm"> * A callable that runs given task and returns given result</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">static</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">RunnableAdapter</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="n">Callable</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>  <span class="c1">//Target</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">Runnable</span> <span class="n">task</span><span class="o">;</span> <span class="c1">//Adaptee</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">T</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>    <span class="n">RunnableAdapter</span><span class="o">(</span><span class="n">Runnable</span>  <span class="n">task</span><span class="o">,</span> <span class="n">T</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">task</span> <span class="o">=</span> <span class="n">task</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">result</span> <span class="o">=</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">T</span> <span class="nf">call</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">task</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>AbstractExecutorService.submit()也用到了这个Adapter：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>   <span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">Future</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="nf">submit</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">task</span><span class="o">,</span> <span class="n">T</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">task</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nf">NullPointerException</span><span class="o">();</span>
</span><span class='line'>        <span class="n">RunnableFuture</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">ftask</span> <span class="o">=</span> <span class="n">newTaskFor</span><span class="o">(</span><span class="n">task</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span><span class='line'>        <span class="n">execute</span><span class="o">(</span><span class="n">ftask</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">ftask</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">RunnableFuture</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="nf">newTaskFor</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">runnable</span><span class="o">,</span> <span class="n">T</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="n">FutureTask</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;(</span><span class="n">runnable</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>未完待续。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning JDK Source Code: Negative Examples]]></title>
    <link href="http://alphawang.github.io/blog/learning-jdk-negative-examples/"/>
    <updated>2014-12-01T15:00:45+08:00</updated>
    <id>http://alphawang.github.io/blog/learning-jdk-negative-examples</id>
    <content type="html"><![CDATA[<p>本文记录了一些Java源码中设计不合理之处、违反设计模式之处，以及其他可以改进的地方。</p>

<!--more-->


<h1>1. 构造对象语法</h1>

<h2>参数化类型的构造函数啰嗦</h2>

<p>如果你调用参数化类的构造函数，那么你必须要指定类型参数，即便上下文中已明确了类型参数。这通常要求你连续两次提供类型参数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Map</span> <span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">List</span> <span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">m</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>而假设HashMap提供了如下静态工厂：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span>  <span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">HashMap</span> <span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="nf">newInstance</span><span class="o">(){</span>
</span><span class='line'>   <span class="k">return</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么你就可以讲上文冗长的声明替换为如下这种简洁的形式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Map</span> <span class="o">&lt;</span> <span class="n">String</span><span class="o">,</span> <span class="n">List</span> <span class="o">&lt;</span> <span class="n">String</span> <span class="o">&gt;&gt;</span> <span class="n">m</span> <span class="o">=</span> <span class="n">HashMap</span><span class="o">.</span><span class="na">newInstance</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>补充1：<code>com.google.common.collect.Lists</code>可以解决这个问题：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span> <span class="o">&lt;</span> <span class="n">String</span> <span class="o">&gt;</span> <span class="n">l</span> <span class="o">=</span> <span class="n">Lists</span><span class="o">.</span><span class="na">newArrayList</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>     <span class="kd">public</span>   <span class="kd">static</span>  <span class="n">ArrayList</span>  <span class="nf">newArrayList</span> <span class="o">()</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>         <span class="k">return</span>   <span class="k">new</span>  <span class="nf">ArrayList</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>补充2：Java7做了优化，可以这样声明：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Map</span> <span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">List</span> <span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">m</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<h1>2. 创建了不必要的对象</h1>

<h2>Boolean(String)</h2>

<p><code>Boolean(String)</code>有点多余，因为已经有<strong>静态工厂方法</strong>：<code>Boolean.valueOf(String)</code>，它比Boolean(String)更可取。</p>

<p>构造函数每次被调用时都会创建一个新对象，而静态工厂方法则从来不要求这样做，实际上也不会这么做。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="nf">Boolean</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">(</span><span class="n">toBoolean</span><span class="o">(</span><span class="n">s</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">toBoolean</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">((</span><span class="n">name</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">name</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="s">&quot;true&quot;</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Boolean</span> <span class="nf">valueOf</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">toBoolean</span><span class="o">(</span><span class="n">s</span><span class="o">)</span> <span class="o">?</span> <span class="n">TRUE</span> <span class="o">:</span> <span class="n">FALSE</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Boolean</span> <span class="n">TRUE</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Boolean</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Boolean</span> <span class="n">FALSE</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Boolean</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h1>3. 误用finalize</h1>

<p>要避免用finalize来释放资源，而<strong>应该提供一个显式的终止方法</strong>。例如FileInputStream.close();</p>

<p><strong>finalizer的作用之一是，可以充当“安全网”，以防对象所有者忘记调用显式的终止方法</strong>。虽然不能保证finalizer会被及时调用，但当客户端没有调用显式终止方法时，迟一点释放资源总比不释放好。不过如果finalizer发现有未被终止的资源，则必须打印一条警告，表明客户端代码有bug，需要修复。</p>

<p>唯一声称保证finalizer()会被执行的方法是<code>System.runFinalizersOnExit</code>，以及<code>Runtime.runFinalizersOnExit</code>。</p>

<blockquote><p>但这两个方法都有致命缺陷并且都已弃用。</p></blockquote>

<h2>FileInputStream.finalize()</h2>

<p>JDK有四个类（<code>FileInputStream</code>、<code>FileOutputStream</code>、<code>Timer</code>、<code>Connection</code>）使用了finalizer作为安全网，以防显式终止方法未被调用。不幸的是，这些finalizer都没有打印警告。当API发布后，这种警告一般就不能添加到API了，因为可能破坏已有的客户端代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Ensures that the &lt;code&gt;close&lt;/code&gt; method of this file input stream is</span>
</span><span class='line'><span class="cm"> * called when there are no more references to it.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @exception  IOException  if an I/O error occurs.</span>
</span><span class='line'><span class="cm"> * @see        java.io.FileInputStream#close()</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">finalize</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// should log an error!</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">((</span><span class="n">fd</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">&amp;&amp;</span>  <span class="o">(</span><span class="n">fd</span> <span class="o">!=</span> <span class="n">FileDescriptor</span><span class="o">.</span><span class="na">in</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">close</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>4. 违反equals约定</h1>

<h2>URL.equals()</h2>

<p><code>java.net.UR</code>L的equals方法依赖于对URL中主机的IP地址的比较，而将主机名转译成IP地址需要访问网络，随着时间推移，并不保证能返回相同的结果。</p>

<p>——<strong>违反一致性</strong>。这就会导致URL的equals方法违反约定，并且已经在实践中引起问题了。</p>

<blockquote><p>不幸的是，由于兼容性需求，这一行为无法改变。除了少数例外情况，equals方法必须对驻留在内存中的对象进行确定性计算。</p></blockquote>

<h2>Timestamp.euals()</h2>

<p><code>java.sql.Timestamp</code>扩展了<code>java.util.Date</code>类并增加了<code>nanoseconds</code>字段。其equals方法<strong>违反了对称性</strong>：如果Timestamp和Date被用于同一个集合中，或以其他什么方式混在一起使用，则会引起错误的行为。</p>

<blockquote><p>无法在扩展可实例化类（即非抽象类）的时候，增加一个值组件，同时又保证equals约定。</p></blockquote>

<p><code>Timestamp</code>有一个免责声明，提醒程序员不要混用Date和Timestamp。虽然只要不混用他们就不会有麻烦，但是谁都不能阻止你混用他们，而结果导致的错误将会很难调试。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Note: This method is not symmetric with respect to the</span>
</span><span class='line'><span class="cm"> * &lt;code&gt;equals(Object)&lt;/code&gt; method in the base class.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Object</span> <span class="n">ts</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">ts</span> <span class="k">instanceof</span> <span class="n">Timestamp</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">equals</span><span class="o">((</span><span class="n">Timestamp</span><span class="o">)</span><span class="n">ts</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>5. compareTo与equals不一致</h1>

<p>compareTo方法的等同性测试必须与equals方法的结果相同。如果遵守了这一条，则称compareTo方法所施加的顺序与equals一致；反之则称为与equals不一致。</p>

<p>当然与equals不一致的compareTo方法仍然是可以工作的。但是，如果一个有序集合包含了该类的元素，则这个集合可能就不能遵守相应集合接口（Collection、Set、Map）的通用约定。这是因为<strong>这些集合接口的通用约定是基于equals方法的，但是有序集合却使用了compareTo而非equals来执行等同性测试</strong>。</p>

<h2>BigDecimal.compareTo()</h2>

<p>BigDecimal类的compareTo方法与equals不一致：</p>

<ul>
<li>如果创建一个<code>HashSet</code>实例，并添加两个元素<code>new BigDecimal("1.0")</code>和<code>new BigDecimal("1.00")</code>，则集合会包含两个元素，因为这两个实例通过equals检测并不相等；</li>
<li>而如果使用<code>TreeSet</code>而非HashSet，则集合中会只包含一个元素，因为这两个实例通过compareTo检测是相等的。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">int</span> <span class="nf">compareTo</span><span class="o">(</span><span class="n">BigDecimal</span> <span class="n">val</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="c1">// Quick path for equal scale and non-inflated case.</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">(</span><span class="n">scale</span> <span class="o">==</span> <span class="n">val</span><span class="o">.</span><span class="na">scale</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="kt">long</span> <span class="n">xs</span> <span class="o">=</span> <span class="n">intCompact</span><span class="o">;</span>
</span><span class='line'>       <span class="kt">long</span> <span class="n">ys</span> <span class="o">=</span> <span class="n">val</span><span class="o">.</span><span class="na">intCompact</span><span class="o">;</span>
</span><span class='line'>       <span class="k">if</span> <span class="o">(</span><span class="n">xs</span> <span class="o">!=</span> <span class="n">INFLATED</span> <span class="o">&amp;&amp;</span> <span class="n">ys</span> <span class="o">!=</span> <span class="n">INFLATED</span><span class="o">)</span>
</span><span class='line'>           <span class="k">return</span> <span class="n">xs</span> <span class="o">!=</span> <span class="n">ys</span> <span class="o">?</span> <span class="o">((</span><span class="n">xs</span> <span class="o">&gt;</span> <span class="n">ys</span><span class="o">)</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">:</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>   <span class="kt">int</span> <span class="n">xsign</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">signum</span><span class="o">();</span>
</span><span class='line'>   <span class="kt">int</span> <span class="n">ysign</span> <span class="o">=</span> <span class="n">val</span><span class="o">.</span><span class="na">signum</span><span class="o">();</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">(</span><span class="n">xsign</span> <span class="o">!=</span> <span class="n">ysign</span><span class="o">)</span>
</span><span class='line'>       <span class="k">return</span> <span class="o">(</span><span class="n">xsign</span> <span class="o">&gt;</span> <span class="n">ysign</span><span class="o">)</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">(</span><span class="n">xsign</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>       <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>   <span class="kt">int</span> <span class="n">cmp</span> <span class="o">=</span> <span class="n">compareMagnitude</span><span class="o">(</span><span class="n">val</span><span class="o">);</span>
</span><span class='line'>   <span class="k">return</span> <span class="o">(</span><span class="n">xsign</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">?</span> <span class="n">cmp</span> <span class="o">:</span> <span class="o">-</span><span class="n">cmp</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">(!(</span><span class="n">x</span> <span class="k">instanceof</span> <span class="n">BigDecimal</span><span class="o">))</span>
</span><span class='line'>       <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>   <span class="n">BigDecimal</span> <span class="n">xDec</span> <span class="o">=</span> <span class="o">(</span><span class="n">BigDecimal</span><span class="o">)</span> <span class="n">x</span><span class="o">;</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">==</span> <span class="k">this</span><span class="o">)</span>
</span><span class='line'>       <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">(</span><span class="n">scale</span> <span class="o">!=</span> <span class="n">xDec</span><span class="o">.</span><span class="na">scale</span><span class="o">)</span>
</span><span class='line'>       <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>   <span class="kt">long</span> <span class="n">s</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">intCompact</span><span class="o">;</span>
</span><span class='line'>   <span class="kt">long</span> <span class="n">xs</span> <span class="o">=</span> <span class="n">xDec</span><span class="o">.</span><span class="na">intCompact</span><span class="o">;</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">(</span><span class="n">s</span> <span class="o">!=</span> <span class="n">INFLATED</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">if</span> <span class="o">(</span><span class="n">xs</span> <span class="o">==</span> <span class="n">INFLATED</span><span class="o">)</span>
</span><span class='line'>           <span class="n">xs</span> <span class="o">=</span> <span class="n">compactValFor</span><span class="o">(</span><span class="n">xDec</span><span class="o">.</span><span class="na">intVal</span><span class="o">);</span>
</span><span class='line'>       <span class="k">return</span> <span class="n">xs</span> <span class="o">==</span> <span class="n">s</span><span class="o">;</span>
</span><span class='line'>   <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">xs</span> <span class="o">!=</span> <span class="n">INFLATED</span><span class="o">)</span>
</span><span class='line'>       <span class="k">return</span> <span class="n">xs</span> <span class="o">==</span> <span class="n">compactValFor</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">intVal</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">inflate</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">xDec</span><span class="o">.</span><span class="na">inflate</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>6. 接口设计问题</h1>

<h2>Cloneable接口</h2>

<p>Cloneable接口的目的是作为对象的一个mixin接口，表明对象允许克隆；但这个目的没有达到。</p>

<p>其主要缺点是，Cloneable缺少一个<code>clone()</code>方法，而<code>Object.clone()</code>是受保护的。</p>

<p>通常，实现接口是为了表明类可以为它的客户做些什么；而<strong>Cloneable却改变了超类中受保护方法的行为</strong>。</p>

<blockquote><p>——区别java.rmi.Remote接口，其中也不具有任何方法，它是一个记号接口。</p></blockquote>

<h1>7. public类不应暴露其内部字段</h1>

<p>如果一个类可以被包外访问，那么就要提供访问方法，以便可以灵活地改变类的内部表示。如果public类暴露了其数据域，那就不能在将来改变内部表示了。</p>

<h2>Point</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Point</span> <span class="kd">extends</span> <span class="n">Point2D</span> <span class="kd">implements</span> <span class="n">java</span><span class="o">.</span><span class="na">io</span><span class="o">.</span><span class="na">Serializable</span> <span class="o">{</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * The X coordinate of this &lt;code&gt;Point&lt;/code&gt;.</span>
</span><span class='line'><span class="cm">     * If no X coordinate is set it will default to 0.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="n">x</span><span class="o">;</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * The Y coordinate of this &lt;code&gt;Point&lt;/code&gt;.</span>
</span><span class='line'><span class="cm">     * If no Y coordinate is set it will default to 0.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="n">y</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Dimension</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Dimension</span> <span class="kd">extends</span> <span class="n">Dimension2D</span> <span class="kd">implements</span> <span class="n">java</span><span class="o">.</span><span class="na">io</span><span class="o">.</span><span class="na">Serializable</span> <span class="o">{</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * The width dimension; negative values can be used.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="n">width</span><span class="o">;</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * The height dimension; negative values can be used.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="n">height</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>8. 不可变类的设计</h1>

<h2>不可变类无需提供拷贝构造函数: String(String  original)：</h2>

<p>不可变对象可以自由共享，所以无需进行保护性拷贝。实际上你根本无需做任何拷贝，<strong>因为这些拷贝始终与源对象相等</strong>。因此，<strong>你不需要，也不应该为不可变类提供clone方法或者拷贝构造函数</strong>。</p>

<p>【反例】这一点在Java平台早期并没有被很好地理解，导致String类具有拷贝构造函数，应该尽量不去用这个函数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Initializes a newly created {@code String} object so that it represents</span>
</span><span class='line'><span class="cm"> * the same sequence of characters as the argument; in other words, the</span>
</span><span class='line'><span class="cm"> * newly created string is a copy of the argument string. Unless an</span>
</span><span class='line'><span class="cm"> * explicit copy of {@code original} is needed, use of this constructor is</span>
</span><span class='line'><span class="cm"> * unnecessary since Strings are immutable.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @param  original</span>
</span><span class='line'><span class="cm"> *         A {@code String}</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="nf">String</span><span class="o">(</span><span class="n">String</span> <span class="n">original</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">original</span><span class="o">.</span><span class="na">value</span><span class="o">;</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">hash</span> <span class="o">=</span> <span class="n">original</span><span class="o">.</span><span class="na">hash</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>不可变类应该不能继承: BigInteger / BigDecimal：</h2>

<p>当BigInteger和BigDecimal编写出来时，对于“<strong>不可变类实际上必须final</strong>”并没有得到广泛的理解，所以这两个类的方法都可以被重写。不幸的是，为了保持向后兼容，这个问题一直没有得到修正。</p>

<p>如果你编写的类的安全性依赖于（来自不可信客户端的）BigInteger或BigDecimal的不可变性，那么就必须检查参数是真正的BigInteger/BigDecimal，还是不可信任的子类实例。如果是后者，你必须把它当成是可变的，并进行保护性拷贝：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">BigInteger</span> <span class="nf">safeInstance</span><span class="o">(</span><span class="n">BigInteger</span> <span class="n">val</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">(</span><span class="n">val</span><span class="o">.</span><span class="na">getClass</span><span class="o">()</span> <span class="o">!=</span> <span class="n">BigInteger</span><span class="o">.</span><span class="na">class</span> <span class="o">)</span>
</span><span class='line'>          <span class="k">return</span> <span class="k">new</span> <span class="nf">BigInteger</span><span class="o">(</span><span class="n">val</span><span class="o">.</span><span class="na">toByteArray</span><span class="o">());</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">val</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Date,  Point：理应设计成不可变类</h2>

<p>应该永远让小的值对象不可变，例如PhoneNumber、Complex。
Java平台库中有许多这种类，例如<code>java.util.Date</code>、<code>java.awt.Point</code>，它们理论上应当是不可变的，但实际上却是可变的。</p>

<h2>EnumSet理应不可变</h2>

<h1>9. 异常设计</h1>

<h2>finally中应该禁止return</h2>

<p>It is especially difficult to understand the behavior of a program that executes a break, continue, or return statement in a Try block only to have the statement&rsquo;s behavior vetoed by a finally block.</p>

<p><strong>Never exit a finally block with a return, break, continue, or throw, and never allow a checked exception to propagate out of a finally block.</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">decision</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个程序返回false。无论try块是否正常执行完，finnaly都会被执行。</p>

<h2>finally中应该禁止抛出异常</h2>

<p>另外，finally中应该禁止抛出异常。否则finally中剩下的语句就不会执行，破坏逻辑。</p>

<h2>继承方法抛出的异常</h2>

<p>The set of checked exceptions that a method can throw is the <strong>intersection</strong> of the sets of checked exceptions that it is declared to throw in all applicable types, <strong>not the union</strong>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">interface</span> <span class="nc">Type1</span> <span class="o">{</span>
</span><span class='line'>     <span class="kt">void</span> <span class="nf">f</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">CloneNotSupportedException</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">interface</span> <span class="nc">Type2</span> <span class="o">{</span>
</span><span class='line'>     <span class="kt">void</span> <span class="nf">f</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">InterruptedException</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">interface</span> <span class="nc">Type3</span> <span class="kd">extends</span> <span class="n">Type1</span><span class="o">,</span> <span class="n">Type2</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Arcane3</span> <span class="kd">implements</span> <span class="n">Type3</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>     <span class="kd">public</span> <span class="kt">void</span> <span class="nf">f</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span> <span class="s">&quot;Hello world&quot;</span> <span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>     <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Type3</span> <span class="n">t3</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Arcane3</span><span class="o">();</span>
</span><span class='line'>         <span class="n">t3</span><span class="o">.</span><span class="na">f</span><span class="o">();</span>   <span class="c1">// 不抛异常！！！</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>10. 类型转换</h1>

<h2>int相乘可能溢出</h2>

<p>两个int相乘，得到的还是int，这就可能溢出！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">long</span> <span class="n">MICROS_PER_DAY</span> <span class="o">=</span> <span class="mi">24</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">1000</span> <span class="o">*</span> <span class="mi">1000</span><span class="o">;</span> <span class="c1">//不精确</span>
</span><span class='line'><span class="kt">long</span> <span class="n">MICROS_PER_DAY</span> <span class="o">=</span> <span class="mi">24</span> <span class="n">L</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">1000</span> <span class="o">*</span> <span class="mi">1000</span><span class="o">;</span> <span class="c1">//精确</span>
</span></code></pre></td></tr></table></div></figure>


<p>应该自动切换到更大的类型，以避免溢出；
或者直接抛出Exception，都比溢出要好。</p>

<h2>mixed-type computations</h2>

<p>如果遇到跨类型计算，jdk会把低类型自动提升为高类型，然后再计算。但这种转换有时会导致问题。例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Long</span><span class="o">.</span><span class="na">toHexString</span><span class="o">(</span><span class="mh">0x100000000</span><span class="n">L</span> <span class="o">+</span> <span class="mh">0xcafebabe</span><span class="o">);</span> <span class="c1">//cafebabe</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为是long + int，所以后面的int会自动提升为long，再计算。即被提升为0xffffffffcafebabeL。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="mh">0xffffffffcafebabe</span><span class="n">L</span>
</span><span class='line'><span class="o">+</span> <span class="mh">0x0000000100000000</span><span class="n">L</span>
</span><span class='line'><span class="o">=</span> <span class="mh">0x00000000cafebabe</span><span class="n">L</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以得到cafebase，而不是想象中的1cafebabe。
我们得出教训：<strong>跨类型计算可能带来混淆，所以要坚决避免！</strong>上例可以改为如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Long</span><span class="o">.</span><span class="na">toHexString</span><span class="o">(</span><span class="mh">0x100000000</span><span class="n">L</span> <span class="o">+</span> <span class="mh">0xcafebabe</span><span class="n">L</span><span class="o">);</span> <span class="c1">//1cafebabe</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Negative hex literals appear positive。十六进制的字面值，其最高位代表正负。</p></blockquote>

<h2>三元运算符的操作数类型</h2>

<p>要注意三元运算符，它没有要求第二和第三个操作数类型一致。</p>

<ol>
<li>如果类型都为T；则结果为T。</li>
<li>如果其中一个类型T为byte/shor/char，另一个是int常量；则结果为T。</li>
<li>如果为其他情况，则结果为提升类型。</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">char</span> <span class="n">x</span> <span class="o">=</span> <span class="sc">&#39;X&#39;</span><span class="o">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="kc">false</span> <span class="o">?</span> <span class="n">i</span> <span class="o">:</span> <span class="n">x</span><span class="o">);</span> <span class="c1">//输出88，结果为int类型</span>
</span></code></pre></td></tr></table></div></figure>


<p>理应强制要求他们类型一致。</p>

<h2>+=和-=的自动类型转换：损失精度</h2>

<p><code>+=</code>、<code>-=</code>等运算符会自动类型转换，即将计算结果自动转换为左侧操作数的类型。这有时会导致意想不到的问题。
例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">short</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">123456</span><span class="o">;</span>
</span><span class='line'><span class="n">x</span> <span class="o">+=</span> <span class="n">i</span><span class="o">;</span> <span class="c1">//自动转换为short，损失精度，但不报错</span>
</span><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">i</span><span class="o">;</span> <span class="c1">// Won&#39;t compile - &quot;possible loss of precision&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>应该不要做自动类型转换，以编译报错提醒用户。（与第二句普通赋值语句保持一致）</p>

<ul>
<li>——另外一个问题，<code>+=</code>左侧不能为Object，例如：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Object</span> <span class="n">x</span> <span class="o">=</span> <span class="s">&quot;Buy &quot;</span><span class="o">;</span>
</span><span class='line'><span class="n">String</span> <span class="n">i</span> <span class="o">=</span> <span class="s">&quot;Effective Java!&quot;</span><span class="o">;</span>
</span><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">i</span><span class="o">;</span>  <span class="c1">//合法</span>
</span><span class='line'><span class="n">x</span> <span class="o">+=</span> <span class="n">i</span><span class="o">;</span>     <span class="c1">//非法</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>——Narrowing Primitive Conversion
An unfortunate fact about the compound assignment operators is that they can silently perform narrowing primitive conversions , which are conversions from one numeric type to a less expressive numeric type.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">short</span> <span class="n">i</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">&gt;&gt;&gt;=</span> <span class="mi">1</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>初始值为0xffff；</li>
<li>执行>>>=时，先将其提升为int，变为0xffffffff；</li>
<li>接着移位，变为0x7fffffff；</li>
<li>接着赋值回i，这时会执行从int到short的转换，变为0xffff</li>
</ol>


<p>所以上例是一个无限循环。</p>

<h1>11. 语言设计</h1>

<h2>long字面值可以用小写L</h2>

<p>用小写L容易与数字1混淆！
应该强制用大写L，小写L非法。</p>

<h2>重写toString()</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Object</span> <span class="n">numbers</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="o">[]</span> <span class="o">{</span> <span class="sc">&#39;1&#39;</span><span class="o">,</span> <span class="sc">&#39;2&#39;</span><span class="o">,</span> <span class="sc">&#39;3&#39;</span> <span class="o">};</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">numbers</span><span class="o">);</span> <span class="c1">// [C@16f0472</span>
</span></code></pre></td></tr></table></div></figure>


<p>貌似Array应该默认重写toString方法。</p>

<h2>不能静态导入Arrays.toString()</h2>

<p>为了解决上一个问题，你可能想静态导入Arrays.toString()，然后调用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">toString</span><span class="o">(</span><span class="n">numbers</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是会编译报错，编译器去查找当前类的toString()方法，发现参数不匹配。。</p>

<h2>String(byte[])依赖于默认字符集</h2>

<p>String(byte[])的文档说明，它依赖于默认字符集：</p>

<blockquote><p>Constructs a new String by decoding the specified byte array <strong>using the platform&rsquo;s default charset</strong>. The length of the new String is a function of the charset, and hence may not be equal to the length of the byte array. The behavior of this constructor when the given bytes are not valid in the default charset is unspecified。</p></blockquote>

<p>但是JRE的默认字符集依赖于操作系统和locale。所以，it was not such a good idea to provide a String(byte[]) constructor that depends on the default charset:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">str</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">String</span><span class="o">(</span><span class="n">bytes</span><span class="o">,</span> <span class="s">&quot;ISO-8859-1&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>final字段与final方法的含义完全不同</h2>

<h2>Thread.run()不应该公开</h2>

<ul>
<li>Thread.run()是一个public方法，很可能导致被误调用——想调start()，结果却调了run() 。</li>
<li>If <code>Thread</code> didn&rsquo;t have a public <code>run</code> method, it would be impossible for programmers to invoke it accidentally.</li>
<li>The <code>Thread</code> class has a public <code>run</code> method because it implements <code>Runnable</code>, but it didn&rsquo;t have to be that way.</li>
<li>An alternative design would be for each <code>Thread</code> instance to encapsulate a <code>Runnable</code>, giving rise to composition in place of interface inheritance.</li>
</ul>


<h2>方法名不合理</h2>

<p>methods should have names that describe their primary functions. Given the behavior of <code>Thread.interrupted</code>, it should have been named <code>clearInterruptStatus</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">* Tests if some Thread has been interrupted. The interrupted state</span>
</span><span class='line'><span class="cm">* is reset or not based on the value of ClearInterrupted that is</span>
</span><span class='line'><span class="cm">* passed.</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">native</span> <span class="kt">boolean</span> <span class="nf">isInterrupted</span><span class="o">(</span> <span class="kt">boolean</span> <span class="n">ClearInterrupted</span> <span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">interrupted</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nf">currentThread</span><span class="o">().</span><span class="na">isInterrupted</span><span class="o">(</span> <span class="kc">true</span> <span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isInterrupted</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nf">isInterrupted</span><span class="o">(</span> <span class="kc">false</span> <span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>shadow local variables</h2>

<p>perhaps it makes sense to forbid shadowing of type parameters, in the same way that shadowing of local variables is forbidden.</p>

<p>未完待续。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Implement a HashMap]]></title>
    <link href="http://alphawang.github.io/blog/how-to-implement-a-hashmap/"/>
    <updated>2014-11-17T19:24:35+08:00</updated>
    <id>http://alphawang.github.io/blog/how-to-implement-a-hashmap</id>
    <content type="html"><![CDATA[<p>作为一个Java开发民工，对<code>HashMap</code>可以说是经常使用的，不过要是想更好地使用它，还是需要了解其内部实现原理的。当了解了实现原理后，自己实现一个HashMap也就不难了。</p>

<!--more-->


<h2>1. HashMap的数据结构</h2>

<p>首先思考一下<code>HashMap</code>底层可以用什么数据结构来存储数据呢？可以用数组或者链表，这两者基本上是两个极端。</p>

<ul>
<li>数组</li>
</ul>


<p>数组的存储区间是连续的，占用内存严重，故空间复杂度很大；不过数组的二分查找时间复杂度小，为O(1)。</p>

<p>数组的特点是：寻址容易，插入和删除困难。</p>

<ul>
<li>链表</li>
</ul>


<p>链表存储区间离散，占用内存比较宽松，故空间复杂度很小；但时间复杂度很大，达O(N)。</p>

<p>链表的特点是：寻址困难，插入和删除容易。</p>

<ul>
<li>哈希表</li>
</ul>


<p>那么我们能不能综合两者的特性，做出一种寻址容易，插入删除也容易的数据结构？答案是肯定的，这就是我们要提起的哈希表。<br/>
哈希表（(Hash table）既满足了数据的查找方便，同时不占用太多的内容空间，使用也十分方便。</p>

<p>哈希表有多种不同的实现方法，最常用的一种方法被称为—— <code>拉链法</code>，我们可以理解为“链表的数组” ，如图：
<img src="http://alphawang.github.io/images/post/2014/11/hashmap.png" alt="map" /></p>

<p>从上图我们可以发现哈希表是由<code>数组 + 链表</code>组成的，数组中每个元素存储的是一个链表的头结点。<br/>
那么这些元素是按照什么样的规则存储到数组中呢。一般情况是通过hash(key)%len获得，也就是元素的key的哈希值对数组长度取模得到。例如，12%16=12,28%16=12,108%16=12,140%16=12。所以12、28、108以及140都存储在数组下标为12的位置。</p>

<p>HashMap其实也是一个线性的数组实现的,所以可以理解为其存储数据的容器就是一个线性数组。这可能让我们很不解，一个线性的数组怎么实现按键值对来存取数据呢？这里HashMap有做一些处理。</p>

<p>首先HashMap里面实现一个静态内部类<code>Entry</code>，其重要的属性有 key, value, next，从属性key, value我们就能很明显的看出来Entry就是HashMap键值对实现的一个基础bean，我们上面说到HashMap的基础就是一个线性数组，这个数组就是<code>Entry[]</code>，Map里面的内容都保存在Entry[]里面。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * The table, resized as necessary. Length MUST Always be a power of two.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">transient</span> <span class="n">Entry</span><span class="o">[]</span> <span class="n">table</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2>2. HashMap的存取实现</h2>

<p>既然是线性数组，如何能随机存取？这里HashMap用了一个小算法，大致是这样实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// 存储时:</span>
</span><span class='line'><span class="kt">int</span> <span class="n">hash</span> <span class="o">=</span> <span class="n">key</span><span class="o">.</span><span class="na">hashCode</span><span class="o">();</span> <span class="c1">// 这个hashCode方法这里不详述,只要理解每个key的hash是一个固定的int值</span>
</span><span class='line'><span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">hash</span> <span class="o">%</span> <span class="n">Entry</span><span class="o">[].</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'><span class="n">Entry</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// 取值时:</span>
</span><span class='line'><span class="kt">int</span> <span class="n">hash</span> <span class="o">=</span> <span class="n">key</span><span class="o">.</span><span class="na">hashCode</span><span class="o">();</span>
</span><span class='line'><span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">hash</span> <span class="o">%</span> <span class="n">Entry</span><span class="o">[].</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'><span class="k">return</span> <span class="n">Entry</span><span class="o">[</span><span class="n">index</span><span class="o">];</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>2.1 put</h3>

<blockquote><p>先思考一个问题：如果两个key通过hash%Entry[].length得到的index相同，会不会有覆盖的危险？</p></blockquote>

<p>答案是HashMap里面用到链式数据结构的一个概念。上面我们提到过Entry类里面有一个next属性，作用是指向下一个Entry。打个比方， 第一个键值对A进来，通过计算其key的hash得到的index = 0，记做：Entry[0] = A。一会后又进来一个键值对B，通过计算其index也等于0，现在怎么办？HashMap会这样做: B.next = A,Entry[0] = B；如果又进来C，index也等于0，那么C.next = B, Entry[0] = C；这样我们发现index=0的地方其实存取了A,B,C三个键值对，他们通过next这个属性链接在一起。<strong>也就是说数组中存储的是最后插入的元素。</strong></p>

<p>这里其实是一种解决hash冲突的方法，一般可以用如下方法来解决hash冲突：<br/>
- 开放定址法（线性探测再散列，二次探测再散列，伪随机探测再散列）<br/>
- 再哈希法<br/>
- 链地址法<br/>
- 建立一个公共溢出区<br/>
HashMap的解决办法就是采用<code>链地址法</code>。</p>

<p>看看源码是如何实现的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="n">V</span> <span class="nf">put</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="n">V</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">key</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="nf">putForNullKey</span><span class="o">(</span><span class="n">value</span><span class="o">);</span> <span class="c1">//null总是放在数组的第一个链表中</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">hash</span> <span class="o">=</span> <span class="n">hash</span><span class="o">(</span><span class="n">key</span><span class="o">.</span><span class="na">hashCode</span><span class="o">());</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">indexFor</span><span class="o">(</span><span class="n">hash</span><span class="o">,</span> <span class="n">table</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'>        <span class="c1">//遍历链表</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">table</span><span class="o">[</span><span class="n">i</span><span class="o">];</span> <span class="n">e</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">next</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Object</span> <span class="n">k</span><span class="o">;</span>
</span><span class='line'>            <span class="c1">//如果key在链表中已存在，则替换为新value</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">hash</span> <span class="o">==</span> <span class="n">hash</span> <span class="o">&amp;&amp;</span> <span class="o">((</span><span class="n">k</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">key</span><span class="o">)</span> <span class="o">==</span> <span class="n">key</span> <span class="o">||</span> <span class="n">key</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">k</span><span class="o">)))</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">V</span> <span class="n">oldValue</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">value</span><span class="o">;</span>
</span><span class='line'>                <span class="n">e</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>                <span class="n">e</span><span class="o">.</span><span class="na">recordAccess</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">oldValue</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">modCount</span><span class="o">++;</span>
</span><span class='line'>        <span class="n">addEntry</span><span class="o">(</span><span class="n">hash</span><span class="o">,</span> <span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">,</span> <span class="n">i</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">addEntry</span><span class="o">(</span><span class="kt">int</span> <span class="n">hash</span><span class="o">,</span> <span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="n">V</span> <span class="n">value</span><span class="o">,</span> <span class="kt">int</span> <span class="n">bucketIndex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">table</span><span class="o">[</span><span class="n">bucketIndex</span><span class="o">];</span>
</span><span class='line'>    <span class="n">table</span><span class="o">[</span><span class="n">bucketIndex</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;(</span><span class="n">hash</span><span class="o">,</span> <span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span> <span class="c1">//参数e, 是Entry.next</span>
</span><span class='line'>    <span class="c1">//如果size超过threshold，则扩充table大小。再散列</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">size</span><span class="o">++</span> <span class="o">&gt;=</span> <span class="n">threshold</span><span class="o">)</span>
</span><span class='line'>            <span class="n">resize</span><span class="o">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">table</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">static</span> <span class="kt">int</span> <span class="nf">indexFor</span><span class="o">(</span><span class="kt">int</span> <span class="n">h</span><span class="o">,</span> <span class="kt">int</span> <span class="n">length</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// assert Integer.bitCount(length) == 1 : &quot;length must be a non-zero power of 2&quot;;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">h</span> <span class="o">&amp;</span> <span class="o">(</span><span class="n">length</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>HashMap里面也包含一些优化方面的实现。比如：Entry[]的长度一定后，随着map里面数据的越来越长，这样同一个index的链就会很长，会不会影响性能？HashMap里面设置一个因子，随着map的size越来越大，Entry[]会以一定的规则加长长度。</p>

<h3>2.2 get</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="n">V</span> <span class="nf">get</span><span class="o">(</span><span class="n">Object</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">key</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="nf">getForNullKey</span><span class="o">();</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">hash</span> <span class="o">=</span> <span class="n">hash</span><span class="o">(</span><span class="n">key</span><span class="o">.</span><span class="na">hashCode</span><span class="o">());</span>
</span><span class='line'>        <span class="c1">//先定位到数组元素，再遍历该元素处的链表</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">table</span><span class="o">[</span><span class="n">indexFor</span><span class="o">(</span><span class="n">hash</span><span class="o">,</span> <span class="n">table</span><span class="o">.</span><span class="na">length</span><span class="o">)];</span>
</span><span class='line'>             <span class="n">e</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>             <span class="n">e</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">next</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Object</span> <span class="n">k</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">hash</span> <span class="o">==</span> <span class="n">hash</span> <span class="o">&amp;&amp;</span> <span class="o">((</span><span class="n">k</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">key</span><span class="o">)</span> <span class="o">==</span> <span class="n">key</span> <span class="o">||</span> <span class="n">key</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">k</span><span class="o">)))</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">e</span><span class="o">.</span><span class="na">value</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2.3 null key的存取</h3>

<p>null key总是存放在Entry[]数组的第一个元素。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>   <span class="kd">private</span> <span class="n">V</span> <span class="nf">putForNullKey</span><span class="o">(</span><span class="n">V</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">table</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span> <span class="n">e</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">next</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">key</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">V</span> <span class="n">oldValue</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">value</span><span class="o">;</span>
</span><span class='line'>                <span class="n">e</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>                <span class="n">e</span><span class="o">.</span><span class="na">recordAccess</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">oldValue</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">modCount</span><span class="o">++;</span>
</span><span class='line'>        <span class="n">addEntry</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="n">value</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">V</span> <span class="nf">getForNullKey</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">table</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span> <span class="n">e</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">next</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">key</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">e</span><span class="o">.</span><span class="na">value</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>2.4 确定数组index：hashcode % table.length取模</h3>

<p>HashMap存取时，都需要计算当前key应该对应Entry[]数组哪个元素，即计算数组下标；算法如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>   <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Returns index for hash code h.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">static</span> <span class="kt">int</span> <span class="nf">indexFor</span><span class="o">(</span><span class="kt">int</span> <span class="n">h</span><span class="o">,</span> <span class="kt">int</span> <span class="n">length</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">h</span> <span class="o">&amp;</span> <span class="o">(</span><span class="n">length</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>按位取并，作用上相当于取模mod或者取余%。</p>

<p>key经过hash后，可以取模来进行放入数组，也不会出现越界的情况，
之所以没有使用取模，而是按位与的形式，是因为计算机的二进制运算效率比取模效率高。</p>

<blockquote><p>这意味着：数组下标相同，并不表示hashCode相同。</p></blockquote>

<h3>2.5 table初始大小</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">public</span> <span class="nf">HashMap</span><span class="o">(</span><span class="kt">int</span> <span class="n">initialCapacity</span><span class="o">,</span> <span class="kt">float</span> <span class="n">loadFactor</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="o">.....</span>
</span><span class='line'>        <span class="c1">// Find a power of 2 &gt;= initialCapacity</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">capacity</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">capacity</span> <span class="o">&lt;</span> <span class="n">initialCapacity</span><span class="o">)</span>
</span><span class='line'>            <span class="n">capacity</span> <span class="o">&lt;&lt;=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">loadFactor</span> <span class="o">=</span> <span class="n">loadFactor</span><span class="o">;</span>
</span><span class='line'>        <span class="n">threshold</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)(</span><span class="n">capacity</span> <span class="o">*</span> <span class="n">loadFactor</span><span class="o">);</span>
</span><span class='line'>        <span class="n">table</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Entry</span><span class="o">[</span><span class="n">capacity</span><span class="o">];</span>
</span><span class='line'>        <span class="n">init</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意table初始大小并不是构造函数中的initialCapacity！！
而是 >= initialCapacity的2的n次幂！！！！</p>

<blockquote><p>为什么这么设计呢？为什么HashMap的大小要是2的指数次呢？</p></blockquote>

<p>回顾一下数字索引的算法是<code>h &amp; (length-1)</code>。如果Map的大小不是2的指数次，我们设置为7，7的二进制是：111，（length-1）大小是6，6的二进制是：110
结果如下，有些数组中的位置没有被设置，有些重复了，一是导致空间浪费，同时增加了碰撞的几率。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">10</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span>
</span><span class='line'>    <span class="o">(</span><span class="s">&quot;数值i=&quot;</span><span class="o">+</span><span class="n">i</span><span class="o">+</span><span class="s">&quot;, 二进制=&quot;</span><span class="o">+</span><span class="n">Integer</span><span class="o">.</span><span class="na">toBinaryString</span><span class="o">(</span><span class="n">i</span><span class="o">)+</span><span class="s">&quot;（&quot;</span><span class="o">+</span><span class="n">Integer</span><span class="o">.</span><span class="na">toBinaryString</span><span class="o">(</span><span class="mi">6</span><span class="o">)+</span><span class="s">&quot;）&quot;</span><span class="o">+</span><span class="s">&quot; ,和6按位与=&quot;</span><span class="o">+(</span><span class="n">i</span><span class="o">&amp;</span><span class="mi">6</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">数值i</span><span class="o">=</span><span class="mi">0</span><span class="o">,</span> <span class="n">二进制</span><span class="o">=</span><span class="mi">0</span><span class="err">（</span><span class="mi">110</span><span class="err">）</span> <span class="o">,</span><span class="n">和6按位与</span><span class="o">=</span><span class="mi">0</span>
</span><span class='line'><span class="n">数值i</span><span class="o">=</span><span class="mi">1</span><span class="o">,</span> <span class="n">二进制</span><span class="o">=</span><span class="mi">1</span><span class="err">（</span><span class="mi">110</span><span class="err">）</span> <span class="o">,</span><span class="n">和6按位与</span><span class="o">=</span><span class="mi">0</span>
</span><span class='line'><span class="n">数值i</span><span class="o">=</span><span class="mi">2</span><span class="o">,</span> <span class="n">二进制</span><span class="o">=</span><span class="mi">10</span><span class="err">（</span><span class="mi">110</span><span class="err">）</span> <span class="o">,</span><span class="n">和6按位与</span><span class="o">=</span><span class="mi">2</span>
</span><span class='line'><span class="n">数值i</span><span class="o">=</span><span class="mi">3</span><span class="o">,</span> <span class="n">二进制</span><span class="o">=</span><span class="mi">11</span><span class="err">（</span><span class="mi">110</span><span class="err">）</span> <span class="o">,</span><span class="n">和6按位与</span><span class="o">=</span><span class="mi">2</span>
</span><span class='line'><span class="n">数值i</span><span class="o">=</span><span class="mi">4</span><span class="o">,</span> <span class="n">二进制</span><span class="o">=</span><span class="mi">100</span><span class="err">（</span><span class="mi">110</span><span class="err">）</span> <span class="o">,</span><span class="n">和6按位与</span><span class="o">=</span><span class="mi">4</span>
</span><span class='line'><span class="n">数值i</span><span class="o">=</span><span class="mi">5</span><span class="o">,</span> <span class="n">二进制</span><span class="o">=</span><span class="mi">101</span><span class="err">（</span><span class="mi">110</span><span class="err">）</span> <span class="o">,</span><span class="n">和6按位与</span><span class="o">=</span><span class="mi">4</span>
</span><span class='line'><span class="n">数值i</span><span class="o">=</span><span class="mi">6</span><span class="o">,</span> <span class="n">二进制</span><span class="o">=</span><span class="mi">110</span><span class="err">（</span><span class="mi">110</span><span class="err">）</span> <span class="o">,</span><span class="n">和6按位与</span><span class="o">=</span><span class="mi">6</span>
</span><span class='line'><span class="n">数值i</span><span class="o">=</span><span class="mi">7</span><span class="o">,</span> <span class="n">二进制</span><span class="o">=</span><span class="mi">111</span><span class="err">（</span><span class="mi">110</span><span class="err">）</span> <span class="o">,</span><span class="n">和6按位与</span><span class="o">=</span><span class="mi">6</span>
</span><span class='line'><span class="n">数值i</span><span class="o">=</span><span class="mi">8</span><span class="o">,</span> <span class="n">二进制</span><span class="o">=</span><span class="mi">1000</span><span class="err">（</span><span class="mi">110</span><span class="err">）</span> <span class="o">,</span><span class="n">和6按位与</span><span class="o">=</span><span class="mi">0</span>
</span><span class='line'><span class="n">数值i</span><span class="o">=</span><span class="mi">9</span><span class="o">,</span> <span class="n">二进制</span><span class="o">=</span><span class="mi">1001</span><span class="err">（</span><span class="mi">110</span><span class="err">）</span> <span class="o">,</span><span class="n">和6按位与</span><span class="o">=</span><span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后我们设置8，（length-1）大小是7，7的二进制是111，打印看结果，空间充分利用，并且减少了碰撞的几率。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">10</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span>
</span><span class='line'>        <span class="err">​</span><span class="s">&quot;数值i=&quot;</span><span class="o">+</span><span class="n">i</span><span class="o">+</span><span class="s">&quot;, 二进制=&quot;</span><span class="o">+</span><span class="n">Integer</span><span class="o">.</span><span class="na">toBinaryString</span><span class="o">(</span><span class="n">i</span><span class="o">)+</span><span class="s">&quot;（&quot;</span><span class="o">+</span><span class="n">Integer</span><span class="o">.</span><span class="na">toBinaryString</span><span class="o">(</span><span class="mi">7</span><span class="o">)+</span><span class="s">&quot;）&quot;</span><span class="o">+</span><span class="s">&quot; ,和7按位与=&quot;</span><span class="o">+(</span><span class="n">i</span><span class="o">&amp;</span><span class="mi">7</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="err">​</span>
</span><span class='line'><span class="n">数值i</span><span class="o">=</span><span class="mi">0</span><span class="o">,</span> <span class="n">二进制</span><span class="o">=</span><span class="mi">0</span><span class="err">（</span><span class="mi">111</span><span class="err">）</span> <span class="o">,</span><span class="n">和7按位与</span><span class="o">=</span><span class="mi">0</span>
</span><span class='line'><span class="n">数值i</span><span class="o">=</span><span class="mi">1</span><span class="o">,</span> <span class="n">二进制</span><span class="o">=</span><span class="mi">1</span><span class="err">（</span><span class="mi">111</span><span class="err">）</span> <span class="o">,</span><span class="n">和7按位与</span><span class="o">=</span><span class="mi">1</span>
</span><span class='line'><span class="n">数值i</span><span class="o">=</span><span class="mi">2</span><span class="o">,</span> <span class="n">二进制</span><span class="o">=</span><span class="mi">10</span><span class="err">（</span><span class="mi">111</span><span class="err">）</span> <span class="o">,</span><span class="n">和7按位与</span><span class="o">=</span><span class="mi">2</span>
</span><span class='line'><span class="n">数值i</span><span class="o">=</span><span class="mi">3</span><span class="o">,</span> <span class="n">二进制</span><span class="o">=</span><span class="mi">11</span><span class="err">（</span><span class="mi">111</span><span class="err">）</span> <span class="o">,</span><span class="n">和7按位与</span><span class="o">=</span><span class="mi">3</span>
</span><span class='line'><span class="n">数值i</span><span class="o">=</span><span class="mi">4</span><span class="o">,</span> <span class="n">二进制</span><span class="o">=</span><span class="mi">100</span><span class="err">（</span><span class="mi">111</span><span class="err">）</span> <span class="o">,</span><span class="n">和7按位与</span><span class="o">=</span><span class="mi">4</span>
</span><span class='line'><span class="n">数值i</span><span class="o">=</span><span class="mi">5</span><span class="o">,</span> <span class="n">二进制</span><span class="o">=</span><span class="mi">101</span><span class="err">（</span><span class="mi">111</span><span class="err">）</span> <span class="o">,</span><span class="n">和7按位与</span><span class="o">=</span><span class="mi">5</span>
</span><span class='line'><span class="n">数值i</span><span class="o">=</span><span class="mi">6</span><span class="o">,</span> <span class="n">二进制</span><span class="o">=</span><span class="mi">110</span><span class="err">（</span><span class="mi">111</span><span class="err">）</span> <span class="o">,</span><span class="n">和7按位与</span><span class="o">=</span><span class="mi">6</span>
</span><span class='line'><span class="n">数值i</span><span class="o">=</span><span class="mi">7</span><span class="o">,</span> <span class="n">二进制</span><span class="o">=</span><span class="mi">111</span><span class="err">（</span><span class="mi">111</span><span class="err">）</span> <span class="o">,</span><span class="n">和7按位与</span><span class="o">=</span><span class="mi">7</span>
</span><span class='line'><span class="n">数值i</span><span class="o">=</span><span class="mi">8</span><span class="o">,</span> <span class="n">二进制</span><span class="o">=</span><span class="mi">1000</span><span class="err">（</span><span class="mi">111</span><span class="err">）</span> <span class="o">,</span><span class="n">和7按位与</span><span class="o">=</span><span class="mi">0</span>
</span><span class='line'><span class="n">数值i</span><span class="o">=</span><span class="mi">9</span><span class="o">,</span> <span class="n">二进制</span><span class="o">=</span><span class="mi">1001</span><span class="err">（</span><span class="mi">111</span><span class="err">）</span> <span class="o">,</span><span class="n">和7按位与</span><span class="o">=</span><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<h2>3. 再散列rehash过程</h2>

<p>当哈希表的容量超过默认容量时，必须调整table的大小。当容量已经达到最大可能值时，那么该方法就将容量调整到Integer.MAX_VALUE返回，这时，需要创建一张新表，将原表的映射到新表中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>   <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Rehashes the contents of this map into a new array with a</span>
</span><span class='line'><span class="cm">     * larger capacity.  </span>
</span><span class='line'><span class="cm">     * This method is called automatically when the</span>
</span><span class='line'><span class="cm">     * number of keys in this map reaches its threshold.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @param newCapacity the new capacity, MUST be a power of two;</span>
</span><span class='line'><span class="cm">     *        must be greater than current capacity unless current</span>
</span><span class='line'><span class="cm">     *        capacity is MAXIMUM_CAPACITY (in which case value</span>
</span><span class='line'><span class="cm">     *        is irrelevant).</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">resize</span><span class="o">(</span><span class="kt">int</span> <span class="n">newCapacity</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Entry</span><span class="o">[]</span> <span class="n">oldTable</span> <span class="o">=</span> <span class="n">table</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">oldCapacity</span> <span class="o">=</span> <span class="n">oldTable</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">oldCapacity</span> <span class="o">==</span> <span class="n">MAXIMUM_CAPACITY</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">threshold</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">Entry</span><span class="o">[]</span> <span class="n">newTable</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Entry</span><span class="o">[</span><span class="n">newCapacity</span><span class="o">];</span>
</span><span class='line'>        <span class="n">transfer</span><span class="o">(</span><span class="n">newTable</span><span class="o">);</span>
</span><span class='line'>        <span class="n">table</span> <span class="o">=</span> <span class="n">newTable</span><span class="o">;</span>
</span><span class='line'>        <span class="n">threshold</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)(</span><span class="n">newCapacity</span> <span class="o">*</span> <span class="n">loadFactor</span><span class="o">);</span> <span class="c1">//设置阈值</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
注意设置threshold时用到了<code>loadFactor</code>，它是在构造HashMap时指定的，默认值是 <code>0.75f</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Transfers all entries from current table to newTable.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">transfer</span><span class="o">(</span><span class="n">Entry</span><span class="o">[]</span> <span class="n">newTable</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Entry</span><span class="o">[]</span> <span class="n">src</span> <span class="o">=</span> <span class="n">table</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">newCapacity</span> <span class="o">=</span> <span class="n">newTable</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">src</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">src</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">e</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">src</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>                <span class="k">do</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">next</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span><span class='line'>                    <span class="c1">//重新计算index</span>
</span><span class='line'>                    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">indexFor</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">hash</span><span class="o">,</span> <span class="n">newCapacity</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">e</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">newTable</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'>                    <span class="n">newTable</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">e</span><span class="o">;</span>
</span><span class='line'>                    <span class="n">e</span> <span class="o">=</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">while</span> <span class="o">(</span><span class="n">e</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<blockquote><p>rehash过程是要消耗资源的，应该尽量避免rehash.</p></blockquote>

<h2>4. 实现自己的HashMap</h2>

<p>理解和JDK对HashMap的实现原理后，可以自己动手模仿一个：</p>

<p>Entry.java</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;{</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">K</span> <span class="n">key</span><span class="o">;</span>
</span><span class='line'>    <span class="n">V</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>    <span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">next</span><span class="o">;</span><span class="c1">//下一个结点</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//构造函数</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Entry</span><span class="o">(</span><span class="n">K</span> <span class="n">k</span><span class="o">,</span> <span class="n">V</span> <span class="n">v</span><span class="o">,</span> <span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">key</span> <span class="o">=</span> <span class="n">k</span><span class="o">;</span>
</span><span class='line'>        <span class="n">value</span> <span class="o">=</span> <span class="n">v</span><span class="o">;</span>
</span><span class='line'>        <span class="n">next</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="n">K</span> <span class="nf">getKey</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">key</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="n">V</span> <span class="nf">getValue</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="n">V</span> <span class="nf">setValue</span><span class="o">(</span><span class="n">V</span> <span class="n">newValue</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">V</span> <span class="n">oldValue</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>        <span class="n">value</span> <span class="o">=</span> <span class="n">newValue</span><span class="o">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">oldValue</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="n">Entry</span><span class="o">))</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="n">Entry</span> <span class="n">e</span> <span class="o">=</span> <span class="o">(</span><span class="n">Entry</span><span class="o">)</span><span class="n">o</span><span class="o">;</span>
</span><span class='line'>        <span class="n">Object</span> <span class="n">k1</span> <span class="o">=</span> <span class="n">getKey</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Object</span> <span class="n">k2</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">getKey</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">k1</span> <span class="o">==</span> <span class="n">k2</span> <span class="o">||</span> <span class="o">(</span><span class="n">k1</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">k1</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">k2</span><span class="o">)))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Object</span> <span class="n">v1</span> <span class="o">=</span> <span class="n">getValue</span><span class="o">();</span>
</span><span class='line'>            <span class="n">Object</span> <span class="n">v2</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">v1</span> <span class="o">==</span> <span class="n">v2</span> <span class="o">||</span> <span class="o">(</span><span class="n">v1</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">v1</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">v2</span><span class="o">)))</span>
</span><span class='line'>                <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">int</span> <span class="nf">hashCode</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">(</span><span class="n">key</span><span class="o">==</span><span class="kc">null</span>   <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">key</span><span class="o">.</span><span class="na">hashCode</span><span class="o">())</span> <span class="o">^</span> <span class="o">(</span><span class="n">value</span><span class="o">==</span><span class="kc">null</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">value</span><span class="o">.</span><span class="na">hashCode</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">getKey</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;=&quot;</span> <span class="o">+</span> <span class="n">getValue</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>MyHashMap.java</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//保证key与value不为空</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyHashMap</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Entry</span><span class="o">[]</span> <span class="n">table</span><span class="o">;</span><span class="c1">//Entry数组表</span>
</span><span class='line'>    <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">DEFAULT_INITIAL_CAPACITY</span> <span class="o">=</span> <span class="mi">16</span><span class="o">;</span><span class="c1">//默认数组长度</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 构造函数</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">MyHashMap</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">table</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Entry</span><span class="o">[</span><span class="n">DEFAULT_INITIAL_CAPACITY</span><span class="o">];</span>
</span><span class='line'>        <span class="n">size</span> <span class="o">=</span> <span class="n">DEFAULT_INITIAL_CAPACITY</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//获取数组长度</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getSize</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 求index</span>
</span><span class='line'>    <span class="kd">static</span> <span class="kt">int</span> <span class="nf">indexFor</span><span class="o">(</span><span class="kt">int</span> <span class="n">h</span><span class="o">,</span> <span class="kt">int</span> <span class="n">length</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">h</span> <span class="o">%</span> <span class="o">(</span><span class="n">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//获取元素</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">V</span> <span class="nf">get</span><span class="o">(</span><span class="n">Object</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">key</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>       <span class="kt">int</span> <span class="n">hash</span> <span class="o">=</span> <span class="n">key</span><span class="o">.</span><span class="na">hashCode</span><span class="o">();</span><span class="c1">// key的哈希值</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">indexFor</span><span class="o">(</span><span class="n">hash</span><span class="o">,</span> <span class="n">table</span><span class="o">.</span><span class="na">length</span><span class="o">);</span><span class="c1">// 求key在数组中的下标</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">table</span><span class="o">[</span><span class="n">index</span><span class="o">];</span> <span class="n">e</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">next</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Object</span> <span class="n">k</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">key</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">key</span><span class="o">.</span><span class="na">hashCode</span><span class="o">()</span> <span class="o">==</span> <span class="n">hash</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">k</span> <span class="o">==</span> <span class="n">key</span> <span class="o">||</span> <span class="n">key</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">k</span><span class="o">)))</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">e</span><span class="o">.</span><span class="na">value</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 添加元素</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">V</span> <span class="nf">put</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="n">V</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">key</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">hash</span> <span class="o">=</span> <span class="n">key</span><span class="o">.</span><span class="na">hashCode</span><span class="o">();</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">indexFor</span><span class="o">(</span><span class="n">hash</span><span class="o">,</span> <span class="n">table</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 如果添加的key已经存在，那么只需要修改value值即可</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">table</span><span class="o">[</span><span class="n">index</span><span class="o">];</span> <span class="n">e</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">next</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Object</span> <span class="n">k</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">key</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">key</span><span class="o">.</span><span class="na">hashCode</span><span class="o">()</span> <span class="o">==</span> <span class="n">hash</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">k</span> <span class="o">==</span> <span class="n">key</span> <span class="o">||</span> <span class="n">key</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">k</span><span class="o">)))</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">V</span> <span class="n">oldValue</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">value</span><span class="o">;</span>
</span><span class='line'>                <span class="n">e</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">oldValue</span><span class="o">;</span><span class="c1">// 原来的value值</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="c1">// 如果key值不存在，那么需要添加</span>
</span><span class='line'>        <span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">table</span><span class="o">[</span><span class="n">index</span><span class="o">];</span><span class="c1">// 获取当前数组中的e</span>
</span><span class='line'>        <span class="n">table</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;(</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span><span class="c1">// 新建一个Entry，并将其指向原先的e</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Uml Class Diagram of Collection and Map]]></title>
    <link href="http://alphawang.github.io/blog/collection-map-uml%20copy/"/>
    <updated>2014-11-15T14:05:15+08:00</updated>
    <id>http://alphawang.github.io/blog/collection-map-uml copy</id>
    <content type="html"><![CDATA[<p>网络上能搜到很多Java集合类的UML类图，但是大多不够明晰；所以我之前自己绘制了一份，在这里贴出来：</p>

<p><img src="http://alphawang.github.io/images/post/2014/11/collection.jpg" alt="collection icon" /></p>

<p><img src="http://alphawang.github.io/images/post/2014/11/map.jpg" alt="map icon" /></p>

<blockquote><p>btw, 这些图是用astah绘制的，这是个很好用的软件，推荐一下。官网：<a href="http://astah.net/editions/community">http://astah.net/editions/community</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Pass POJO Array to Spring MVC Controller]]></title>
    <link href="http://alphawang.github.io/blog/how-to-pass-pojo-array-to-spring-mvc-controller/"/>
    <updated>2014-10-26T15:59:15+08:00</updated>
    <id>http://alphawang.github.io/blog/how-to-pass-pojo-array-to-spring-mvc-controller</id>
    <content type="html"><![CDATA[<h2>问题</h2>

<p>最近遇到个需求，需要将一个对象数组从前端用ajax传递给后端的Spring MVC Controller，例如传递如下数据：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  products: [
</span><span class='line'>    {
</span><span class='line'>      category: 100,
</span><span class='line'>      name: 'iPad',
</span><span class='line'>      attributes: {
</span><span class='line'>        volume: '32G',
</span><span class='line'>        color: 'white'
</span><span class='line'>      }
</span><span class='line'>    },
</span><span class='line'>    {
</span><span class='line'>      category: 200,
</span><span class='line'>      name: 'xx t-shirt',
</span><span class='line'>      attributes: {
</span><span class='line'>        size: 'M',
</span><span class='line'>        color: 'red'
</span><span class='line'>      }
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>  ],
</span><span class='line'>  locale: 'zh_CN'
</span><span class='line'>}  </span></code></pre></td></tr></table></div></figure>


<p></p>

<!--more-->


<p>其中locale是一个字符串，products是一个对象数组。该对象的attributes属性名是不固定的，例如有的产品的attributes是volume+color，而有的则是size+color；所以这个attributes属性我们用Map来表示。</p>

<h2>传递基本数组</h2>

<p>首先看看如何传递基本类型数组，例如Long[]。<br/>
在后端接收该参数时很简单，只需要使用Long[]类型的@RequestParam即可，例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;/test/findproduct&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">POST</span><span class="o">)</span>
</span><span class='line'><span class="nd">@ResponseBody</span>
</span><span class='line'><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Product</span><span class="o">&gt;</span> <span class="nf">findProduct</span><span class="o">(</span>
</span><span class='line'>  <span class="nd">@RequestParam</span><span class="o">(</span><span class="n">value</span><span class="o">=</span><span class="s">&quot;objectValues&quot;</span><span class="o">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">false</span><span class="o">)</span> <span class="n">String</span><span class="o">[]</span> <span class="n">objectValues</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'> <span class="c1">//注意value=&quot;objectValues&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>前端代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>            <span class="n">$</span><span class="o">.</span><span class="na">ajax</span><span class="o">({</span>
</span><span class='line'>                <span class="nl">type:</span> <span class="s">&quot;POST&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="nl">contentType:</span> <span class="err">&#39;</span><span class="n">application</span><span class="o">/</span><span class="n">x</span><span class="o">-</span><span class="n">www</span><span class="o">-</span><span class="n">form</span><span class="o">-</span><span class="n">urlencoded</span><span class="o">;</span> <span class="n">charset</span><span class="o">=</span><span class="n">utf</span><span class="o">-</span><span class="mi">8</span><span class="o">;</span><span class="err">&#39;</span><span class="o">,</span>
</span><span class='line'>                <span class="nl">url:</span> <span class="err">&#39;</span><span class="o">/</span><span class="n">kcci</span><span class="o">/</span><span class="n">test</span><span class="o">/</span><span class="n">findproduct</span><span class="err">&#39;</span><span class="o">,</span>
</span><span class='line'>                <span class="nl">data:</span> <span class="o">{</span>
</span><span class='line'>                    <span class="nl">objectValues:</span> <span class="o">[</span><span class="mi">1000</span><span class="o">,</span> <span class="mi">1001</span><span class="o">,</span> <span class="mi">1002</span><span class="o">]</span>
</span><span class='line'>                <span class="o">},</span>
</span><span class='line'>                <span class="nl">traditional:</span> <span class="kc">true</span><span class="o">,</span>
</span><span class='line'>                <span class="nl">success:</span> <span class="n">function</span><span class="o">(</span><span class="n">items</span><span class="o">){</span> <span class="o">},</span>
</span><span class='line'>                <span class="nl">error:</span> <span class="n">function</span><span class="o">(</span><span class="n">ejqXHR</span><span class="o">,</span> <span class="n">textStatus</span><span class="o">,</span> <span class="n">errorThrown</span><span class="o">)</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'>            <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>关于traditional: true</h3>

<p>注意ajax中有个参数<code>traditional: true</code>，<strong>网上很多文章说只有这样才能让Java后台识别数组参数，但貌似并非如此</strong>。
traditional默认值为false，jquery会深度序列化参数对象，以适应如PHP和Ruby on Rails框架。序列化后的格式为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">objectValues</span><span class="o">[]:</span><span class="mi">1000</span>
</span><span class='line'><span class="n">objectValues</span><span class="o">[]:</span><span class="mi">1001</span>
</span><span class='line'><span class="n">objectValues</span><span class="o">[]:</span><span class="mi">1002</span>
</span></code></pre></td></tr></table></div></figure>


<p>但servelt api无法处理，我们可以通过设置traditional: true阻止深度序列化，这样序列化结果如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nl">objectValues:</span><span class="mi">1000</span>
</span><span class='line'><span class="nl">objectValues:</span><span class="mi">1001</span>
</span><span class='line'><span class="nl">objectValues:</span><span class="mi">1002</span>
</span></code></pre></td></tr></table></div></figure>


<p>区别仅仅是参数名不一样，那么是否将后台的<code>@RequestParam(value="objectValues"）</code>改成<code>@RequestParam(value="objectValues[]")</code>，就能接收traditional:false的参数了呢？测试下来貌似确实是可以的！</p>

<h2>传递Map</h2>

<p>前文说到要传递的对象中有个Map属性，那么如果只仅仅传递Map参数应该怎么做呢？如果直接使用Map类型的RequestParam，例如<code>@RequestParam(required = false) Map&lt;String, String&gt; params</code>，那么这个params参数实际是所有传入参数的集合。如果我们发送的参数是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">{</span>
</span><span class='line'> <span class="nl">objectValues:</span> <span class="o">[</span><span class="mi">1000</span><span class="o">,</span> <span class="mi">1001</span><span class="o">,</span> <span class="mi">1002</span><span class="o">],</span>
</span><span class='line'> <span class="nl">attributes:</span> <span class="o">{</span>
</span><span class='line'>  <span class="nl">COLOR:</span> <span class="err">&#39;</span><span class="n">red</span><span class="err">&#39;</span><span class="o">,</span>
</span><span class='line'>  <span class="nl">SIZE:</span> <span class="sc">&#39;M&#39;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
那么接收到的params为：<br/>
<img src="http://alphawang.github.io/images/post/2014/10/mapParams.png" alt="params icon" /></p>

<p>可见这个params里不仅有attributes这个Map，还有其他参数。</p>

<p>如果要让params仅仅包含我们关心的attributes map改怎么处理呢？我们需要自己新建一个Wrapper类：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Data</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AttributeMapWrapper</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">attributes</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
然后在Controller方法参数里这样写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@ModelAttribute</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;attributes&quot;</span><span class="o">)</span> <span class="n">AttributeMapWrapper</span> <span class="n">attrWrapper</span>
</span></code></pre></td></tr></table></div></figure>


<h2>传递对象数组</h2>

<p>前面讲了如何传递基本数组和Map，那么现在问题来了，如何才能传递对象数组呢？<br/>
网络上能找到一些方法，例如下面这两个：</p>

<ul>
<li><a href="http://stackoverflow.com/questions/14459171/spring-mvc-and-jquery-post-request-with-array-of-pojo">http://stackoverflow.com/questions/14459171/spring-mvc-and-jquery-post-request-with-array-of-pojo</a></li>
<li><a href="http://stackoverflow.com/questions/17987234/passing-json-array-from-javascript-to-spring-mvc-controller">http://stackoverflow.com/questions/17987234/passing-json-array-from-javascript-to-spring-mvc-controller</a></li>
</ul>


<p>基本思路是通过<code>@RequestBody</code>来获取Map，但是我在本地没有测试成功，可能原因是这里输入的并不是单一的数组，还有一个和数组并列的locale变量。</p>

<h3>HttpServletRequest + GSon</h3>

<p>可以利用HttpServletRequest获取传回的string，然后利用Gson转换为对象。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Item</span><span class="o">&gt;</span> <span class="nf">matchItems</span><span class="o">(</span>
</span><span class='line'>  <span class="nd">@RequestParam</span><span class="o">(</span><span class="n">required</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">value</span> <span class="o">=</span> <span class="s">&quot;Locale&quot;</span><span class="o">)</span> <span class="n">String</span> <span class="n">locale</span>
</span><span class='line'>  <span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="n">Gson</span> <span class="n">gson</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Gson</span><span class="o">();</span>
</span><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">ParameterWrapper</span><span class="o">&gt;</span> <span class="n">param</span> <span class="o">=</span> <span class="n">gson</span><span class="o">.</span><span class="na">fromJson</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">&quot;paramList&quot;</span><span class="o">),</span>
</span><span class='line'><span class="k">new</span> <span class="n">TypeToken</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">ParameterWrapper</span><span class="o">&gt;&gt;(){}.</span><span class="na">getType</span><span class="o">());</span>
</span><span class='line'><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>这里为参数对象写了一个Wrapper类：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Data</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ParameterWrapper</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Long</span> <span class="n">transactionId</span><span class="o">;</span>
</span><span class='line'>    <span class="n">Long</span> <span class="n">categoryId</span><span class="o">;</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">barcode</span><span class="o">;</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">productName</span><span class="o">;</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">itemName</span><span class="o">;</span>
</span><span class='line'><span class="c1">//    @SerializedName(&quot;attributes&quot;)</span>
</span><span class='line'>    <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">attributes</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样就能成功接收本文开头那种对象数组参数了。</p>

<h3>@RequestBody</h3>

<p>HttpServletRequest方法显得太过于底层，过于面向细节。上文说到因为和数组并列有个locale变量，导致无法使用@RequestBody，那是否可以通过修改API输入参数的设计来解决呢，把locale变量放到<code>ParameterWrapper</code>中是否就可以使用@RequestBody了呢？<br/>
当然可以，代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Item</span><span class="o">&gt;</span> <span class="nf">matchItems</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="n">ParameterWrapper</span><span class="o">[]</span> <span class="n">params</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Data</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ParameterWrapper</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Long</span> <span class="n">transactionId</span><span class="o">;</span>
</span><span class='line'>    <span class="n">Long</span> <span class="n">categoryId</span><span class="o">;</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">barcode</span><span class="o">;</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">productName</span><span class="o">;</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">itemName</span><span class="o">;</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">locale</span><span class="o">;</span>
</span><span class='line'><span class="c1">//    @SerializedName(&quot;attributes&quot;)</span>
</span><span class='line'>    <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">attributes</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果不能移动locale的位置该怎么办呢？可以再建一个类，其中包含两个变量：<br/>
- <code>ParameterWrapper[]</code> <br/>
- <code>String locale</code></p>

<h2>总结</h2>

<p>本文讨论了如何往Spring MVC Controller中传入基本数组、传入Map、传入对象数组。当遇到技术瓶颈时，不妨换个思路，有时修改一下设计就能豁然开朗。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integrate Octopress With Flickr]]></title>
    <link href="http://alphawang.github.io/blog/integrate-octopress-with-flickr/"/>
    <updated>2014-09-22T15:59:15+08:00</updated>
    <id>http://alphawang.github.io/blog/integrate-octopress-with-flickr</id>
    <content type="html"><![CDATA[<p>Octopress Blog有一个很酷的<a href="https://github.com/neilk/octopress-flickr">插件</a>，可以将Flickr中的某个图片插入到你的博文中。像这样：  <br/>
{\% flickr_image 15313566521 o \%}</p>

<p>还可以把Flickr某个相册中的所有图片都插入进来，像<a href="http://alphawang.com/photography/">这样</a>。</p>

<!--more-->  


<p>使用起来非常简单，只需要在博文中插入类似如下内容：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 注意：要删除\
</span><span class='line'>
</span><span class='line'>// 插入图片  
</span><span class='line'>\{\% flickr_image 15313566521 o \%\}
</span><span class='line'>
</span><span class='line'>// 插入相册  
</span><span class='line'>\{\% flickr_set 72157647828539946 q \%\}   </span></code></pre></td></tr></table></div></figure>


<p></p>

<p>当然，在这之前要安装这个插件。</p>

<h2>安装octopress-flickr</h2>

<p>基本上按照<a href="https://github.com/neilk/octopress-flickr">github</a>上的步骤就可以顺利安装。<br/>
主要步骤如下。</p>

<p><strong>1、获取Flickr api key</strong></p>

<p>首先去<a href="http://www.flickr.com/services/developer/api/">Flickr</a>获取一个api key以及对应的secret。然后将它们写入<code>_config.yml</code>：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>flickr:  
</span><span class='line'>  api_key: &lt;api_key&gt;  
</span><span class='line'>  shared_secret: &lt;shared_secret&gt;  </span></code></pre></td></tr></table></div></figure>


<p>
<strong>2、获取插件</strong><br/>
git clone <a href="https://github.com/neilk/octopress-flickr">插件</a>到本地，拷贝其中的<code>.rb</code>和<code>.scss</code>文件到Octopress得相应目录中。 <br/>
<strong>3、安装插件</strong><br/>
在Gemfile文件中新增如下几行：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  gem 'flickraw'  
</span><span class='line'>  gem 'builder', '&gt; 2.0.0'  
</span><span class='line'>  gem 'persistent_memoize'  </span></code></pre></td></tr></table></div></figure>


<p>
运行命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle install</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>并确保<code>sass/screen.scss</code>以如下行结尾：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@import "plugins/**/*";</span></code></pre></td></tr></table></div></figure>


<p><strong>4、插入图片</strong></p>

<p>至此，你就可以在blog里插入Flickr图片了，只要找到图片id或者相册id，然后像本文开头那样写到文章即可。</p>

<p>这个插件提供了2个新的tag，分别用来插入单个图片和相册，语法如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>\{\% flickr_image id [preview-size [alignment [caption]] \%\}  
</span><span class='line'>\{\% flickr_set id [preview-size [desc|nodesc]] \%\}  
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><code>preview-size</code>用一个字符来表示图片大小：</p>

<ul>
<li>o : &ldquo;Original&rdquo;, no maximum dimension</li>
<li>b : &ldquo;Large&rdquo;, 1024px</li>
<li>z : &ldquo;Medium 640&rdquo;, 640px</li>
<li>n : &ldquo;Small 320&rdquo;, 320px</li>
<li>m : &ldquo;Small&rdquo;, 240px,</li>
<li>t : &ldquo;Thumbnail&rdquo;, 100px</li>
<li>q : &ldquo;Large Square&rdquo;, 150px</li>
<li>s : &ldquo;Square&rdquo;, 75px</li>
</ul>


<p><code>alignment</code>可以设为<code>left</code>, <code>right</code>, 或者<code>center</code>。</p>

<p><code>caption</code> 是图片标题。</p>

<blockquote><p>不过仅仅这样还有个小问题：点击图片，会跳转到Flickr页面去，我们可以用Fancybox达到在当前页面弹出图片。</p></blockquote>

<h2>安装Fancybox</h2>

<p>Fancybox的效果是这样的：<br/>
<img src="http://alphawang.github.io/images/post/2014/09/fancybox.png" alt=" fancybox " /></p>

<p>去<a href="http://fancyapps.com/fancybox/">Fancybox官网</a>下载并解压，将<code>source</code>目录中的文件拷贝到<code>octopress/source/fancybox</code>目录中。<br/>
接下来将octopress-flickr插件中的<code>source/_includes/custom/fancybox_head.html</code>文件拷贝到Octopress相应目录中。</p>

<p>编辑<code>source/_includes/head.html</code>文件，在末尾插入：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>\{\% include custom/fancybox_head.html \%\}   </span></code></pre></td></tr></table></div></figure>


<p></p>

<p>然后修改<code>sass/base/_theme.scss</code>：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>body {
</span><span class='line'>-  &gt; div {
</span><span class='line'>+  &gt; #main {
</span><span class='line'>     border-bottom: 1px solid $page-border-bottom;
</span><span class='line'>-    &gt; div {
</span><span class='line'>+    &gt; #content {
</span><span class='line'>       border-right: 1px solid $sidebar-border;
</span><span class='line'>     }
</span><span class='line'>   }</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>大功告成。</p>

<h2>设置导航</h2>

<p>你还可以在导航栏设置一个页面来专门显示Flickr中的照片流。执行：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_page['photography'] </span></code></pre></td></tr></table></div></figure>


<p></p>

<p>按照本文开头的语法，添加一个相册到相应的index.makrdown中。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 注意：要删除\
</span><span class='line'>\{\% flickr_set 72157647828539946 q \%\}    </span></code></pre></td></tr></table></div></figure>


<p>在<code>source/_includes/custom/navigation.html</code>中添加导航:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;li&gt;&lt;a href="http://alphawang.github.io/photography"&gt;Photography&lt;/a&gt;&lt;/li&gt;</span></code></pre></td></tr></table></div></figure>




<!--Google Adsense-->


<p class="meta" style="text-align:center">
    <!-- 789*90 -->
    <script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
    <ins class="adsbygoogle"
         style="display:inline-block;width:789px;height:90px"
         data-ad-client="ca-pub-6393503301700908"
         data-ad-slot="7806666870"></ins>
    <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
    </script>
</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Utility Classes Are Evil]]></title>
    <link href="http://alphawang.github.io/blog/utility-classes-are-evil/"/>
    <updated>2014-09-18T15:30:18+08:00</updated>
    <id>http://alphawang.github.io/blog/utility-classes-are-evil</id>
    <content type="html"><![CDATA[<p>This post is a summary of <a href="http://www.javacodegeeks.com/2014/09/oop-alternative-to-utility-classes.html">this artical</a> and <a href="http://blogs.msdn.com/b/nickmalik/archive/2005/09/06/461404.aspx">this one</a>.</p>

<h2>What&rsquo;s Utility Classes</h2>

<p>A utility class is a class filled with static methods.  It is usually used to isolate a &ldquo;useful&rdquo; algorithm.</p>

<blockquote><p><code>StringUtils</code>, <code>IOUtils</code>, <code>FileUtils</code> from Apache Commons; <code>Iterables</code> and <code>Iterators</code> from Guava, and <code>Files</code> from JDK7 are perfect examples of utility classes.</p></blockquote>

<h2>Why Utility Classes</h2>

<p>If you have two classes <code>A</code> and <code>B</code>, and have a method <code>f()</code> that both must use, then the most naive approach is to repeat the function as a method in both classes. However, this violates the <a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself">Don&rsquo;t repeat yourself (DRY)</a> approach to programming.</p>

<p>The most natural solution is inheritance, but it&rsquo;s not always beneficial for <code>A</code> and <code>B</code> to be subclasses of some parent class. In my case, <code>A</code> was already a subclass of another class, while <code>B</code> was not. There was no way to make <code>A</code> and <code>B</code> subclasses of a parent class without breaking that other relationship.</p>

<p>The alternative is to define the utility class: a public static class that sits in the global namespace, awaiting anyone to &ldquo;borrow&rdquo; them.</p>

<p>They are not bad in themselves, but they do imply relationships between your data that are not explicitly defined. Also, if your static class has any static variables, then <code>A</code> and <code>B</code> never really know what they&rsquo;re getting into when they use it.</p>

<!--more-->


<h2>Disadvantage</h2>

<p>However, in an object-oriented world, utility classes are considered a very bad practice.<br/>
The use of utility classes to be an antipattern. More specifically, it violates common design principles:</p>

<h3>Single Responsibility Principle</h3>

<blockquote><p>A class should have one and only one reason to change</p></blockquote>

<p>You can design utility classes where all of the methods related to a single set of responsibilities.  That is entirely possible.  Therefore, I would note that this principle does not conflict with the notion of utility classes at all.<br/>
That said, I&rsquo;ve often seen helper classes that violate this principle.  They become &ldquo;catch all&rdquo; classes (or God Classes) that contain any method that the developer can&rsquo;t find another place for.  (e.g. a class containing a helper method for URL encoding, a method for looking up a password, and a method for writing an update to the config file&hellip; This class would violate the Single Responsibility Principle).</p>

<h3>Liskov Substitution Principle</h3>

<blockquote><p>Derived classes must be substitutable for their base classes</p></blockquote>

<p>This is kind of a no-op in that a utility class cannot have a derived class.  OK.  Does that mean that utility classes violate LSP?  I&rsquo;d say not.  A helper class looses the advantages of OO completely, an in that sense, LSP doesn&rsquo;t matter&hellip; but it doesn&rsquo;t violate it.</p>

<h3>Interface Segregation Principle</h3>

<blockquote><p>Class interfaces should be fine-grained and client specific</p></blockquote>

<p>another no-op.  Since utility classes do not derive from an interface, it is difficult to apply this principle with any degree of seperation from the Single Responsibility Principle.</p>

<h3>The Open Closed Principle</h3>

<blockquote><p>classes should be open for extension and closed for modification</p></blockquote>

<p>You cannot extend a utility class.  Since all methods are static, you cannot derive anything that extends from it.  In addition, the code that uses it doesn&rsquo;t create an object, so there is no way to create a child object that modifies any of the algorithms in a utility class.  They are all &ldquo;unchangable&rdquo;.</p>

<p>As such, a helper class simply fails to provide one of the key aspects of object oriented design: the ability for the original developer to create a general answer, and for another developer to extend it, change it, make it more applicable.  If you assume that you do not know everything, and that you may not be creating the &ldquo;perfect&rdquo; class for every person, then utility classes will be an anathema to you.</p>

<h3>The Dependency Inversion Principle</h3>

<blockquote><p>Depend on abstractions, not concrete implementations</p></blockquote>

<p>This is a simple and powerful principle that produces more testable code and better systems.  If you minimize the coupling between a class and the classes that it depends upon, you produce code that can be used more flexibly, and reused more easily.</p>

<p>However, a utility class cannot participate in the Dependency Inversion Principle.  It cannot derive from an interface, nor implement a base class.  No one creates an object that can be extended with a helper class.  This is the &ldquo;partner&rdquo; of the Liskov Substitution Principle, but while utility classes do not violate the LSP, they do violate the DIP.</p>

<hr />

<p><strong>In summary, utility classes are not proper objects; therefore, they don’t fit into object-oriented world. They were inherited from procedural programming, mostly because most were used to a functional decomposition paradigm back then.</strong></p>

<p>And there are other aritcals about this topic:  <a href="http://blogs.msdn.com/b/nickmalik/archive/2005/09/06/461404.aspx">Are Helper Classes Evil?</a> by Nick Malik, <a href="http://smart421.wordpress.com/2011/08/31/why-helper-singletons-and-utility-classes-are-mostly-bad-2/">Why helper, singletons and utility classes are mostly bad</a> by Simon Hart, <a href="http://www.marshallward.org/avoiding-utility-classes.html">Avoiding Utility Classes</a> by Marshal Ward, <a href="http://www.jroller.com/DhavalDalal/entry/kill_that_util_class">Kill That Util Class!</a> by Dhaval Dalal, <a href="http://www.robbagby.com/posts/helper-classes-are-a-code-smell/">Helper Classes Are A Code Smell</a> by Rob Bagby.</p>

<h2>Object-Oriented Alternative</h2>

<h3>Example1</h3>

<p>Let&rsquo;s take <code>NumberUtils</code> for example:</p>

<figure class='code'><figcaption><span>Utility Class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// This is a terrible design, don&#39;t reuse</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NumberUtils</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">max</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">a</span> <span class="o">&gt;</span> <span class="n">b</span> <span class="o">?</span> <span class="n">a</span> <span class="o">:</span> <span class="n">b</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In an object-oriented paradigm, we should instantiate and compose objects, thus letting them manage data when and how they desire. Instead of calling supplementary static functions, we should create objects that are capable of exposing the behaviour we are seeking:</p>

<figure class='code'><figcaption><span>OO Class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Max</span> <span class="kd">implements</span> <span class="n">Number</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">a</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">b</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">Max</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">a</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">b</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">intValue</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">a</span> <span class="o">&gt;</span> <span class="k">this</span><span class="o">.</span><span class="na">b</span> <span class="o">?</span> <span class="k">this</span><span class="o">.</span><span class="na">a</span> <span class="o">:</span> <span class="k">this</span><span class="o">.</span><span class="na">b</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This procedural call:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="n">NumberUtils</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>
Will become object-oriented:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Max</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="mi">5</span><span class="o">).</span><span class="na">intValue</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Example2</h3>

<p>Say, for instance, you want to read a text file, split it into lines, trim every line and then save the results in another file. This is can be done with <code>FileUtils</code> from Apache Commons:</p>

<figure class='code'><figcaption><span>Utility Class   </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nf">transform</span><span class="o">(</span><span class="n">File</span> <span class="n">in</span><span class="o">,</span> <span class="n">File</span> <span class="n">out</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Collection</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">src</span> <span class="o">=</span> <span class="n">FileUtils</span><span class="o">.</span><span class="na">readLines</span><span class="o">(</span><span class="n">in</span><span class="o">,</span> <span class="s">&quot;UTF-8&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">Collection</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">dest</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">src</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">line</span> <span class="o">:</span> <span class="n">src</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">dest</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">line</span><span class="o">.</span><span class="na">trim</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">FileUtils</span><span class="o">.</span><span class="na">writeLines</span><span class="o">(</span><span class="n">out</span><span class="o">,</span> <span class="n">dest</span><span class="o">,</span> <span class="s">&quot;UTF-8&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
The above code may look clean; however, this is procedural programming, not object-oriented. We are manipulating data (bytes and bits) and explicitly instructing the computer from where to retrieve them and then where to put them on every single line of code. We’re defining a procedure of execution.<br/>
The OO alternative is:</p>

<figure class='code'><figcaption><span>OO classes</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nf">transform</span><span class="o">(</span><span class="n">File</span> <span class="n">in</span><span class="o">,</span> <span class="n">File</span> <span class="n">out</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Collection</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">src</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Trimmed</span><span class="o">(</span>
</span><span class='line'>    <span class="k">new</span> <span class="nf">FileLines</span><span class="o">(</span><span class="k">new</span> <span class="nf">UnicodeFile</span><span class="o">(</span><span class="n">in</span><span class="o">))</span>
</span><span class='line'>  <span class="o">);</span>
</span><span class='line'>  <span class="n">Collection</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">dest</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">FileLines</span><span class="o">(</span>
</span><span class='line'>    <span class="k">new</span> <span class="nf">UnicodeFile</span><span class="o">(</span><span class="n">out</span><span class="o">)</span>
</span><span class='line'>  <span class="o">);</span>
</span><span class='line'>  <span class="n">dest</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">src</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><code>FileLines</code> implements <code>Collection&lt;String&gt;</code> and encapsulates all file reading and writing operations. An instance of <code>FileLines</code> behaves exactly as a collection of strings and hides all I/O operations. When we iterate it — a file is being read. When we addAll() to it — a file is being written.</p>

<p><code>Trimmed</code> also implements <code>Collection&lt;String&gt;</code> and encapsulates a collection of strings (Decorator pattern). Every time the next line is retrieved, it gets trimmed.</p>

<p>All classes taking participation in the snippet are rather small: <code>Trimmed</code>, <code>FileLines</code>, and <code>UnicodeFile</code>. <strong>Each of them is responsible for its own single feature, thus following perfectly the single responsibility principle.</strong></p>

<p>On our side, as users of the library, this may be not so important, but for their developers it is an imperative. It is much easier to develop, maintain and unit-test class <code>FileLines</code> rather than using a readLines() method in a 80+ methods and 3000 lines utility class <code>FileUtils</code>. Seriously, look at its source code.</p>

<h3>Lazy Execution</h3>

<p>An object-oriented approach enables lazy execution. The in file is not read until its data is required. If we fail to open out due to some I/O error, the first file won’t even be touched. The whole show starts only after we call addAll().</p>

<p>All lines in the second snippet, except the last one, instantiate and compose smaller objects into bigger ones. This object composition is rather cheap for the CPU since it doesn’t cause any data transformations.</p>

<p>Besides that, it is obvious that the second script runs in O(1) space, while the first one executes in O(n). This is the consequence of our procedural approach to data in the first script.</p>

<p>In an object-oriented world, there is no data; there are only objects and their behavior!</p>

<h2>References</h2>

<p><a href="http://www.javacodegeeks.com/2014/09/oop-alternative-to-utility-classes.html">http://www.javacodegeeks.com/2014/09/oop-alternative-to-utility-classes.html</a><br/>
<a href="http://blogs.msdn.com/b/nickmalik/archive/2005/09/06/461404.aspx">http://blogs.msdn.com/b/nickmalik/archive/2005/09/06/461404.aspx</a><br/>
<a href="http://www.marshallward.org/avoiding-utility-classes.html">http://www.marshallward.org/avoiding-utility-classes.html</a></p>

<!--Google Adsense-->


<p class="meta" style="text-align:center">
  <!-- 789*90 -->
  <script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
  <ins class="adsbygoogle"
       style="display:inline-block;width:789px;height:90px"
       data-ad-client="ca-pub-6393503301700908"
       data-ad-slot="7806666870"></ins>
  <script>
  (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zapfino: A Cool Font]]></title>
    <link href="http://alphawang.github.io/blog/zapfino-a-cool-font/"/>
    <updated>2014-09-16T17:28:52+08:00</updated>
    <id>http://alphawang.github.io/blog/zapfino-a-cool-font</id>
    <content type="html"><![CDATA[<p>I&rsquo;m tring to look for some fonts for my blog these days, and find a cool font <a href="http://en.wikipedia.org/wiki/Zapfino"><code>Zapfino</code></a> inadvertently.</p>

<p>Here is how it looks:</p>

<p><img src="http://alphawang.github.io/images/post/2014/09/font-Zapfino.png" alt="zapfino icon" /></p>

<!--more-->  


<p>Umh&hellip; The logo looks pale by comparison, I need to find a more fantastic logo later :)</p>

<p>Unfortunately, Zapfino is not installed on Windows by default, so I use <code>Lucida Handwriting</code> instead. See below:<br/>
<img src="http://alphawang.github.io/images/post/2014/09/font-LucidaHandwriting.png" alt="lucida icon" /></p>

<p>The font-family defined in my css is shown below.</p>

<figure class='code'><figcaption><span>css</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">body</span> <span class="o">&gt;</span> <span class="nt">header</span> <span class="nt">h1</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">padding-left</span><span class="o">:</span> <span class="m">45px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">font-family</span><span class="o">:</span> <span class="s2">&quot;Zapfino&quot;</span><span class="o">,</span><span class="s2">&quot;Snell Roundhand&quot;</span><span class="o">,</span><span class="s2">&quot;Lucida Handwriting&quot;</span><span class="o">,</span><span class="s2">&quot;PT Serif&quot;</span><span class="o">,</span><span class="s2">&quot;Georgia&quot;</span><span class="o">,</span><span class="s2">&quot;Helvetica Neue&quot;</span><span class="o">,</span><span class="n">Arial</span><span class="o">,</span><span class="k">serif</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Apprently, this font is suitable for titles, but not contents.</p>

<p>Here is a blog about web font in more detail: <a href="http://www.ruanyifeng.com/blog/2008/06/typography_notes.html">http://www.ruanyifeng.com/blog/2008/06/typography_notes.html</a></p>

<p>BTW, the history of Zapfino is interesting, the development had become seriously delayed: began from 1944, but released in 1998. Cite from wiki：</p>

<blockquote><p>Zapf remembered a page of calligraphy from his sketchbook from 1944, and considered the possibility of making a typeface from it. &hellip; Siegel also hired Gino Lee, a programmer from Boston, Massachusetts, to help work on the project.</p>

<p>However, just before the project was completed, Siegel wrote a letter to Zapf, saying that his girlfriend had left him and that he had lost all interest in anything. Siegel abandoned the project and started a new life, working on bringing color to Macintosh computers and later becoming an Internet design expert.</p>

<p>Zapfino&rsquo;s development had become seriously delayed,&hellip; Zapfino was released in 1998 as a Type 1 font.</p></blockquote>

<!--Google Adsense-->


<p class="meta" style="text-align:center">
    <!-- 789*90 -->
    <script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
    <ins class="adsbygoogle"
         style="display:inline-block;width:789px;height:90px"
         data-ad-client="ca-pub-6393503301700908"
         data-ad-slot="7806666870"></ins>
    <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
    </script>
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Make Mac Terminal Console / iTerm Colorful]]></title>
    <link href="http://alphawang.github.io/blog/make-iterm-colorful/"/>
    <updated>2014-09-11T14:36:31+08:00</updated>
    <id>http://alphawang.github.io/blog/make-iterm-colorful</id>
    <content type="html"><![CDATA[<p>Neither Terminal or iTerm on Mac is white/black color by default, which looks tedious. What if different entries shown in different colors?<br/>
Fortunately, we can do this just by writing a configuration file, then the terminal console or iTerm can look like this:</p>

<p><img src="http://alphawang.github.io/images/post/2014/09/iterm.png" alt="iterm icon" /></p>

<!--more-->


<p>So how can we do this? <br/>
It&rsquo;s very simple, just create a file named <code>~/.bash_profile</code>, and fill it with the following content:</p>

<figure class='code'><figcaption><span>~./bash_profile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#enables colorin the terminal bash shell export</span>
</span><span class='line'><span class="nb">export </span><span class="nv">CLICOLOR</span><span class="o">=</span>1
</span><span class='line'>
</span><span class='line'><span class="c">#sets up thecolor scheme for list export</span>
</span><span class='line'><span class="nb">export </span><span class="nv">LSCOLORS</span><span class="o">=</span>gxfxcxdxbxegedabagacad
</span><span class='line'>
</span><span class='line'><span class="c">#sets up theprompt color (currently a green similar to linux terminal)</span>
</span><span class='line'><span class="nb">export </span><span class="nv">PS1</span><span class="o">=</span><span class="s1">&#39;\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;36m\]\w\[\033[00m\]\$ &#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c">#enables colorfor iTerm</span>
</span><span class='line'><span class="nb">export </span><span class="nv">TERM</span><span class="o">=</span>xterm-color
</span></code></pre></td></tr></table></div></figure>


<p><br/>
If you are not satisfied with that color, you can change the value of LSCOLORS.</p>

<p>The value of LSCOLORS describes what color to use for which attribute when colors are enabled with CLICOLOR.  This string is a concatenation of pairs of the format fb, where f is the foreground color and b is the background color.</p>

<p>The color designators are as follows:</p>

<ul>
<li>a     black</li>
<li>b     red</li>
<li>c     green</li>
<li>d     brown</li>
<li>e     blue</li>
<li>f     magenta</li>
<li>g     cyan</li>
<li>h     light grey</li>
<li>A     bold black, usually shows up as dark grey</li>
<li>B     bold red</li>
<li>C     bold green</li>
<li>D     bold brown, usually shows up as yellow</li>
<li>E     bold blue</li>
<li>F     bold magenta</li>
<li>G     bold cyan</li>
<li>H     bold light grey; looks like bright white</li>
<li>x     default foreground or background</li>
</ul>


<p>The order of the attributes are as follows:</p>

<ol>
<li>directory</li>
<li>symbolic link</li>
<li>socket</li>
<li>pipe</li>
<li>executable</li>
<li>block special</li>
<li>character special</li>
<li>executable with setuid bit set</li>
<li>executable with setgid bit set</li>
<li>directory writable to others, with sticky bit</li>
<li>directory writable to others, without sticky bit</li>
</ol>


<blockquote><p>I&rsquo;m tring to write my blog in English, please leave a message to me if you find any mistake, I&rsquo;ll appreciate it :)<br/>
我会尽量用英文来写博客，如果你发现任何语法错误或表达错误，不要犹豫，请帮忙斧正，感激不尽！</p></blockquote>

<!--Google Adsense-->


<p class="meta" style="text-align:center">
    <!-- 789*90 -->
    <script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
    <ins class="adsbygoogle"
         style="display:inline-block;width:789px;height:90px"
         data-ad-client="ca-pub-6393503301700908"
         data-ad-slot="7806666870"></ins>
    <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
    </script>
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Calendar Tools on Mac]]></title>
    <link href="http://alphawang.github.io/blog/mac-calendar-tool/"/>
    <updated>2014-09-10T17:15:35+08:00</updated>
    <id>http://alphawang.github.io/blog/mac-calendar-tool</id>
    <content type="html"><![CDATA[<p>Mac菜单栏原生的日期时间显示比较简单，例如不能直接查看月历，比较不爽。<br/>
找到了几个比较优秀的Mac日期工具，可以替代原生功能：</p>

<h2>Day-O</h2>

<p>Day-O的界面风格与原生系统一样：</p>

<p><img src="http://alphawang.github.io/images/post/2014/09/mac-day-o.png" alt=" dayo post title bug " /></p>

<!--more-->  


<p>它还可以设置不同的时间格式，与系统一致。</p>

<p>但是正如它的About信息所说，它不能做太多事情。比如对中国用户来说，日历怎么能不显示农历呢：</p>

<blockquote><p>Day-O is a menu bar clock replacement with a simple icon and a simple calendar.<br/>
I created Day-O because my previous clock replacement started behaving erratically in Lion. Day-O doesn&rsquo;t.<br/>
Day-O doesn&rsquo;t do much of anything.</p></blockquote>

<p>点<a href="http://shauninman.com/archive/2011/10/20/day_o_mac_menu_bar_clock">这里</a>下载。</p>

<h2>中国农历 for Mac</h2>

<p>这款工具解决了Day-O的问题，它提供显示农历功能，并且还标注了节日、节气等信息，菜单栏还可以显示时间和星期。 <br/>
<img src="http://alphawang.github.io/images/post/2014/09/mac-calendar-cn.png" alt=" lunar post title bug " /><br/>
点<a href="http://www.appinn.com/calendar-cn-for-os-x/">这里</a>下载。 <br/>
但是这个工具的缺点也比较明显，界面比较粗糙，和原生界面反差比较大，比如图标并不是传统的黑色，界面背景与 Mac 传统也不太一样。强迫症患者表示很难受。</p>

<p><br/>  <br/>
我想说：</p>

<blockquote><p>有谁知道更美观的农历工具的话，请告诉我吧……</p></blockquote>

<!--Google Adsense-->


<p class="meta" style="text-align:center">
    <!-- 789*90 -->
    <script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
    <ins class="adsbygoogle"
         style="display:inline-block;width:789px;height:90px"
         data-ad-client="ca-pub-6393503301700908"
         data-ad-slot="7806666870"></ins>
    <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
    </script>
</p>

]]></content>
  </entry>
  
</feed>
